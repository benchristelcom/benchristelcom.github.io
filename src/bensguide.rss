<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0"><channel><title><![CDATA[Ben’s Guide to Software Development]]></title><description><![CDATA[a thousand little improvements]]></description><link>https://bensguide.substack.com</link><image><url>https://substackcdn.com/image/fetch/w_256,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8967e7bd-33f4-4513-a9ac-79b9eba3b0f1_144x144.png</url><title>Ben’s Guide to Software Development</title><link>https://bensguide.substack.com</link></image><generator>Substack</generator><lastBuildDate>Sat, 03 Aug 2024 23:20:25 GMT</lastBuildDate><atom:link href="https://bensguide.substack.com/feed" rel="self" type="application/rss+xml"/><copyright><![CDATA[Ben Christel]]></copyright><language><![CDATA[en]]></language><webMaster><![CDATA[bensguide@substack.com]]></webMaster><itunes:owner><itunes:email><![CDATA[bensguide@substack.com]]></itunes:email><itunes:name><![CDATA[Ben Christel]]></itunes:name></itunes:owner><itunes:author><![CDATA[Ben Christel]]></itunes:author><googleplay:owner><![CDATA[bensguide@substack.com]]></googleplay:owner><googleplay:email><![CDATA[bensguide@substack.com]]></googleplay:email><googleplay:author><![CDATA[Ben Christel]]></googleplay:author><item><title><![CDATA[Alexander's Surprising Solution]]></title><description><![CDATA[Uniting aesthetics and function]]></description><link>https://bensguide.substack.com/p/the-alexandrian-solution</link><guid isPermaLink="true">https://bensguide.substack.com/p/the-alexandrian-solution</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Mon, 29 Jul 2024 12:01:55 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p> Hello! I&#8217;m Ben Christel, and you&#8217;re reading Ben&#8217;s Guide to Software Development. Today&#8217;s post is the eighth and final episode of a series on the architect-builder Christopher Alexander, and how his philosophy applies to software development. Here are the first seven posts:</p><ul><li><p><a href="https://bensguide.substack.com/p/i-am-confused">I am confused</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-christopher-alexander-post">The Christopher Alexander Post</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part">The 15 Properties in Software, Part 1</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part-d8e">The 15 Properties in Software, Part 2</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part-1da">The 15 Properties in Software, Part 3</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part-859">The 15 Properties in Software, Part 4</a></p></li><li><p><a href="https://bensguide.substack.com/p/adaptation">Adaptation</a></p></li></ul><div><hr></div><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg" width="684" height="524.1379310344828" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:400,&quot;width&quot;:522,&quot;resizeWidth&quot;:684,&quot;bytes&quot;:96863,&quot;alt&quot;:&quot;A group of people sits around a table set with teacups and saucers. Christopher Alexander sits on the right, clapping his hands and laughing as if at a hilarious joke.&quot;,&quot;title&quot;:&quot;A group of people sits around a table set with teacups and saucers. Christopher Alexander sits on the right, clapping his hands and laughing as if at a hilarious joke.&quot;,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="A group of people sits around a table set with teacups and saucers. Christopher Alexander sits on the right, clapping his hands and laughing as if at a hilarious joke." title="A group of people sits around a table set with teacups and saucers. Christopher Alexander sits on the right, clapping his hands and laughing as if at a hilarious joke." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Christopher Alexander, the life of the party</figcaption></figure></div><p>I feel pretty silly for not re-reading what Christopher Alexander had to say on the matter, back when I published the question that started this whole series. The question, as I then stated it, was, <strong>&#8220;why do the same 15 properties of structure that characterize beautiful buildings also appear in healthy software systems?&#8221;</strong> In this final chapter of my series on Christopher Alexander, I want to analyze his solution to this puzzle.</p><p>The question I posed is a special case of a more general one: &#8220;what is the relationship between fact and value?&#8221; Or in other words, &#8220;what is the relationship between what works and what&#8217;s good?&#8221; This question is an ancient one, but it has only recently become urgent. The modern era has landed us neck-deep in planet-destroying utilitarianism and impractical, cloying style, and we need to find a way out before we alienate ourselves into oblivion.</p><p>As I dug into the chapter of <em>The Nature of Order</em> where Alexander presents his solution to this problem, I remembered why it didn&#8217;t click for me five years ago, when I first read it. It struck me at first as too vague, too woolly and &#8220;spiritual&#8221; to be plausible or falsifiable, so I dismissed it and forgot about it. But now, after <a href="https://bensguide.substack.com/p/the-15-properties-in-software-part">thinking</a> <a href="https://bensguide.substack.com/p/the-15-properties-in-software-part-d8e">through</a> <a href="https://bensguide.substack.com/p/the-15-properties-in-software-part-1da">many</a> <a href="https://bensguide.substack.com/p/the-15-properties-in-software-part-859">examples</a> in several different domains, Alexander&#8217;s solution seems far less mysterious to me, and I find myself agreeing with him, pretty much the whole way through.</p><p>I&#8217;m mostly going to just roll the tape and let him talk, though I will occasionally pause to interject my own commentary. Here is how he introduces the topic, on page 404 of <em>The Phenomenon of Life</em>.</p><blockquote><p>No building (and no part of any building) has real life unless it is deeply and robustly functional. What I mean by this, is that the beauty and force of any building arises always, <em>and in its entirety,</em> from the deep functional nature of the <a href="https://bensguide.substack.com/i/143763936/centers">centers</a> that have been created.</p><p>In nature there is essentially nothing that can be identified as a pure ornament without function. Conversely, in nature there is essentially no system that can be identified as functional which is not also beautiful in an ornamental sense. In nature there simply is no division between ornament and function. [. . .]</p><p>I shall try to show that the functional behavior of buildings, the human life present in them, like its geometry, can <em>all</em> also be understood in terms of wholeness. That means that emotion, movement, light, comfort, climate, balance of functions, the ability of a room to accommodate the behavior in the room, the engineering structure, the manufacturing &#8212; <em>all these practical matters can be understood in terms of <a href="https://bensguide.substack.com/i/143763936/centers">centers</a></em>. [. . .] All of it can and must be understood as something geometric happening in space.</p><p>During the early and middle 20th century, the idea of function was for the most part understood in a mechanistic spirit. In trying to work out what a building ought to do, how to analyze its way of working, one had the approach that the building&#8217;s functions were to be described by a kind of shopping list of &#8220;goals.&#8221; These goals were defined by the architect or engineer, then achieved.</p></blockquote><p>There&#8217;s a clear parallel to agile software development here: Alexander&#8217;s &#8220;goals&#8221; correspond to our features, user stories, epics, and perhaps KPIs (key performance indicators).</p><blockquote><p>However, there were unsolved puzzles inherent in this idea of needs or goals. Those of us who made lists of functions were aware that these lists were inherently arbitrary (dependent on the architect or client who made them, their forgetfulness, lack of insight, etc.) Where was the <em>real</em> list of needs?</p></blockquote><p>User stories are, of course, only a guess &#8212;&nbsp;an approximation of what the user <em>might</em> need, <em>might</em> do, <em>might</em> experience. A software project can deliver everything that was planned, on time and under budget, and still fail because the user stories and UI designs didn&#8217;t reflect the real set of needs. There seems to be no way around this. If you try to, say, analyze the requirements more deeply before writing user stories, you get into an infinite regress. How do you know the requirements document is correct?</p><blockquote><p>I remember making a long list of some 390 requirements which were to describe the ways in which [Bay Area Rapid Transit] stations could malfunction. But still, there was an intuitive sense that such a list might be wrong, might be missing items, might be profound or shallow. [. . .] <strong>Goals were always arbitrary in some essential way, which could not be mended.</strong></p><p>[emphasis added]</p></blockquote><p>Alexander singles out this focus on goals as a cause of the schism between beauty and function in architecture:</p><blockquote><p>There were further difficulties. The list of needs or goals, no matter how carefully stated, could only with difficulty be connected to the physical form of a building. [. . .] When it came to the physical beauty, ornament, gracefulness of appearance, these matters, obviously important, were in a different category.</p></blockquote><p>To continue the software analogy: a list of user needs, on its own, doesn&#8217;t tell you how to design your software internally, and it doesn&#8217;t even tell you what the UI should look like. Under this paradigm, the form of the thing (both internal and external), and therefore any aesthetic or emotional appeal that it has, has only a tenuous relationship to its function. If form is considered at all, it must be <em>after</em> the functional requirements of the software have already been determined. The form may then succeed or fail on its own merits, but that has nothing, supposedly, to do with its function. In this view, form for form&#8217;s sake is mere ornament &#8212; something you tack on after the fact, to &#8220;make it pretty.&#8221;</p><p>Yet this is unsatisfying, and in fact unworkable, because <em>the form creates the function of the program</em>. The program cannot function, and in fact cannot exist at all, until there is form. So if we try to separate function and form into distinct &#8220;phases&#8221; of design, we end up slapping together haphazard forms in the &#8220;function&#8221; phase, and then trying to patch them up in the &#8220;form&#8221; phase. The result is a system that neither works well nor feels good.</p><p>And we <em>still</em> have the problem that the goals we set upfront weren&#8217;t complete or correct to begin with. Sigh.</p><p>As unsatisfactory as this is, it&#8217;s hard to see how we could do better. Under the current paradigm, it seems impossible to create both beauty <em>and</em> function at a single stroke. I say <em>seems</em> because the problem lies not in our abilities, but in our <strong><a href="https://bensguide.substack.com/i/143550464/views">views</a></strong>: our views about the nature of reality, about what is subjective or objective, about the creative process, and about what it means for a building or software system to &#8220;work.&#8221;</p><blockquote><p>During the 20th century, the possibility of finding ways of designing or thinking about beauty and function in one breath seemed remote and unattainable. It was not possible, intellectually, because we did not have the right intellectual tools. It was not possible, artistically, because we could not think our way into a unitary frame of mind where the two could be fused, unified, in works of beauty which worked profoundly well. That was the state of architecture, almost without change, throughout the 20th century.</p></blockquote><p>By now you can probably see what Alexander is about to do: he wants to unify beauty and function by finding a way to get rid of the list of &#8220;goals,&#8221; or at least to treat it with a healthy irreverence. Now let&#8217;s see how he does it:</p><blockquote><p>[W]ithin the view of order which I have put forward in this book it is possible, in principle, to unify these two broken halves. It is possible to think of architecture in  a single way where beauty and function &#8212; both contributing to life &#8212; can be understood as a single, unbroken whole.</p><p>Function, like wholeness itself, is all based on centers. [. . .] As something lives, acts in the world, interacts with the world, different centers appear and disappear. Some are moving, some are temporary. The flux of these moving, transitory centers, and their appearing and disappearing, is the process we call life.</p><p>The process we call &#8220;function&#8221; is the process by which the static system is &#8212; or is not &#8212; in harmony with this moving system of centers that we call life. [. . .] As cars cross a bridge, they form centers. Each car in itself is a center; the stream of cars forms centers; a traffic blockage is a center. The road system, which has its own geometric centers, is either harmonious, or not harmonious, with the system of cars that are parked, moving, standing, and so on.</p><p>When they are harmonious and co-adapted, we call the system functional.</p></blockquote><p>In other words, there is only one kind of harmonious order, which is characterized by the fifteen properties. When we look at this kind of order &#8220;from the outside,&#8221; as an observer, we see wholeness, beauty, and good function. When we experience the same kind of order &#8220;from the inside,&#8221; by actually <em>living in</em> a system with the 15 properties &#8212; by actually <em>being</em> one of the dynamic centers that creates the life of the system &#8212; then we <em>feel</em> whole, at peace with ourselves, free, alive.</p><p>The highest purpose of a building, or a software program, is to strengthen this feeling of life in the people around it. And the way that the building or program creates life is very simple: it does it just though its form, through its geometry. Only its geometry, and nothing else.</p><p>This is perhaps easiest to see in software systems. The code of a running software application can be viewed as consisting of nothing but pure, abstract structure, like virtual <a href="https://en.wikipedia.org/wiki/Tinkertoy">Tinkertoys</a>. The <a href="https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis">Church-Turing thesis</a> proves the validity of this view: you can compute anything that can be computed with nothing but an elaborate tree of <a href="https://en.wikipedia.org/wiki/Lambda_calculus">lambdas</a>. So it is <em>only</em> structure, and the order of the structure &#8212; the way it is put together, the way the different parts relate &#8212; that determines the <a href="https://bensguide.substack.com/p/behavior">behavior</a>, and thus the life, of the whole system.</p><p>In the same way, the life of a building comes just from its structure. The placement of the building on the site, its relationship to its neighbors, the proportions of the rooms, their arrangement, the placement of the windows and doors and pathways, the way sunlight falls in the rooms, the furniture, the trim, the way the light interacts with materials and human eyes &#8212;&nbsp;it is all structure. As we interact with this structure, we label some of our experiences &#8220;functional&#8221; and others &#8220;aesthetic.&#8221; But those are just labels. The fundamental thing is the geometry of the structure, and the interactions it creates. In other words, the fundamental thing is the life of the building.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4cdee847-ffe3-48d3-ac67-7512769eee66_500x355.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4cdee847-ffe3-48d3-ac67-7512769eee66_500x355.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4cdee847-ffe3-48d3-ac67-7512769eee66_500x355.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4cdee847-ffe3-48d3-ac67-7512769eee66_500x355.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4cdee847-ffe3-48d3-ac67-7512769eee66_500x355.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4cdee847-ffe3-48d3-ac67-7512769eee66_500x355.jpeg" width="500" height="355" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/4cdee847-ffe3-48d3-ac67-7512769eee66_500x355.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:355,&quot;width&quot;:500,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;https://i.pinimg.com/originals/dd/7c/49/dd7c49192915f9961805277721c9af25.jpg&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="https://i.pinimg.com/originals/dd/7c/49/dd7c49192915f9961805277721c9af25.jpg" title="https://i.pinimg.com/originals/dd/7c/49/dd7c49192915f9961805277721c9af25.jpg" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4cdee847-ffe3-48d3-ac67-7512769eee66_500x355.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4cdee847-ffe3-48d3-ac67-7512769eee66_500x355.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4cdee847-ffe3-48d3-ac67-7512769eee66_500x355.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4cdee847-ffe3-48d3-ac67-7512769eee66_500x355.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">A &#8220;farmhouse kitchen&#8221; designed by Christopher Alexander</figcaption></figure></div><p>To see the inadequacy of the &#8220;functional&#8221; and &#8220;aesthetic&#8221; labels, consider the life of a living room and the furniture and people in it:</p><ul><li><p>A living room chair may be comfortable, with cushions and upholstery that are pleasant to sit on. Is this function or aesthetics?</p></li><li><p>The seating in a living room might be arranged around a hearth &#8212; a <strong>strong center</strong> &#8212; and might form a protective <strong>boundary</strong> that separates the seating area from the circulation paths at the edge the room. This arrangement is functional (conducive to conversation) but it is also beautiful <em>as pure abstract structure</em>: it makes the room feel cohesive, balanced, and harmonious. So is it functional, or aesthetic?</p></li><li><p>The hearth itself can be a beautiful center, but it is also practical: in cold climates it provides needed heat to the house. It also provides a focal point for the room: something for people to gather around, and to look at as they talk. But does that satisfy a functional need? Or an aesthetic one?</p></li><li><p>All of these properties of the room encourage people to pause there, to sit down, to relax and talk and generally be convivial. Is this function or aesthetics?</p></li></ul><p>These questions don&#8217;t have clear answers, but fortunately, under Alexander&#8217;s paradigm, they don&#8217;t need to be asked. &#8220;Function&#8221; and &#8220;aesthetics&#8221; are concepts we&#8217;ve imposed on a universe that simply doesn&#8217;t care to distinguish between them. Since we made them up, we are free to get rid of them.</p><p>To be sure, there are some aspects of life that seem almost purely aesthetic, or almost purely functional. The distinction exists in our modern culture for a reason. But in a paradigm that does away with the distinction, we can still recognize these different aspects of life while also seeing that they are <em>both</em> life, and that they both arise from the same structural properties of centers.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3af26138-4adf-4f11-bd7e-54c3333fee3b_550x366.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3af26138-4adf-4f11-bd7e-54c3333fee3b_550x366.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3af26138-4adf-4f11-bd7e-54c3333fee3b_550x366.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3af26138-4adf-4f11-bd7e-54c3333fee3b_550x366.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3af26138-4adf-4f11-bd7e-54c3333fee3b_550x366.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3af26138-4adf-4f11-bd7e-54c3333fee3b_550x366.jpeg" width="722" height="480.4581818181818" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3af26138-4adf-4f11-bd7e-54c3333fee3b_550x366.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:366,&quot;width&quot;:550,&quot;resizeWidth&quot;:722,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;EISHIN CAMPUS&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="EISHIN CAMPUS" title="EISHIN CAMPUS" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3af26138-4adf-4f11-bd7e-54c3333fee3b_550x366.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3af26138-4adf-4f11-bd7e-54c3333fee3b_550x366.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3af26138-4adf-4f11-bd7e-54c3333fee3b_550x366.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3af26138-4adf-4f11-bd7e-54c3333fee3b_550x366.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Unity of beauty and function: cherry trees blooming on the Eishin high school campus, designed and built by Christopher Alexander.</figcaption></figure></div><p>When you view the world from this perspective, everything snaps into focus. Beauty and function are not separate. They are simply two ways of describing a spectrum of experience. That experience is determined by the structure of the system, because <em>everything</em> is determined by the structure of the system.</p><blockquote><p>The functional behavior of each living room is almost geometrical in nature. What makes the room work is the geometrical intensity, vibrancy, of its living centers, their degree of life. The fifteen properties, the field of centers, and the wholeness not only control the way that beautiful buildings look. <em>They thoroughly and completely determine the way that buildings work</em>.</p><p>Altogether I believe the functional life of buildings is created by the same field effect among centers which creates the field of centers in an ornament. Each functional &#8220;problem&#8221; is solved by the cooperation or integration of centers which arise within the building dynamically, while it is working. The field of centers supports not only everything we commonly call ornament in a building but also everything we commonly call function. [. . .] What we call ornament and what we call function are simply two versions of one more general phenomenon.</p><p>&#8212;<em>The Phenomenon of Life</em>, p. 415</p></blockquote><p>Equipped with this view, the designer, instead of having to grapple with two questions &#8212; &#8220;how do we make it work&#8221; and &#8220;how do we make it beautiful&#8221; &#8212; only needs to consider one: <strong>&#8220;what should my next change to the form be, to create the greatest feeling of life in the whole?&#8221;</strong> This is a difficult question to answer, but, as I will attempt to show in my <a href="https://benchristel.github.io/process-to-processes/">book</a>, not as difficult as it seems. And it is <em>far</em> more workable, practically, than the alternative under which we are currently suffering.</p><p>So, to answer my original question:</p><blockquote><p>Why do the same 15 properties of structure that characterize beautiful buildings also appear in healthy software systems?</p></blockquote><p>I think Alexander would say that the 15 properties describe a certain kind of structure: orderly, harmonious, whole &#8212; whatever you want to call it. A kind of structure that <em>makes sense</em>. Sometimes we call this sense-making &#8220;beauty&#8221; and sometime we call it &#8220;function&#8221; and sometimes we call it &#8220;health&#8221; or &#8220;wholeness&#8221; or &#8220;life.&#8221; It is all the same thing, the same kind of order.</p><p>And to answer Alexander&#8217;s rhetorical question,</p><blockquote><p>Where was the <em>real</em> list of needs?</p></blockquote><p>I would say that there is only one real need, from which all the other specific needs derive: the life of the whole.</p><p><em>This</em> is the need that I constantly return to when creating software. Whenever I am thinking about what to do and how to do it, I always evaluate the result (or my guess at what the result will be) by the life that it creates. By which I mean: is the resulting interaction more pleasant than the status quo? Or, more profoundly: does it make me feel more alive, more of a person, more connected to the work, more truly at ease being myself?</p><blockquote><p>What is involved in this approach is that we pay attention not only to the functions themselves, but also (and rather) to the overall life of the system as a whole. The approach treats the space as a whole, and tries to make it more harmonious, more alive, more unified <em>as a</em> <em>whole</em>.</p><p>&#8212;<em>The Phenomenon of Life</em>, p. 419</p></blockquote><p>As strange as it sounds, designing for life works. Here is Alexander&#8217;s account of how he designed housing in Peru in 1969, beginning with a home-stay with a Peruvian family:</p><blockquote><p>Before going to Lima, we read various anthropologists&#8217; reports about Peruvian society. It all seemed very exotic, but none of it seemed even remotely useful when we were living in our Peruvian families. For instance, ethnographic reports claimed that Peruvians kept the windows closed at night, even in hot weather, because they didn&#8217;t want ghosts to come through the windows with the night air. I never heard anyone say anything like this while I was living in the district of Victoria in Lima.</p><p>I found that I could imagine the Peruvians&#8217; feelings best just by being one of them. For instance it was a dangerous place, and it wasn&#8217;t safe to leave windows open at night. That was really all the explanation one needed for why the windows had to be closed, even when it was sweltering hot. I found that if I looked at life from the point of view of being one of them, my own feelings, and my own knowledge of what had to be, was more reliable than anything else as an indicator of what was needed for a Peruvian family.</p><p>The <em>comedor</em> (dining room) in the middle of the house, where everyone came by, watched TV, or sat and talked on the way in or out, was a wonderful place. Being a member of that family, I knew that I needed and wanted such a room &#8212; and I could feel exactly where it needed to be in the house (in the middle of everything). [. . .] I, myself (as Chris Alexander) didn&#8217;t have a house like that, and I don&#8217;t want a house like that &#8212; because for me, in Berkeley, with my family, it would not have made sense &#8212; it would not have been part of things, or part of the way my life works. But as a member of that Peruvian family, in the Peruvian culture, in the context of that family which I was a part of, it <em>did</em> make sense. It was natural, necessary, and I could feel its necessity, as part of <em>me</em>.</p><p>&#8212;<em>The Process of Creating Life</em>, pp. 350&#8211;51</p></blockquote><p>By Alexander&#8217;s account, the process succeeded:</p><blockquote><p>[P]eople in Peru said that our pattern language and our houses we designed from the pattern language were a more accurate reflection of Peruvian reality than even the Peruvian architects had managed.</p><p>People wondered how we did it. But it was really very simple [. . . .] We identified the centers by getting so deeply into the situation that we could feel, in our own bodies, just which ones needed to be there.</p><p>The essential technique in the observation of centers, in any social situation, and in any culture, is to allow the feelings to generate themselves, inside <em>you</em>. You have to say, &#8220;What would I do if I were one of the people living here, what would it be like for me?&#8221; thus inserting yourself into the situation, and then using your own common sense and feelings as a measuring instrument.</p><p>Of course you must always check with people, explicitly. You cannot assume you are right. You have to check. On the other hand, checking doesn&#8217;t mean just do what people say; their own sense of what is involved can also be in error. One must always go to the root, asking what is likely to create the most life, and maintaining a cautious skepticism, even while pursuing these difficult and soul-searching questions.</p><p>&#8212;<em>The Process of Creating Life</em>, p. 352</p></blockquote><p>The process Alexander is describing here &#8212; and this is in <em>1969</em>, remember &#8212; foreshadows Extreme Programming, which recommends having an <strong>onsite customer </strong>for the software you&#8217;re building. The idea behind the onsite customer is that if programmers live side-by-side with one of their users, day in and day out, seeing how they work, and experiencing their joys and frustrations, they will develop empathy for those users. Empathy makes it much more likely that the team will build a great product. This technique of &#8220;feeling into&#8221; another person&#8217;s experience, by almost literally standing in their shoes, is exactly the same as what Alexander did in Lima.</p><p>Christopher Alexander&#8217;s philosophy may seem pretty &#8220;out there&#8221; at first glance, but putting it into practice feels rather ordinary and commonsense. In a way, what I&#8217;ve written above isn&#8217;t all that far-fetched, compared to the way we routinely do things in software development today. Ideas like service design, incremental development, refactoring, user interviews, recognition of the <a href="https://lawsofux.com/aesthetic-usability-effect/">aesthetic-usability effect</a> &#8212; these <em>are</em> the state of the art in at least some software companies. I sometimes feel that we are close to achieving Alexander&#8217;s vision, and that the philosophy I&#8217;m describing is a short step away from how (good) modern software development currently works.</p><p>But we are <em>not</em> close. Though some of us may be heading in the right direction, there is a deep chasm between how we <em>feel</em> about our work today, and how we need to feel, in order to generate the kind of world that Alexander envisioned. I said we are one step away, but in reality that step would be a leap: a quantum leap, into a new paradigm, and an entirely new way of viewing our relationship with the world. We aren&#8217;t prepared to make that leap yet.</p><p>I remain hopeful, though, that someday soon, we will be.</p><p>.</p><p>.</p><p>.</p><p>THE END of the Christopher Alexander series.</p><div><hr></div><p><em>What would be required for us to cross the chasm into the Alexandrian paradigm, in which fact and value are unified? I hope to explore that topic in a future post. For now, here is a sneak peek:</em></p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda924e97-2dd4-4e5f-b3f9-a1a89e283066_2757x876.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda924e97-2dd4-4e5f-b3f9-a1a89e283066_2757x876.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda924e97-2dd4-4e5f-b3f9-a1a89e283066_2757x876.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda924e97-2dd4-4e5f-b3f9-a1a89e283066_2757x876.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda924e97-2dd4-4e5f-b3f9-a1a89e283066_2757x876.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda924e97-2dd4-4e5f-b3f9-a1a89e283066_2757x876.png" width="1200" height="381.5934065934066" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/da924e97-2dd4-4e5f-b3f9-a1a89e283066_2757x876.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:463,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:241183,&quot;alt&quot;:&quot;Two diagrams showing reinforcing feedback loops. On the left, \&quot;The Vicious Cycle of Alienation\&quot;: Alienation, Aversion, Callousness, Lack of care, mess and broken windows. On the right, \&quot;The Virtuous Cycle of Oneness\&quot;: Oneness, gusto, kindness, attentive care, living structure&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="Two diagrams showing reinforcing feedback loops. On the left, &quot;The Vicious Cycle of Alienation&quot;: Alienation, Aversion, Callousness, Lack of care, mess and broken windows. On the right, &quot;The Virtuous Cycle of Oneness&quot;: Oneness, gusto, kindness, attentive care, living structure" title="Two diagrams showing reinforcing feedback loops. On the left, &quot;The Vicious Cycle of Alienation&quot;: Alienation, Aversion, Callousness, Lack of care, mess and broken windows. On the right, &quot;The Virtuous Cycle of Oneness&quot;: Oneness, gusto, kindness, attentive care, living structure" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda924e97-2dd4-4e5f-b3f9-a1a89e283066_2757x876.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda924e97-2dd4-4e5f-b3f9-a1a89e283066_2757x876.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda924e97-2dd4-4e5f-b3f9-a1a89e283066_2757x876.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda924e97-2dd4-4e5f-b3f9-a1a89e283066_2757x876.png 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption"></figcaption></figure></div><p></p><div><hr></div><p><em>Okay, that&#8217;s all for now, folks! Back to book-writing for me. And, uh, all my other projects. I have a lot of irons in the fire right now. I hope to have things in a shape where I can share some of what I&#8217;m doing with you next week.</em></p><p><em>Thanks for being here.</em></p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/subscribe?"><span>Subscribe now</span></a></p><p></p>]]></content:encoded></item><item><title><![CDATA[Adaptation]]></title><description><![CDATA[The missing link between architecture, nature, and software?]]></description><link>https://bensguide.substack.com/p/adaptation</link><guid isPermaLink="true">https://bensguide.substack.com/p/adaptation</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Mon, 22 Jul 2024 12:01:11 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>I&#8217;m Ben Christel, and you&#8217;re reading Ben&#8217;s Guide to Software Development. This post is the seventh in a series about the architect-builder Christopher Alexander and how his work relates to software. In case you missed the first six posts, here they are in chronological order:</p><ul><li><p><a href="https://bensguide.substack.com/p/i-am-confused">I am confused</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-christopher-alexander-post">The Christopher Alexander Post</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part">The 15 Properties in Software, Part 1</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part-d8e">The 15 Properties in Software, Part 2</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part-1da">The 15 Properties in Software, Part 3</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part-859">The 15 Properties in Software, Part 4</a></p></li></ul><p><strong>CAUTION:</strong> I originally planned for this post to be the conclusion of the C.A. series. However, I don&#8217;t think it is necessarily <em>the</em> conclusion, nor even a particularly good way of looking at the <a href="https://bensguide.substack.com/p/i-am-confused">question</a> I&#8217;m trying to answer &#8212; namely, why the same fifteen properties of structure that characterize healthy natural systems and beautiful buildings also appear in maintainable, human-adapted software systems. It was only after I&#8217;d written several very different drafts of this post that I went combing through <em>The Nature of Order</em> to see if Christopher Alexander had an answer to the problem I was struggling with. I discovered that he did, and that it was better than any of my answers. So there will probably be another post after this one, explaining what his answer is and why I think it&#8217;s better.</p><p>Rather than throw away my drafts, though, I thought I&#8217;d show a few of them to you &#8212; the top three &#8220;takes,&#8221; one after the other. I&#8217;m hoping that if I show you my thought process, it will prepare you (as it prepared me) for Alexander&#8217;s surprising solution.</p><h2>Take 1: Adaptation</h2><p><em>In this first take, I try to identify a common thread uniting software, buildings, and biological organisms: namely, that all these systems must adapt to their environments while maintaining their own internal order. The purpose of the 15 properties, in this view, is to enable the adaptation process to continue indefinitely, by keeping the system &#8220;whole&#8221; or self-consistent. I end by positing a relationship between self-consistency and optionality: I claim that only a self-consistent system has the flexibility to grow and change, and thus to adapt to future needs.</em></p><div><hr></div><blockquote><p>Computer scientists have told me proudly that they consider computer programs the most complex objects designed by human beings. Yet, to date, there is little recognition of the following commonsense point: If indeed the programs are so complex, then it is likely that they, too, will be potentially subject to hundreds of thousands, perhaps millions of egregious mistakes of adaptation. Here I am not only talking about &#8220;bugs&#8221; &#8212;&nbsp;failures which stop a program from running altogether. I am talking about mistakes of adaptation, ways in which the program fails to do what it is supposed to do, fails to meet the needs of the people who use it, or is more awkward, more annoying, less useful, than it is supposed to be. If the analysis given in this chapter is correct, then it is fair to say that truly successful programs can only be <em>generated</em>, and that the way forward in the next decades, towards programs with highly adapted human performance, will be through programs which are generated through unfolding, in some fashion comparable to what I have described for buildings.</p><p>&#8212;Christopher Alexander, <em>The Process of Creating Life</em>, p. 198</p></blockquote><p>I began this series of posts on Christopher Alexander with a question &#8212; or rather, with a startling and puzzling observation. Namely: that the fifteen properties of structure that characterize both living systems and lovable places also appear in healthy software systems. They appear in code. They appear in user interfaces. They even appear in team structures. In all of these cases &#8212; buildings, natural systems, code, UIs, and teams &#8212; I have observed that healthy systems tend to have the fifteen properties, while unhealthy systems tend not to.</p><p>The question is: why?</p><p>These kinds of structure are vastly different. They differ in their purpose, in their physical makeup, in their scale, in their intentionality. Why should they be similar in form? What common thread unites them all?</p><p>To recap, here&#8217;s how I phrased the problem <a href="https://bensguide.substack.com/p/i-am-confused">originally</a>.</p><blockquote><p>Christopher Alexander described fifteen geometric properties of living centers &#8212; properties that occur over and over again in systems where we feel life. He described how those properties could be generated by an iterative process in which centers &#8220;unfold&#8221; from undifferentiated space. I&#8217;ve applied those same methods to computer systems, <a href="https://github.com/benchristel/benchristel.github.io/wiki/FifteenPropertiesInSoftware">generating the same properties</a>, and discovered that <em>not only does the feeling of life in those systems become more profound, in exactly the way Alexander predicted, but that the systems work better, mechanically, as a result of my changes. They are better at information transfer.</em></p><p>So something <em>really</em> weird is going on.</p></blockquote><p>I don&#8217;t have a tidy solution for this weirdness. But I have at least a guess at an explanation that seems to explain all of my disparate observations.</p><p>My original confusion, I think, is best exemplified by this sentence:</p><blockquote><p>[C.A.] described how [the 15] properties could be generated by an iterative process in which centers &#8220;unfold&#8221; from undifferentiated space.</p></blockquote><p>I had this backwards: the main goal of the iterative process is not to generate the 15 properties. <strong>The purpose of the 15 properties is to allow the iterative process to keep going &#8212;&nbsp;to keep it sustainable.</strong> This purpose seems to be the same wherever the 15 properties appear: in software, in nature, in groups of people, and in buildings. In every case, I believe the 15 properties simply describe the structure of systems that can develop over time, adapting to change and variety without breaking.</p><p>To construct an argument for why this is so, I&#8217;ll start with a few general observations about adaptation, which apply equally to architecture, software development, and natural selection:</p><ol><li><p>Everything that is adapted to its environment had to get that way somehow.</p></li><li><p>In general, finely-adapted systems are too complex to have been designed.</p></li><li><p>Therefore, the process by which adapted systems get that way must be <em>stepwise</em>. Which means:</p><ol><li><p>At each step, the evolving system (structure + environment) must be able to survive long enough to get to the next step. In software, this might mean that the system is releasable and all the tests pass.</p></li><li><p>There must be some way of evaluating the system at each step, to determine how well the structure fits its environment. In software, we often evaluate this via exploratory testing and user interviews.</p></li><li><p>It must be possible to roll back or discard a step that does not improve fitness.</p></li><li><p><strong>Each step taken must not preclude future steps.</strong> The adaptation process must be able to continue indefinitely, because the &#8220;end&#8221; cannot be foreseen.</p></li></ol></li></ol><p>State-of-the-art software development processes like Continuous Delivery incorporate criteria (3. a&#8211;c), but tend to fall down at (3. d). Hacks, kludges, and &#8220;temporary&#8221; fixes are all too common; these compromise the maintainability of the system and hamper its ability to adapt further. If hacks are allowed to pile up, changes in the environment begin to outpace the rate at which the software can change, and eventually the software becomes so maladapted that it has to be thrown away and rewritten.</p><p>This cycle of software growth, complication and death is so ubiquitous that it is hard to imagine how it could be different. How could we possibly avoid taking steps that preclude future steps? We can&#8217;t see the future, after all.</p><p>Christopher Alexander gives us a clue: he frames each of the fifteen properties as the result of a different <em>wholeness-preserving transformation</em> of the structure that was there before. A wholeness-preserving transformation, in his view, is one that leaves the existing structure essentially undisturbed, and simply extends or embellishes it in some way. Wholeness-preserving changes feel natural, and making them is relatively easy.</p><p>We&#8217;ve all experienced the difference between wholeness-preserving and wholeness-destroying changes when writing code. Wholeness-preserving changes fit in with the existing structure of the code. They tend to be simple additions of new code, with no invasive surgery required. By contrast, wholeness-destroying changes cut across functions or modules, complicating the code with new irregularities. The diffs for wholeness-destroying changes tend to be difficult to read.</p><p>Thus, we have an inkling of an idea that the wholeness-preserving nature of the fifteen properties might be related to the long-term maintainability or adaptability of the system. Systems that accumulate a lot of wholeness-destroying changes become hard to change. But why is this the case? What do the fifteen properties have to do with changeability?</p><p>I think the key is this: a system that is whole has <strong>options </strong>for future development. That is, there are certain ways of developing it or extending it that make sense and are consistent with its existing structure. The system&#8217;s options are precisely the possible wholeness-preserving transformations. By contrast, a system that is not whole or self-consistent has fewer options. Because it contains contradictory structures, there are few or no possible extensions that make sense with the entire system as it exists.</p><p>The idea of a whole or harmonious structure &#8212; one that is easy to make sense of &#8212; is echoed in Fred Brooks&#8217; notion of <em>conceptual integrity</em>. In Brooks&#8217; terms, the job of a software architect is to maintain the conceptual integrity (i.e. wholeness) of the system, and to refuse any feature requests that jeopardize it.</p><blockquote><p>Conceptual integrity is the most important consideration in system design. It is better to have a system omit certain anomalous features and improvements, but to reflect one set of design ideas, than to have one that contains many good but independent and uncoordinated ideas.</p><p>&#8212;Fred Brooks, <em>The Mythical Man-Month</em></p></blockquote><p>This sounds an awful lot like Christopher Alexander&#8217;s vision of what a building-architect&#8217;s job should be, but note an important difference: Brooks isn&#8217;t concerned with beauty per se; he cares about keeping the system intelligible to its developers and users.</p><p>I don&#8217;t have a satisfying conclusion. I can only guess that underlying Alexander&#8217;s concepts of life, beauty, and wholeness, and Brooks&#8217; concept of conceptual integrity, there is some unifying idea. <em>Making sense</em> or <em>rightness</em> seems to get close. A more precise formulation of this concept will have to be taken up in future missives.</p><h2>Take 2: Limited Resources vs. Unbounded Variety</h2><p><em>In this take, I tried again to find similarities between software, the built environment, and biological systems, and build an argument off of those similarities. While the previous take focused on the process of never-ending adaptation and the wholeness that enables it, this one focuses on the functional problem that all of these disparate systems are trying to solve.</em></p><div><hr></div><p>When you think about it, biological organisms, buildings, and software companies are alike in one crucial respect: they are all trying to solve the same type of extremely difficult problem. Each is faced with the task of coping with an unknowable and unboundedly varied set of future demands. To meet these demands, they can draw on only a limited pool of resources. If the system encounters a problem it can&#8217;t quickly address, that might mean game over. So the stakes are high.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1" href="#footnote-1" target="_self">1</a></p><p>This sounds like an impossible challenge, but programmers and architects grapple with it every day. Sometimes they even seem to have the upper hand. But how? How do you create something when you aren&#8217;t even sure what uses it will be put to or what problems it might someday need to solve?</p><p>The answer is, you don&#8217;t try to find the perfect design up front. Instead, you:</p><ul><li><p><strong>stay flexible</strong>, by shaping the system so parts can be repurposed (<a href="https://bensguide.substack.com/i/144306439/positive-space">positive space</a>, <a href="https://bensguide.substack.com/i/144306439/good-shape">good shape</a>, <a href="https://bensguide.substack.com/i/144510109/contrast">contrast</a>, <a href="https://bensguide.substack.com/i/144306439/deep-interlock-and-ambiguity">deep interlock and ambiguity</a>)</p></li><li><p><strong>organize</strong><a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2" href="#footnote-2" target="_self">2</a><strong> the structure</strong> so problems that arise locally can be solved locally (<a href="https://bensguide.substack.com/i/144076033/levels-of-scale">levels of scale</a>, <a href="https://bensguide.substack.com/i/144076033/thick-boundaries">boundaries</a>, <a href="https://bensguide.substack.com/i/144510109/gradients">gradients</a>, <a href="https://bensguide.substack.com/i/144510109/roughness">roughness</a>, <a href="https://bensguide.substack.com/i/144510109/contrast">contrast</a>)</p></li><li><p><strong>limit context-sensitivity</strong> in each part, stabilizing it and enabling it to survive in a variety of environments (<a href="https://bensguide.substack.com/i/144076033/thick-boundaries">boundaries</a>, <a href="https://bensguide.substack.com/i/144076033/strong-centers">strong centers</a>)</p></li><li><p><strong>acknowledge that adaptation is a never-ending process</strong>, by:</p><ul><li><p>leaving room to grow and change (<a href="https://bensguide.substack.com/i/144306439/deep-interlock-and-ambiguity">deep interlock and ambiguity</a>, <a href="https://bensguide.substack.com/i/144972028/the-void">the void</a>)</p></li><li><p>not trying to get things into a &#8220;final,&#8221; perfect form (<a href="https://bensguide.substack.com/i/144510109/roughness">roughness</a>, <a href="https://bensguide.substack.com/i/144972028/simplicity-and-inner-calm">simplicity</a>, <a href="https://bensguide.substack.com/i/144972028/not-separateness">not-separateness</a>)</p></li></ul></li><li><p><strong>conserve effort</strong>, by:</p><ul><li><p>doing only what demonstrably helps the whole (<a href="https://bensguide.substack.com/i/144306439/local-symmetries">local symmetry</a>, <a href="https://bensguide.substack.com/i/144972028/simplicity-and-inner-calm">simplicity and inner calm</a>)</p></li><li><p>shamelessly borrowing good ideas from anywhere and everywhere (<a href="https://bensguide.substack.com/i/144972028/echoes">echoes</a>)</p></li></ul></li></ul><p>In short, you keep your options open. By building for the present while preserving your options for future change, you make it more likely that you&#8217;ll be able to adapt to whatever future eventually arrives.</p><p>I currently believe that following these principles throughout the development of a system will, inevitably, create structures with the fifteen Alexandrian properties. The properties arise just from the process of adapting each part of the system to its environment, while preserving options for future change.</p><h2>Take 3: Oneness</h2><p><em>This one got closest, I think.</em> <em>Really, what I think the software industry needs is not to get better at adaptation, incremental development, or valuing optionality. What we need more is to de-alienate ourselves from our work, our environment, and each other.</em></p><div><hr></div><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg" width="684" height="524.1379310344828" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:400,&quot;width&quot;:522,&quot;resizeWidth&quot;:684,&quot;bytes&quot;:96863,&quot;alt&quot;:&quot;A group of people sits around a table set with teacups and saucers. Christopher Alexander sits on the right, clapping his hands and laughing as if at a hilarious joke.&quot;,&quot;title&quot;:&quot;A group of people sits around a table set with teacups and saucers. Christopher Alexander sits on the right, clapping his hands and laughing as if at a hilarious joke.&quot;,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="A group of people sits around a table set with teacups and saucers. Christopher Alexander sits on the right, clapping his hands and laughing as if at a hilarious joke." title="A group of people sits around a table set with teacups and saucers. Christopher Alexander sits on the right, clapping his hands and laughing as if at a hilarious joke." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe265e97a-b5bc-4698-b707-547e9b6ae392_522x400.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Christopher Alexander, the life of the party</figcaption></figure></div><p>Part of adapting to an unforeseeable future means accommodating different people&#8217;s tastes. This is a hard problem. How can you make a beautiful building that will stand for a thousand years, when you can&#8217;t predict what will be in fashion even ten years from now?</p><p>Everyone has idiosyncratic likes and dislikes, but broadly speaking we all like nature. The way we recognize healthy natural systems, wired into us by evolution, is by the sensory impression of the fifteen Alexandrian properties. Architects and builders throughout history, in every part of the world, have used this fact to create timelessly beautiful buildings. Christopher Alexander&#8217;s work proves that we can still do so today, if we want to.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6801ddf2-221e-4b94-b578-928bac41403e_654x338.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6801ddf2-221e-4b94-b578-928bac41403e_654x338.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6801ddf2-221e-4b94-b578-928bac41403e_654x338.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6801ddf2-221e-4b94-b578-928bac41403e_654x338.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6801ddf2-221e-4b94-b578-928bac41403e_654x338.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6801ddf2-221e-4b94-b578-928bac41403e_654x338.jpeg" width="720" height="372.11009174311926" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6801ddf2-221e-4b94-b578-928bac41403e_654x338.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:338,&quot;width&quot;:654,&quot;resizeWidth&quot;:720,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Living Neighborhoods -- West Dean&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Living Neighborhoods -- West Dean" title="Living Neighborhoods -- West Dean" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6801ddf2-221e-4b94-b578-928bac41403e_654x338.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6801ddf2-221e-4b94-b578-928bac41403e_654x338.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6801ddf2-221e-4b94-b578-928bac41403e_654x338.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6801ddf2-221e-4b94-b578-928bac41403e_654x338.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">The West Dean Visitors Centre, by Christopher Alexander. West Dean College, Chichester, England</figcaption></figure></div><p>The kind of beauty that occurs in ordinary human environments &#8212; whether natural or built &#8212; has a special quality. It inspires feelings of two-way belonging: we belong to it and it belongs to us. That is, we feel that the environment somehow <em>fits</em> or <em>understands</em> us, and we also feel empowered to shape and adjust it as we need. We might call this blend of feelings <em>oneness</em>.</p><p>Earlier in this post, I tried to explain how software teams can use the fifteen properties to create systems that survive change. But I think I fell short: my dry, technical explanations don&#8217;t feel right. Adaptation is about more than mere survival. Beauty and oneness also have a role to play.</p><p>Few people will ever see the code of a typical computer program, but oneness (and its opposite, alienation) have an effect on the cost of developing software. When programmers find code alienating, they will resist working on it. When they&#8217;re forced to work on it, they adopt the mindset of &#8220;get in, make your change, and get out as fast as possible.&#8221; No one takes care of the code or tries to make it more pleasant to work with. As a result of this neglect, the code gets worse and worse until it becomes incomprehensible. Then it has to be thrown away and rewritten from scratch.</p><p>Styleguides, frameworks, and &#8220;best practices&#8221; are the tools teams often employ to keep alienation at bay. But code style goes through cycles of fashion just like everything else in pop culture. We can try to make code more fun to work with by using the style or toolkit <em>du jour</em>. But this is a temporary fix: today&#8217;s exciting new trend is doomed to become tomorrow&#8217;s alienating mess.</p><p>It <em>is</em> possible, though, to create software that has lasting beauty, because the fifteen properties transcend style. You can write code that has the fifteen properties in any language, any paradigm, and almost any framework.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3" href="#footnote-3" target="_self">3</a> If what I&#8217;ve written above is true &#8212; that the fifteen properties simply describe the character of change-adapted structure &#8212; then software that incorporates them will be truly sustainable, in both a technical and an emotional sense.</p><p>Beauty matters. Oneness matters. Sustainability matters. What I&#8217;ve tried to do, in this series of essays, is give you a glimpse of how you can create these qualities in your own work &#8212; and how you might, in fact, already be doing it.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg" width="1456" height="1092" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1092,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Detail of the wall of the West Dean Visitors' Centre, showing the brick and rough stone, curved window mullions, and the branch of an apple tree growing near the wall.&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Detail of the wall of the West Dean Visitors' Centre, showing the brick and rough stone, curved window mullions, and the branch of an apple tree growing near the wall." title="Detail of the wall of the West Dean Visitors' Centre, showing the brick and rough stone, curved window mullions, and the branch of an apple tree growing near the wall." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8873cfbd-577c-4eb9-9f9c-217249a25a39_1600x1200.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption"></figcaption></figure></div><div><hr></div><p>Thank you for sticking with me through this long series. As a reward for reading all of that, please enjoy this performance by Peter Blanchette on his 11-string archguitar :)</p><div id="youtube2-LzP5xGcKa1k" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;LzP5xGcKa1k&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/LzP5xGcKa1k?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-1" href="#footnote-anchor-1" class="footnote-number" contenteditable="false" target="_self">1</a><div class="footnote-content"><p>The stakes are lower for architects, who rarely have to answer to their buildings&#8217; inhabitants.</p></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-2" href="#footnote-anchor-2" class="footnote-number" contenteditable="false" target="_self">2</a><div class="footnote-content"><p>I mean &#8220;organize&#8221; mostly in the sense of &#8220;cluster into cohesive organs,&#8221; not &#8220;arrange logically.&#8221;</p></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-3" href="#footnote-anchor-3" class="footnote-number" contenteditable="false" target="_self">3</a><div class="footnote-content"><p>Okay, <em>some</em> frameworks. I&#8217;m not going to promise anything on behalf of frameworks; they make weird choices sometimes.</p><p></p></div></div>]]></content:encoded></item><item><title><![CDATA[The 15 Properties in Software, Part 4]]></title><description><![CDATA[Properties 12-15]]></description><link>https://bensguide.substack.com/p/the-15-properties-in-software-part-859</link><guid isPermaLink="true">https://bensguide.substack.com/p/the-15-properties-in-software-part-859</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Mon, 24 Jun 2024 12:02:29 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>Hello! I&#8217;m Ben Christel, and you&#8217;re reading Ben&#8217;s Guide to Software Development.</p><p>This newsletter is ostensibly about my book, <a href="https://benchristel.github.io/process-to-processes/">Process to Processes</a>. For the last couple of months, though, I&#8217;ve taken a detour from the book to think more deeply about how the architect-builder Christopher Alexander&#8217;s ideas apply to software development. If you missed those posts, here they are in chronological order:</p><ul><li><p><a href="https://bensguide.substack.com/p/i-am-confused">I am confused</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-christopher-alexander-post">The Christopher Alexander Post</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part">The 15 Properties in Software, Part 1</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part-d8e">The 15 Properties in Software, Part 2</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part-1da">The 15 Properties in Software, Part 3</a></p></li></ul><p>Some of you may be wondering: is all this Alexandrian stuff going to be in <a href="https://benchristel.github.io/process-to-processes/">the book</a>?</p><p>My current answer is &#8220;no, not all of it.&#8221; There will probably be a chapter on centers, but that will most likely be it. I started this series on C.A. with a simple goal: to find out if introducing the concept of centers in the book would be likely to pay off in concision and precision. I think I have my answer: it will. But now, having gotten the answer, I feel kind of obligated to finish this series before returning to book-writing. Hence, this post.</p><p>I&#8217;ve gotten positive feedback about this series, and it&#8217;s clear that many of you find C.A.&#8217;s fifteen properties of living structure as fascinating as I do. I&#8217;m not planning to include the fifteen properties in the book, though. The main reason is that I think they&#8217;re too difficult for newbies to use effectively. Instead, I&#8217;ll be writing about specific design tactics that exemplify the fifteen properties, without actually mentioning the properties themselves. A few examples of those design tactics (and the properties they exemplify):</p><ul><li><p>Code that fits in your head (<a href="https://bensguide.substack.com/i/144076033/levels-of-scale">Levels of scale</a>)</p></li><li><p>Parse, don&#8217;t validate (<a href="https://bensguide.substack.com/i/144076033/thick-boundaries">Boundaries</a>)</p></li><li><p>Anti-corruption layer (Boundaries)</p></li><li><p>Adapter (Boundaries)</p></li><li><p>Domain modeling (<a href="https://bensguide.substack.com/i/144076033/strong-centers">Strong Centers</a>)</p></li><li><p>Type-driven and test-driven design (<a href="https://bensguide.substack.com/i/144306439/positive-space">Positive Space</a>)</p></li><li><p>Objects as state-containers (Boundaries, Strong Centers)</p></li><li><p>Generalization, and separation of concerns (<a href="https://bensguide.substack.com/i/144510109/contrast">Contrast</a>)</p></li><li><p>Symmetry (<a href="https://bensguide.substack.com/i/144306439/local-symmetries">Local Symmetries</a>)</p></li><li><p>Functional pipelines (Alternating Repetition, <a href="https://bensguide.substack.com/i/144306439/good-shape">Good Shape</a>)</p></li></ul><p>It probably bears re-emphasizing that the fifteen properties are <em>not </em>metrics to optimize. They are descriptive, not prescriptive; they&#8217;re the effect, not the cause. We can&#8217;t create good software by trying to create the fifteen properties &#8212; but when we try to create good software, the properties tend to follow.</p><p>The problem with C.A.&#8217;s fifteen properties is that they are distractingly picturesque. I worry that if I included them in the book, readers would obsess over them, and they really shouldn&#8217;t. In spite of the 10,000 words I&#8217;ve written for this series, creating the fifteen properties takes about as much effort as sneezing. They are nearly always the result of resolving an irresistible urge in (what seems to an expert practitioner to be) the most obvious way.</p><p>If there&#8217;s a theme that unites properties 12&#8211;15, it&#8217;s the idea of <em>doing the most natural thing</em>. Designing maintainable, adaptable software doesn&#8217;t require extraordinary creativity, inspiration, or genius. It just requires awareness of the forces in the system, a vocabulary of design moves, and patient effort.</p><h2>12. Echoes</h2><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13697fb-80b9-4413-a314-e7e7c346f12a_1023x913.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13697fb-80b9-4413-a314-e7e7c346f12a_1023x913.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13697fb-80b9-4413-a314-e7e7c346f12a_1023x913.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13697fb-80b9-4413-a314-e7e7c346f12a_1023x913.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13697fb-80b9-4413-a314-e7e7c346f12a_1023x913.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13697fb-80b9-4413-a314-e7e7c346f12a_1023x913.jpeg" width="1023" height="913" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b13697fb-80b9-4413-a314-e7e7c346f12a_1023x913.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:913,&quot;width&quot;:1023,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Stave Church from Gol, Norway (12th &amp; 19th C.)&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Stave Church from Gol, Norway (12th &amp; 19th C.)" title="Stave Church from Gol, Norway (12th &amp; 19th C.)" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13697fb-80b9-4413-a314-e7e7c346f12a_1023x913.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13697fb-80b9-4413-a314-e7e7c346f12a_1023x913.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13697fb-80b9-4413-a314-e7e7c346f12a_1023x913.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13697fb-80b9-4413-a314-e7e7c346f12a_1023x913.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/40595948@N00/46237084264">Stave Church from Gol, Norway (12th &amp; 19th C.)</a>" by <a href="https://www.flickr.com/photos/40595948@N00">A.Davey</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/?ref=openverse">CC BY-NC-ND 2.0</a>.</figcaption></figure></div><p>There are certain ideas from computer science that show up again and again in software systems, and at many different <a href="https://bensguide.substack.com/i/144076033/levels-of-scale">levels of scale</a>. These ideas seem timeless&#8212;inseparable, perhaps, from the nature of information itself. Some examples:</p><ul><li><p>Processes &#8594; echoed in Go&#8217;s goroutines, generators in JavaScript and Python, and Ruby&#8217;s blocks.</p></li><li><p>Objects and message-passing &#8594; echoed in services and API calls.</p></li><li><p>Queues of messages and events</p></li><li><p>Actors, which are processes + objects + queues</p></li><li><p>Graphs, and especially trees</p></li><li><p>Parsing (transforming data from less structured to more structured, with a possibility of failure) and presentation (transforming the other way)</p></li><li><p>Self-stabilizing feedback systems; eventual consistency</p></li><li><p>Polling vs. notifications</p></li><li><p>Extract-Transform-Load &#8594; echoed in <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#logic-sandwich">James Shore&#8217;s </a><strong><a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#logic-sandwich">Logic Sandwich</a></strong><a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#logic-sandwich"> pattern</a> (gather input, compute, write output)</p></li></ul><p>These ideas are larger than electronic computation; their application extends to (or, more likely, is inspired by) human communication patterns.</p><ul><li><p>A company made up of many teams or departments can be modeled as a bunch of <strong>objects</strong> <strong>sending messages</strong> to each other.</p></li><li><p>The outermost <strong>feedback loop</strong> of the software development process is mediated by humans, who are ultimately the ones who must stabilize the system when things go wrong.</p></li><li><p>An ordered backlog of work items is a <strong>priority queue</strong> that communicates between the product manager and the engineering team.</p></li><li><p>&#8230;and so on.</p></li></ul><p>When you can see the echoes in different parts of the system, you have more places to get design ideas from. This makes designing easier and more joyful. As Christopher Alexander wrote,</p><blockquote><p>Often, when all the different details are members of a family, the task of making the building becomes simpler, the rhythm of making it faster, more economical. It can produce the necessary variety without trouble. If, on the other hand, the details are disparate, it is such an effort, mentally, to make the building at all, that there is less room for variation and invention. The result: in a building <em>without</em> echoes, the final adaptation of the building to its needs is often weaker.</p><p>&#8212;<em>The Phenomenon of Life</em>, p. 221</p></blockquote><p>Using an echo of an existing solution sometimes doesn&#8217;t feel very creative, and that&#8217;s fine. The general principle, in both software and buildings is: keep the broad strokes boring &#8212; trite, even &#8212; so you can focus your attention on the details that really matter to the user experience. Users aren&#8217;t there to appreciate the structure of your building or software application. They don&#8217;t care how innovative or interesting that structure is if it doesn&#8217;t improve their experience.</p><h2>13. The Void</h2><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F54a54c9a-6bae-4b1b-ac63-dccedd5b75ed_1023x683.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F54a54c9a-6bae-4b1b-ac63-dccedd5b75ed_1023x683.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F54a54c9a-6bae-4b1b-ac63-dccedd5b75ed_1023x683.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F54a54c9a-6bae-4b1b-ac63-dccedd5b75ed_1023x683.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F54a54c9a-6bae-4b1b-ac63-dccedd5b75ed_1023x683.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F54a54c9a-6bae-4b1b-ac63-dccedd5b75ed_1023x683.jpeg" width="1023" height="683" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/54a54c9a-6bae-4b1b-ac63-dccedd5b75ed_1023x683.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:683,&quot;width&quot;:1023,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Buddhist ZEN Temple Yomeiji Tsuwano JAPAN&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Buddhist ZEN Temple Yomeiji Tsuwano JAPAN" title="Buddhist ZEN Temple Yomeiji Tsuwano JAPAN" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F54a54c9a-6bae-4b1b-ac63-dccedd5b75ed_1023x683.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F54a54c9a-6bae-4b1b-ac63-dccedd5b75ed_1023x683.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F54a54c9a-6bae-4b1b-ac63-dccedd5b75ed_1023x683.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F54a54c9a-6bae-4b1b-ac63-dccedd5b75ed_1023x683.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/75212875@N02/36189546785">Buddhist ZEN Temple Yomeiji Tsuwano JAPAN</a>" by <a href="https://www.flickr.com/photos/75212875@N02">Ando.Y</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/?ref=openverse">CC BY-NC-ND 2.0</a>.</figcaption></figure></div><p>A <strong>void</strong> might seem intuitively to be the opposite of living structure &#8212; empty space is about as dead as you can get. However, the purpose of a void is not to remain void, but to create an environment where life can bloom. This happens in two ways:</p><ul><li><p>Smaller, temporary structures can fill in the void. This happens, e.g. in a town square, which might be filled at different times with people, vehicles, tables, or market stalls.</p></li><li><p>The void can form a <a href="https://bensguide.substack.com/i/144510109/contrast">contrast</a> with finer structures at its margin or in its center. The contrast intensifies the life of the whole configuration.</p></li></ul><p>Christopher Alexander said of voids that</p><blockquote><p>differentiation of minor systems almost always occurs in relation to the &#8220;quiet&#8221; of some larger and more stable system</p></blockquote><p>and so it is in programming. The most significant systems in programming are also the quietest. Operating systems and programming languages are glacial, graceful beasts. The slowness of change in these systems creates the conditions for life &#8212; i.e. software applications &#8212; by providing a stable platform on which they can grow without being constantly disrupted. Innovation can bloom when platforms change slowly, and are unopinionated, quiet, and &#8220;empty.&#8221;</p><p>A programming language or library creates a metaphorical void in another way: it defines a space of hypothetical or potential programs, and this space &#8220;wants&#8221; to be filled by living structure. For more on this idea, I recommend watching Sarah Perry&#8217;s excellent and mind-bending talk &#8220;How to See Voids.&#8221;</p><div id="youtube2-GK-EzsD3-U0" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;GK-EzsD3-U0&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/GK-EzsD3-U0?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><p>Alexander thought voids had a spiritual quality - the sacredness of the void is communicated through its utter quiet. I don&#8217;t really know how to create this quality in code &#8212; except, perhaps, through the next property, <em>simplicity and inner calm</em>.</p><h2>14. Simplicity and Inner Calm</h2><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e5e428b-385c-43f1-bec6-1cd334d7f21f_1399x748.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e5e428b-385c-43f1-bec6-1cd334d7f21f_1399x748.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e5e428b-385c-43f1-bec6-1cd334d7f21f_1399x748.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e5e428b-385c-43f1-bec6-1cd334d7f21f_1399x748.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e5e428b-385c-43f1-bec6-1cd334d7f21f_1399x748.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e5e428b-385c-43f1-bec6-1cd334d7f21f_1399x748.png" width="1399" height="748" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1e5e428b-385c-43f1-bec6-1cd334d7f21f_1399x748.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:748,&quot;width&quot;:1399,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1410437,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e5e428b-385c-43f1-bec6-1cd334d7f21f_1399x748.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e5e428b-385c-43f1-bec6-1cd334d7f21f_1399x748.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e5e428b-385c-43f1-bec6-1cd334d7f21f_1399x748.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e5e428b-385c-43f1-bec6-1cd334d7f21f_1399x748.png 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Still image from <a href="https://www.youtube.com/watch?v=cIMKJ43TFLs">&#214;zg&#252;r Baba - Dertli Dolap</a></figcaption></figure></div><p>One property that consistently marks the code of master programmers is <strong>calm</strong>.</p><p>Novices&#8217; code tends to be tortuous: full of surprises, complexities, and odd bits sticking out. Data gets transformed and then untransformed a moment later. The call graph feels like a maze. APIs aren&#8217;t orthogonal; every method call seems to have side effects that often have to be compensated for or explicitly prevented. The whole system feels feverishly, frantically busy &#8212;&nbsp;yet not much is actually accomplished.</p><p>Dysfunctional software development systems have the same frantic feeling. Constant firefighting, miscommunication, elaborate plans and Gantt charts, blame, unclear priorities, and a general miasma of despair pervade teams cobbled together by managers who don&#8217;t really have a clue how to make software development work.</p><p>Calm is the opposite. Calm is about working with unhurried efficiency, doing just what is needed and then stopping. The masters make this look easy, but it takes practice.</p><p>Whenever I think about simplicity and calm, I&#8217;m always reminded of this story from Zhuangzi:</p><blockquote><p>Ting the cook was cutting meat free from the bones of an ox for Lord Wen-hui. His hands danced as his shoulders turned with the step of his foot and bending of his knee. With a shush and a hush, the blade sang following his lead, never missing a note. Ting and his blade moved as though dancing to &#8220;The Mulberry Grove,&#8221; or as if conducting the &#8220;Ching-shou&#8221; with a full orchestra.</p><p>Lord Wen-hui exclaimed, &#8220;What a joy! It&#8217;s good, is it not, that such a simple craft can be so elevated?&#8221;</p><p>Ting laid aside his knife. &#8220;All I care about is the Way. If find it in my craft, that&#8217;s all. When I first butchered an ox, I saw nothing but ox meat. It took three years for me to see the whole ox. Now I go out to meet it with my whole spirit and don&#8217;t think only about what meets the eye. Sensing and knowing stop. The spirit goes where it will, following the natural contours, revealing large cavities, leading the blade through openings, moving onward according to actual form &#8212; yet not touching the central arteries or tendons and ligaments, much less touching bone.</p><p>&#8220;A good cook need sharpen his blade but once a year. He cuts cleanly. An awkward cook sharpens his knife every month. He chops. I&#8217;ve used this knife for nineteen years, carving thousands of oxen. Still the blade is as sharp as the first time it was lifted from the whetstone. At the joints there are spaces, and the blade has no thickness. Entering with no thickness where there is space, the blade may move freely where it will: there&#8217;s plenty of room to move. Thus, after nineteen years, my knife remains as sharp as it was that first day.</p><p>&#8220;Even so, there are always difficult places, and when I see rough going ahead, my heart offers proper respect as I pause to look deeply into it. Then I work slowly, moving my blade with increasing subtlety until &#8212; kerplop! &#8212; meat falls apart like a crumbling clod of earth. I then raise my knife and assess my work until I&#8217;m fully satisfied. Then I give my knife a good cleaning and put it carefully away.&#8221;</p><p>&#8212;Translated by Sam Hamill and J.P. Seaton (<em>The Essential Chuang Tzu,</em> 1998)</p></blockquote><p><a href="https://github.com/benchristel/benchristel.github.io/wiki/PivotalFeedbackAndGrowth">Elsewhere</a>, I wrote:</p><blockquote><p>Like the master butcher of Zhuangzi's parable, who cuts the meat where it comes apart naturally and so never blunts his knife, the engineer's goal is to see the structure of the problem as it really is, and then simply lay the pieces side by side. To an observer it seems there is almost no need to cut; no need for a knife. The problem flakes apart under the gentlest effort like perfectly cooked fish.</p></blockquote><p>Here is an example of how this applies to programming. Consider the task of parsing C-style string literals out of a file. A novice programmer might search for strings by looking for quote characters, then looking for backslashes preceding them to figure out whether they are escaped. And then looking for backslashes preceding the backslashes, to figure out whether the backslashes are escaped, in which case the quotes should actually be treated as string delimiters&#8230;</p><p>A master will probably use a regular expression like this (JavaScript):</p><pre><code>const cString = /"([^"\n\\]|\\.)*"/g</code></pre><p>This expresses the essential parts of the problem in a single (admittedly terse) line. A string consists of a double quote, zero or more &#8220;source characters,&#8221; and a closing double quote. A source character is either:</p><ul><li><p>any ASCII character except a double quote, newline, or backslash</p></li><li><p>a backslash followed by any ASCII character.</p></li></ul><p>The process that evaluates this regex is as simple as its denotation: it grabs all the string literals in one pass, looking at each character only once.</p><p>This kind of simplicity is an ideal, rarely achieved. When it is achieved I think it often goes unrecognized, because the solution seems obvious, commonplace, as natural as if it had always existed. But, recognized or not, it <em>is</em> an achievement. To find simplicity and calm is to create a part of nature &#8212; and thus to become one, for a moment, with nature itself. I can think of no higher goal in art than that.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd38c0695-7834-4126-a46d-f2cc133e5cf7_1024x672.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd38c0695-7834-4126-a46d-f2cc133e5cf7_1024x672.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd38c0695-7834-4126-a46d-f2cc133e5cf7_1024x672.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd38c0695-7834-4126-a46d-f2cc133e5cf7_1024x672.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd38c0695-7834-4126-a46d-f2cc133e5cf7_1024x672.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd38c0695-7834-4126-a46d-f2cc133e5cf7_1024x672.jpeg" width="1024" height="672" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d38c0695-7834-4126-a46d-f2cc133e5cf7_1024x672.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:672,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Shaker Village of Pleasant Hill - Harrodsburg Kentucky ~ Basket Making Room&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Shaker Village of Pleasant Hill - Harrodsburg Kentucky ~ Basket Making Room" title="Shaker Village of Pleasant Hill - Harrodsburg Kentucky ~ Basket Making Room" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd38c0695-7834-4126-a46d-f2cc133e5cf7_1024x672.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd38c0695-7834-4126-a46d-f2cc133e5cf7_1024x672.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd38c0695-7834-4126-a46d-f2cc133e5cf7_1024x672.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd38c0695-7834-4126-a46d-f2cc133e5cf7_1024x672.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/7156765@N05/21220856063">Shaker Village of Pleasant Hill - Harrodsburg Kentucky ~ Basket Making Room</a>" by <a href="https://www.flickr.com/photos/7156765@N05">Onasill ~ Bill</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/2.0/?ref=openverse">CC BY-NC-SA 2.0</a>.</figcaption></figure></div><p></p><h2>15. Not-Separateness</h2><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg" width="1024" height="741" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:741,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;One of my favourite photo's of the holiday. There is so much going on in this little cafe scene with lots of different local characters.&quot;,&quot;title&quot;:&quot;One of my favourite photo's of the holiday. There is so much going on in this little cafe scene with lots of different local characters.&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="One of my favourite photo's of the holiday. There is so much going on in this little cafe scene with lots of different local characters." title="One of my favourite photo's of the holiday. There is so much going on in this little cafe scene with lots of different local characters." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Life in a small caf&#233; in Vietnam. By <a href="https://www.flickr.com/photos/69706441@N03">PiktourUK</a>, licensed under <a href="https://creativecommons.org/licenses/by/2.0/?ref=openverse">CC BY 2.0</a>.</figcaption></figure></div><p>Programs interact with other systems, both human and digital, in the course of their development and use. Their perceived quality is largely a matter of how well they interface with those other systems.</p><p>Not-separateness &#8212; what we might call <em>good fit</em> &#8212; is the property of a system whose interfaces are precisely in tune with the environment. Not-separate systems always arise via careful, incremental adaptation. The system grows out of the environment and responds to it, addressing its needs and accommodating its quirks.</p><p>Below is a simple example of not-separateness, from GitHub&#8217;s UI. At the top of every pull request, the branch name is displayed beside a button to copy it to the clipboard.</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cece91e-395f-49a3-b550-31bc40c68340_778x94.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cece91e-395f-49a3-b550-31bc40c68340_778x94.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cece91e-395f-49a3-b550-31bc40c68340_778x94.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cece91e-395f-49a3-b550-31bc40c68340_778x94.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cece91e-395f-49a3-b550-31bc40c68340_778x94.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cece91e-395f-49a3-b550-31bc40c68340_778x94.png" width="778" height="94" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8cece91e-395f-49a3-b550-31bc40c68340_778x94.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:94,&quot;width&quot;:778,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:27149,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cece91e-395f-49a3-b550-31bc40c68340_778x94.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cece91e-395f-49a3-b550-31bc40c68340_778x94.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cece91e-395f-49a3-b550-31bc40c68340_778x94.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cece91e-395f-49a3-b550-31bc40c68340_778x94.png 1456w" sizes="100vw" loading="lazy"></picture><div></div></div></a></figure></div><p>The designers at GitHub know that users often want to copy branch names to paste into Git commands, so they make that as easy as possible. This design choice acknowledges several other centers in GitHub&#8217;s environment:</p><ul><li><p>Programmers</p></li><li><p>Terminals</p></li><li><p>Git</p></li><li><p>Branch-based development workflows</p></li></ul><p>The utility of this feature is thus deeply tied to the specific ways that programmers use both GitHub <em>and other development tools</em>. The user interface cannot be separated from the environment where it occurs.</p><p>Not-separateness isn&#8217;t just a property of GUIs, though; it also occurs in source code. Any time we write code, we&#8217;re creating the user interface that our future selves will use to understand and change the code. That interface needs not only to be comprehensible in the abstract, but to be comprehensible through the specific tools (e.g. editors and debuggers) that we actually use.</p><p>Here&#8217;s an example of how code can fit (or not fit) programmers&#8217; tools: I was once on a team writing C++. We had a coding convention that dictated that all member variables should be prefixed with an underscore, like <code>_someName</code>. I suggested that we drop this rule, since our IDEs highlighted member variables in a unique shade of purple that made them easy to spot even without a special prefix. My teammates objected: some contributors to our open-source codebase might be using editors that didn&#8217;t have that feature. The prefix was for them, not for us. What seemed like good fit to me (accommodating our code style to the capabilities of <em>our</em> tools) wasn&#8217;t a good fit in the bigger scheme of things.</p><p>The opposite of not-separateness is what we might call <em>stand-out-ness &#8212; </em>a much sought-after quality in Silicon Valley. Only something that is <em>separate</em> can be flashy and attention-grabbing. For this reason, software makers seem to favor separateness over not-separateness &#8212; they prioritize showroom appeal over actual usability. Bruce Tognazzini has <a href="https://asktog.com/atc/the-third-user/">a great write-up</a> of the many ways Apple has done this over the years, optimizing its products for <em>buyers</em> rather than long-term <em>users</em>. Many other companies are guilty of using the same tactic.</p><p>Of all the fifteen properties, then, not-separateness may be the hardest for Silicon Valley types to swallow. We want our software to stand out &#8212; not just to boost sales, but because on some level we all want, as Steve Jobs said, to &#8220;make a dent in the universe.&#8221; But what the universe needs is careful mending, not more dents. If ten thousand different people each start a world-changing revolution, the result is likely to be chaos, not utopia.</p><p>When products are deeply adapted to their context, innovation isn&#8217;t flashy or glamorous. It feels like doing the same old thing in a slightly different way. But the truth is, we never do the same thing twice in software. We are always adapting, refitting, testing out a different strategy or a different order of operations. These tiny innovations seem trivial at the moment of their conception, but over time they add up. They produce incredibly subtle, intricate designs that could never have been planned at the drawing board. And, more importantly, they produce software that users love.</p><p>By accommodating themselves to their context, not-separate programs become a kind of image of the forces in that context. Their shape is determined by users&#8217; needs and desires, not the programmer&#8217;s ego. As a result, these programs have a special quality. When you use them, they seem to <em>just work</em> the way you&#8217;d expect. They work so well, in fact, that most of the time you don&#8217;t even notice them.</p><p>But if for some reason you <em>do</em> become aware of them, if you <em>do</em> happen to look more deeply, you may be surprised to see the image of your own innermost self, like the imprint of your own thumb, staring back at you.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg" width="346" height="461.3333333333333" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1024,&quot;width&quot;:768,&quot;resizeWidth&quot;:346,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Red iPod Nano&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Red iPod Nano" title="Red iPod Nano" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F40372e0a-2038-4ac8-a06a-cad340455224_768x1024.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/26572975@N00/268673268">Red iPod Nano</a>" by <a href="https://www.flickr.com/photos/26572975@N00">Andrew*</a> is licensed under <a href="https://creativecommons.org/licenses/by-sa/2.0/?ref=openverse">CC BY-SA 2.0</a>.</figcaption></figure></div>]]></content:encoded></item><item><title><![CDATA[The 15 Properties in Software, Part 3]]></title><description><![CDATA[Properties 9-11]]></description><link>https://bensguide.substack.com/p/the-15-properties-in-software-part-1da</link><guid isPermaLink="true">https://bensguide.substack.com/p/the-15-properties-in-software-part-1da</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Tue, 14 May 2024 00:00:31 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>Why do the fifteen properties, and the feeling of life that accompanies them, show up so rarely in modern places and things? And why is software, the most modern of all media, the one venue where the fifteen properties <em>do</em> regularly appear?</p><p>Here is my guess: the fifteen properties arise in situations of extreme economy, where the design is constrained by the need to extract as much value as possible from some precious resource (e.g. materials or labor). In the modern developed world, these resources are abundant. In fact, they are so <em>hyper</em>abundant, relative to the practical demands placed on our buildings and artifacts, that we can afford to waste them. The bureaucratic and technocratic systems that create the built environment today are, accordingly, ludicrously inefficient.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13d1d5e-d49a-45e5-82da-79d27468e83d_768x1024.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13d1d5e-d49a-45e5-82da-79d27468e83d_768x1024.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13d1d5e-d49a-45e5-82da-79d27468e83d_768x1024.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13d1d5e-d49a-45e5-82da-79d27468e83d_768x1024.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13d1d5e-d49a-45e5-82da-79d27468e83d_768x1024.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13d1d5e-d49a-45e5-82da-79d27468e83d_768x1024.jpeg" width="434" height="578.6666666666666" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b13d1d5e-d49a-45e5-82da-79d27468e83d_768x1024.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1024,&quot;width&quot;:768,&quot;resizeWidth&quot;:434,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;concrete pump on building construction site&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="concrete pump on building construction site" title="concrete pump on building construction site" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13d1d5e-d49a-45e5-82da-79d27468e83d_768x1024.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13d1d5e-d49a-45e5-82da-79d27468e83d_768x1024.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13d1d5e-d49a-45e5-82da-79d27468e83d_768x1024.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb13d1d5e-d49a-45e5-82da-79d27468e83d_768x1024.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/37031529@N00/3238264011">concrete pump on building construction site</a>" by <a href="https://www.flickr.com/photos/37031529@N00">fsse8info</a> is licensed under <a href="https://creativecommons.org/licenses/by-sa/2.0/?ref=openverse">CC BY-SA 2.0</a></figcaption></figure></div><p>Note that there seems to be a paradox here: the modern economy is highly efficient at <em>distributing</em> resources. But it is not efficient at <em>using</em> resources. This isn&#8217;t actually a paradox, though; it&#8217;s exactly what you should expect in an environment of hyperabundance. The challenge, in such an environment, is not figuring out how to use resources efficiently, but figuring out how to use them <em>at all</em>.</p><p>Imagine a startup that receives an influx of investment. Previously, they were operating on a shoestring, but now they have boatloads of cash. Their constraint shifts; it&#8217;s no longer &#8220;how can we stretch our money as far as possible,&#8221; but &#8220;how can we hire fast enough and scale up fast enough to return a profit to our investors?&#8221;</p><p>The twentieth-century economy, broadly speaking, is like this startup. A massive influx of resources (in the form of cheap fossil fuel energy), coupled with a population explosion, created an environment where success and power flowed to those who could spend resources the fastest. I&#8217;d bet that this can&#8217;t, and won&#8217;t, go on forever. But at least for now, it&#8217;s the situation we&#8217;re in.</p><p>Christopher Alexander was a harsh critic of the architecture that emerged from this 20th-century milieu. But his own critics are quick to point out that the examples he gives of <em>good</em> architecture (i.e. living structure) tend to be <em>old</em>. They see living structure as a relic of a bygone era, and dismiss Alexander as hopelessly nostalgic. But the thing that stands out to me about Alexander&#8217;s examples is not their age, but their <em>efficiency</em>. One of the characteristics of the living structures that Alexander analyses is that their elements seem to resolve many forces simultaneously. Each center in the design is doing multiple things.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1" href="#footnote-1" target="_self">1</a></p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg" width="1200" height="422.28739002932554" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:360,&quot;width&quot;:1023,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Dales Field Walls&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="Dales Field Walls" title="Dales Field Walls" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 1456w" sizes="100vw"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/8185633@N07/3724578703">Dales Field Walls</a>" by <a href="https://www.flickr.com/photos/8185633@N07">tj.blackwell</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc/2.0/?ref=openverse">CC BY-NC 2.0</a>.</figcaption></figure></div><p>Here is a simple example of a living building process: a farmer in England clears the stones from their field, and builds a wall with them, to keep their sheep in. They don&#8217;t throw the field-stones away and then buy wall-building materials from somewhere else. They work with what&#8217;s on site. The building process is a simple matter of reshaping the material that is already present: moving stones from a place where they are harming the system to a place where they can help it.</p><p>Contrast this straightforward process with the way construction typically works in today&#8217;s globalized economy. Resource extraction, design, and construction are separate and abstracted from each other. Materials and fuel might travel halfway around the globe before arriving at a construction site. Huge projects are funded by investors who have never even visited the area where the construction is to take place. And when modern buildings are torn down (as they inevitably are, mere decades after being built) their materials go to landfill. These processes generate enormous wealth. <em>But they are also enormously inefficient in their use of materials and labor</em>. They only make sense in an environment of hyperabundance.</p><p>Why has the hyperabundance of the modern economy affected the software industry less than the construction industry? Why do ideas like <strong>cross-functional teams</strong>, <strong>continuous improvement</strong>, <strong>feedback loops</strong>, and <strong>craft</strong> remain relevant to us? I think there are a few reasons. But first, I think it&#8217;s worth pointing out that computing resources (CPU, memory, disk space, network bandwidth) <em>are</em> hyperabundant, and we are, as you might expect, wasting them profligately. Various commentators have criticized the software industry for this waste. <a href="https://www.youtube.com/@MollyRocket">Casey Muratori</a>, for one, <a href="https://www.youtube.com/watch?v=tD5NrevFtbU">loves to rag on programmers for wasting CPU cycles</a>.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2" href="#footnote-2" target="_self">2</a> He&#8217;s not wrong (about the waste) but what he doesn&#8217;t acknowledge is that CPU time usually isn&#8217;t the limiting factor on software&#8217;s success. In our current economic environment, wealth will generally accrue to those who can waste more CPU than their competitors.</p><p>So, what are the inputs to software development that <em>aren&#8217;t</em> hyperabundant? In other words, what are the constraints we&#8217;re optimizing for when we do things that create the fifteen properties?</p><p>In my experience, the constraints tend to be:</p><ul><li><p>How quickly a programmer can figure out how the software works and how to change it</p></li><li><p>How many programmers you can hire</p></li><li><p>How efficiently you can distribute work among those programmers.</p></li></ul><p>These constraints come, respectively, from three more fundamental ones:</p><ul><li><p>The working memory and processing ability of a human brain</p></li><li><p>The supply of programmers in the world</p></li><li><p><a href="https://en.wikipedia.org/wiki/Amdahl%27s_law">Amdahl&#8217;s Law</a>, which says that as you parallelize a task among more and more workers, the total time taken approaches the time required for coordination.</p></li></ul><p>These constraints aren&#8217;t likely to go away anytime soon.</p><p>I believe that Alexander&#8217;s fifteen properties are relevant for software developers because they allow us to operate efficiently within these constraints. They help us conserve our cognitive resources, and they allow multiple teams to work on the software in parallel. Exactly <em>why </em>and <em>how</em> they work is a bit of a mystery, though. That&#8217;s the mystery I&#8217;m trying to solve in this series of posts.</p><h2>9. Contrast</h2><p>In a poorly-structured codebase, all the code has a similar texture. Everywhere you look, it&#8217;s approximately the same: a mishmash of different stuff. A bit of SQL, a bit of calculation, a sprinkling of HTML. Every function seems to operate on a mixture of domain concepts and language-level primitives.</p><p>When concerns are separated, on the other hand, there is contrast between the parts. The UI code looks very different from the database access code. When you open a file, you can tell at a glance what type of thing it is, and know where it fits in the architecture.</p><p><a href="https://github.com/benchristel/benchristel.github.io/wiki/SandiMetz">Sandi Metz</a> has a technique she calls the <strong><a href="https://www.youtube.com/watch?v=8bZh5LMaSmE&amp;t=3m43s">squint test</a></strong>: you lean back and squint at the code, looking for changes in shape and changes in color. The more coherence and consistency you see in each part, the better the code is.</p><blockquote><p>For functional and cognitive clarity, contrast is [...] practically necessary: the shop in the neighborhood is different from the houses next to it. [... Contrast] allows each center to take its proper nature. It permits more intensive attention to individual functions. And it creates a feeling of distinction which relaxes people, because it acknowledges and permits different dimensions of experience.</p><p>Contrast is the thing which creates differentiation, and allows differentiation. It is the differentiation of the void which gives birth to matter. All differentiation requires that contrast is created in space, in order to give birth to anything at all.</p><p>&#8212;<em>The Phenomenon of Life</em>, p. 203</p></blockquote><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg" width="1023" height="360" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;normal&quot;,&quot;height&quot;:360,&quot;width&quot;:1023,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Dales Field Walls&quot;,&quot;title&quot;:&quot;Dales Field Walls&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Dales Field Walls" title="Dales Field Walls" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8394f48-b9e2-43ca-b3d5-b414c9e7a1a2.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/8185633@N07/3724578703">Dales Field Walls</a>" by <a href="https://www.flickr.com/photos/8185633@N07">tj.blackwell</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc/2.0/?ref=openverse">CC BY-NC 2.0</a>.</figcaption></figure></div><p>Increasing contrast, whether in code or in the built environment, is ultimately a matter of reducing entropy. Consider the contrast between the green pastures and the stone walls in the photograph above. This contrast was created by a gradual process of entropy reduction: farmers moved scattered stones out of the way and piled them up into walls.</p><p>There is something very simple and natural about these ancient stone walls, and indeed we tend to think of the landscape they create as part of nature. But as Christopher Alexander points out, this landscape is <em>not</em> &#8220;natural&#8221; in the sense of being wild and undisturbed, because of course all of it was made by people. The whole of southern England is one continuous manmade structure covering thousands of square miles, which was built, gradually, over thousands of years. Every part of it is adapted to human needs.</p><p>It is remarkable that the contrast between walls and pastures enhances, rather than detracts from, our feeling of naturalness, because we can easily imagine many other contrasting structures that would have the opposite effect &#8212; e.g. a glass-and-concrete office building. <strong>Contrast</strong>, of all the fifteen properties, is perhaps the one we have to be most careful with, because it can hurt as easily as it can help. The trick to creating contrast is to do it in a way that has the same natural grace as the walls and roads and fields and forests of the English countryside. You have to be &#8220;more natural than nature itself,&#8221; to borrow a phrase from Alan Watts. The way to do this, I think, is simply to avoid grandiose ambitions. You want to reduce entropy incrementally, and only as far as it helps. Remember that the overall goal is to improve efficiency, so you should increase contrast only if the effort it will save in the future is worth the effort you put in now. It is this global efficiency, I think, that creates the feeling of life in the whole.</p><p>Contrast applies to team structure as well as code. At Pivotal Labs, each project was undertaken by what we called a <strong>balanced team</strong> &#8212; a cross-functional group of people that consisted (usually) of a product manager, a designer, and several engineers. The division of responsibilities among these roles was clear and crisp:</p><ul><li><p>PMs were responsible for balancing stakeholder needs and prioritizing work.</p></li><li><p>Designers were responsible for UI and UX.</p></li><li><p>Engineers were responsible for the internal structure of the software, and for providing relative cost estimates for programming work.</p></li></ul><p>Anyone could weigh in on someone else&#8217;s area of responsibility, but the responsible party always had the final say. This clear <strong>contrast</strong> between the roles meant that a team could generally negotiate its way to a plan fairly quickly and painlessly &#8212; perhaps with some grumbling, but no lasting resentment &#8212; because we all knew the rules by which we&#8217;d agreed to play.</p><h2>10. Gradients</h2><p><em>Adaptation</em> is a recurring theme throughout this series. We feel comfortable, and we feel that our surroundings are natural, when centers are adapted to their context.</p><p>The forces that shape centers vary continuously throughout space. As a result, when a structure is made of many similar centers, the centers will generally not be exactly the same. Each one will be slightly different as it adapts to the unique combination of forces in its particular location. The result will be a gradient of shapes, which reflects the gradient of forces in the environment.</p><p>When you look at the methods of a class or the functions in a module, you often see a gradient from public/primary to private/secondary. Similarly, when you read the tests for a module, you see a gradient from error cases to edge cases to central cases. These gradients exist because of another gradient: human attention, as a function of the position of the scrollbar. We tend to start reading at the top of the file and scan downward. If we can't find what we're looking for, our attention is likely to drift. Good code acknowledges this by putting the stuff people look for at the top.</p><blockquote><p>Gradients will follow as the natural response to any changing circumstance in space, as <a href="https://github.com/benchristel/benchristel.github.io/wiki/Center">center</a>s become adapted correctly to the changes which move across space.</p><p>&#8212;<em>The Phenomenon of Life</em> p. 206</p></blockquote><p>Gradients of activity occur over the life of a software project.  At the beginning of a project, much of the work is user research, UX design, and planning. As development ramps up, design gradually ramps down. Eventually, the project becomes less exploratory, and settles down into a rhythm of feature development. Finally, as the software product matures, the pace of development cools further, and the codebase stabilizes. These gradients form naturally when we respond to the forces on the project in the simplest way possible: by doing the most valuable thing at every moment.</p><h2>11. Roughness</h2><p>Every living system has a certain looseness of form, a relaxed and casual <strong>roughness</strong>. This roughness comes about not because the system is sloppily made, but because it is precisely adapted to the complex system of forces in its environment. By contrast, rigid, geometrically perfect forms tend to feel dead and sterile, because they are not adapted to the real forces around them. Their shape is imposed from outside, based on artificial images of how things &#8220;should&#8221; be, and not on reality.</p><p>Roughness is everywhere in software systems. It is perhaps the second most fundamental property of good software, after <strong>levels of scale</strong>.</p><p>For example, roughness occurs at the semantic level when we choose an &#8220;incorrect&#8221; solution for its performance or simplicity. As Linus Torvalds pointed out,</p><blockquote><p>&#8220;pi = 3.14&#8221; is (a) infinitely faster than the &#8220;correct&#8221; answer and (b) the difference between the &#8220;correct&#8221; and the &#8220;wrong&#8221; answer is meaningless.</p></blockquote><p>Approximations and heuristics are often perfectly acceptable, and can be preferable to &#8220;correct&#8221; solutions because they are cheaper either in computing resources or programmer time.</p><p>Roughness often involves relaxing artificial rules and constraints to get a globally better result. I love test-driven development and algebraic types, but there are times when it&#8217;s just too hard to write precise tests or types for something, so sometimes I let things be a little unsafe to avoid contorting the code.</p><p>Roughness occurs at a syntactic level too: it&#8217;s often better to relax line-length constraints than to format similar chunks of code inconsistently. Some code formatting tools (I&#8217;m looking at you, <a href="https://prettier.io/">Prettier</a>) are not able to take context into account when deciding whether and where to break lines, which leads to awkwardnesses like this:</p><pre><code>const users = [
  {
    userId: 1,
    username: "Alfie Carmelita",
  },
  { userId: 2, username: "Gina Roshan" },
  { userId: 3, username: "Shug Nabu" },
  {
    userId: 4,
    username: "Rahman Fraser",
  },
  { userId: 5, username: "Toshe Lyuben" },
  {
    userId: 6,
    username: "Sergio Nilofar",
  },
];</code></pre><p>(source: Anthony Fu, <a href="https://antfu.me/posts/why-not-prettier">https://antfu.me/posts/why-not-prettier</a>)</p><p>This example would almost certainly be more readable if each of the user records were on one line:</p><pre><code><code>const users = [
  { userId: 1, username: "Alfie Carmelita" },
  { userId: 2, username: "Gina Roshan" },
  { userId: 3, username: "Shug Nabu" },
  { userId: 4, username: "Rahman Fraser" },
  { userId: 5, username: "Toshe Lyuben" },
  { userId: 6, username: "Sergio Nilofar" },
];</code></code></pre><p>Locally-consistent, <strong>symmetry</strong>-enhancing formatting matters more for readability than the global consistency of line length. Yet Prettier enforces the latter at the expense of the former, because that's easier.</p><p>Note that this example is at odds with our everyday sense of &#8220;roughness.&#8221; The rigid yet inconsistent formatting enforced by Prettier looks &#8220;rough&#8221; to us, while the example I&#8217;ve called &#8220;rough&#8221; looks regular. But there is no contradiction. In fact,<em> this is the whole point of Alexander&#8217;s concept of roughness</em>. Something that seems rough to a machine, because it defies the simplistic rules by which that machine operates, can feel simple and natural to us. Roughness arises in its purest form when every center is shaped only by the forces that really matter.</p><p>The psychological effect of this subtle kind of roughness is that one perceives the program as down-to-earth, humble, handmade, human-scaled. Roughness in an object touches the heart, because it shows that the maker was free &#8212; free to do the work in the most aware and effective way, constrained only by what really mattered in that situation.</p><blockquote><p>In our time, many of us have been taught to strive for an insane perfection that means nothing. To get wholeness, you must try instead to strive for this kind of perfection, where things that don&#8217;t matter are left rough and unimportant, and the things that really matter are given deep attention. This is a perfection that seems imperfect. But it is a far deeper thing.</p><p>&#8212;Christopher Alexander</p></blockquote><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg" width="548" height="366.5511111111111" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:602,&quot;width&quot;:900,&quot;resizeWidth&quot;:548,&quot;bytes&quot;:262515,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F332f01bc-a667-45f0-b163-193228399b9d_900x602.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">A wall of the House of Tiles (<em>Casa de los Azulejos</em>), Mexico City</figcaption></figure></div><p></p><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-1" href="#footnote-anchor-1" class="footnote-number" contenteditable="false" target="_self">1</a><div class="footnote-content"><p>This reminds me of a proverb about the game of <a href="https://en.wikipedia.org/wiki/Go_(game)">Go</a>, which says that every move you make should be doing two (or more) things at once. It also reminds me of Kent Beck&#8217;s principle of <strong>mutual benefit</strong>, from <em>Extreme Programming Explained</em>.</p></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-2" href="#footnote-anchor-2" class="footnote-number" contenteditable="false" target="_self">2</a><div class="footnote-content"><p>Even though Casey criticizes &#8220;clean code,&#8221; it&#8217;s worth noting that his code (exemplified in the linked video) has the Alexandrian properties, including <strong>levels of scale</strong> and <strong>symmetry</strong>, and that his overall development practice is <em>deeply</em> adaptive, incremental, and empirical. The 15 properties are not just about clean code or readability &#8212; they are about efficiency in the broadest sense.</p><p></p></div></div>]]></content:encoded></item><item><title><![CDATA[The 15 Properties in Software, Part 2]]></title><description><![CDATA[Properties 5-8]]></description><link>https://bensguide.substack.com/p/the-15-properties-in-software-part-d8e</link><guid isPermaLink="true">https://bensguide.substack.com/p/the-15-properties-in-software-part-d8e</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Wed, 08 May 2024 00:29:40 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>This post is the third in a series about the philosophy of the architect-builder Christopher Alexander. If you missed the first two posts, you can find them here:</p><ul><li><p><a href="https://bensguide.substack.com/p/the-christopher-alexander-post">The Christopher Alexander Post</a></p></li><li><p><a href="https://bensguide.substack.com/p/the-15-properties-in-software-part">The 15 Properties in Software, Part 1</a></p></li></ul><p>In the previous post, we began an investigation of how Alexander&#8217;s <strong>fifteen properties of living structure</strong> apply to software development. This post continues that thread.</p><p>Recall that these 15 properties are derived from Christopher Alexander&#8217;s study of structures that have the quality he called <strong>life</strong>. This lifelike quality connects to biological life in at least three ways:</p><ul><li><p>Its structure bears a mathematical resemblance to that of biological life: e.g. it is fractal (see <strong>levels of scale</strong> in the previous post) and replete with <strong>local symmetries</strong>.</p></li><li><p>It makes us feel more &#8220;alive&#8221; in its presence: that is, more comfortable, more free to be truly ourselves, and more aware that by being ourselves we are connecting with something eternal that is shared by all humanity.</p></li><li><p>It correlates with structures that <em>work well</em> &#8212; structures that are stable, self-maintaining, and able to grow and evolve. This last point is the strangest, the hardest to grapple with rationally, and possibly the most contentious. It is also the one I find most interesting for the purposes of software development.</p></li></ul><p>If we can reach this quality in software systems &#8212; if we can make software that is &#8220;alive&#8221; in this sense &#8212; then we will have made something really worthwhile: software that fits us, that can grow with us, and that makes us feel at home.</p><p>This is not a hypothetical: the quality of life in software <em>has</em> been reached, probably thousands of times, in the last few decades. The problem is that most of the systems that had it are no longer part of our daily lives. Either they are gone forever, or else (at best) they are museum pieces.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02b3803b-2ad1-423c-bf25-d78ec238c843_400x400.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02b3803b-2ad1-423c-bf25-d78ec238c843_400x400.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02b3803b-2ad1-423c-bf25-d78ec238c843_400x400.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02b3803b-2ad1-423c-bf25-d78ec238c843_400x400.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02b3803b-2ad1-423c-bf25-d78ec238c843_400x400.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02b3803b-2ad1-423c-bf25-d78ec238c843_400x400.png" width="400" height="400" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/02b3803b-2ad1-423c-bf25-d78ec238c843_400x400.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:400,&quot;width&quot;:400,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;ipod nano 2nd gen&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="ipod nano 2nd gen" title="ipod nano 2nd gen" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02b3803b-2ad1-423c-bf25-d78ec238c843_400x400.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02b3803b-2ad1-423c-bf25-d78ec238c843_400x400.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02b3803b-2ad1-423c-bf25-d78ec238c843_400x400.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02b3803b-2ad1-423c-bf25-d78ec238c843_400x400.png 1456w" sizes="100vw" fetchpriority="high"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Self in hardware: the iPod Nano (2nd generation).</figcaption></figure></div><p>The problem with good software is that it fits us so well, its quality is unnoticeable. We rarely think of it, or realize how much it&#8217;s doing for us, until it is gone. As Zhuangzi said, a comfortable belt is one you forget you&#8217;re wearing.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1" href="#footnote-1" target="_self">1</a></p><p>As humanity exits the railgun of progress that was the twentieth century, one of our many challenges will be to create economic systems that allow us to let things be, when we don&#8217;t yet know how to improve them further. Maybe I&#8217;ll write more about this in future posts. At present, I don&#8217;t really have any concrete suggestions.</p><p>Okay, I think that&#8217;s enough tangential musing for now. Here is the muse you were promised:</p><h2>5. Positive Space</h2><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F057e01a9-badb-4275-9dbd-a772f0a6b389_800x1048.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F057e01a9-badb-4275-9dbd-a772f0a6b389_800x1048.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F057e01a9-badb-4275-9dbd-a772f0a6b389_800x1048.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F057e01a9-badb-4275-9dbd-a772f0a6b389_800x1048.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F057e01a9-badb-4275-9dbd-a772f0a6b389_800x1048.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F057e01a9-badb-4275-9dbd-a772f0a6b389_800x1048.png" width="258" height="337.98" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/057e01a9-badb-4275-9dbd-a772f0a6b389_800x1048.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1048,&quot;width&quot;:800,&quot;resizeWidth&quot;:258,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;undefined&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="undefined" title="undefined" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F057e01a9-badb-4275-9dbd-a772f0a6b389_800x1048.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F057e01a9-badb-4275-9dbd-a772f0a6b389_800x1048.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F057e01a9-badb-4275-9dbd-a772f0a6b389_800x1048.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F057e01a9-badb-4275-9dbd-a772f0a6b389_800x1048.png 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://commons.wikimedia.org/w/index.php?curid=117963274">Rubin's Vase</a>" by <a href="https://commons.wikimedia.org/w/index.php?title=User:Anonymousracoon123&amp;action=edit&amp;redlink=1">Anonymousracoon123</a> is licensed under <a href="https://creativecommons.org/licenses/by-sa/4.0/?ref=openverse">CC BY-SA 4.0</a>.</figcaption></figure></div><p>Neighboring centers help each other come to life when they are shaped so each one is <em>positive</em>&#8212;relatively simple, convex, and locally symmetrical. Positive centers are easy to perceive as foreground figures. They aren&#8217;t mere leftover scraps. They have presence; they feel coherent and purposeful. In order for positive space to be present, even the &#8220;background&#8221; of a design must be positive.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F868fa3b6-75f3-416b-bb2b-697b9400b177_887x1200.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F868fa3b6-75f3-416b-bb2b-697b9400b177_887x1200.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F868fa3b6-75f3-416b-bb2b-697b9400b177_887x1200.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F868fa3b6-75f3-416b-bb2b-697b9400b177_887x1200.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F868fa3b6-75f3-416b-bb2b-697b9400b177_887x1200.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F868fa3b6-75f3-416b-bb2b-697b9400b177_887x1200.jpeg" width="394" height="533.032694475761" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/868fa3b6-75f3-416b-bb2b-697b9400b177_887x1200.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1200,&quot;width&quot;:887,&quot;resizeWidth&quot;:394,&quot;bytes&quot;:361464,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F868fa3b6-75f3-416b-bb2b-697b9400b177_887x1200.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F868fa3b6-75f3-416b-bb2b-697b9400b177_887x1200.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F868fa3b6-75f3-416b-bb2b-697b9400b177_887x1200.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F868fa3b6-75f3-416b-bb2b-697b9400b177_887x1200.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Positive shape (highlighted in yellow) in the ground of a Turkish carpet. The &#8220;foreground&#8221; and &#8220;background&#8221; shapes are unified: they are one single design.</figcaption></figure></div><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2bbde985-17a4-4abc-8407-147ee9ec0221_887x1200.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2bbde985-17a4-4abc-8407-147ee9ec0221_887x1200.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2bbde985-17a4-4abc-8407-147ee9ec0221_887x1200.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2bbde985-17a4-4abc-8407-147ee9ec0221_887x1200.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2bbde985-17a4-4abc-8407-147ee9ec0221_887x1200.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2bbde985-17a4-4abc-8407-147ee9ec0221_887x1200.jpeg" width="310" height="419.39120631341603" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2bbde985-17a4-4abc-8407-147ee9ec0221_887x1200.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1200,&quot;width&quot;:887,&quot;resizeWidth&quot;:310,&quot;bytes&quot;:223583,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2bbde985-17a4-4abc-8407-147ee9ec0221_887x1200.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2bbde985-17a4-4abc-8407-147ee9ec0221_887x1200.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2bbde985-17a4-4abc-8407-147ee9ec0221_887x1200.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2bbde985-17a4-4abc-8407-147ee9ec0221_887x1200.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">The original carpet image, with no highlighting. Can you see the positive space in every part?</figcaption></figure></div><p>What does it mean for code to evince this property? Recall that the major centers in code are tokens, statements, blocks, functions, objects, and modules. A center in code is positive when it is coherent within itself, uncomplicated by outside concerns nosing in. Functions, methods, classes are inward-looking. Parameter names, function names, and comments don't refer to the functions' callers. It becomes easier to understand each center when it is coherent, centered in itself, even though it is related to and supported by many other centers.</p><p>Positively shaped code is neighborly. It takes its shape while allowing its neighbors to take theirs.</p><p>Here&#8217;s a simple example: a <a href="https://github.com/benchristel/mdsite/blob/bcb173509b0813d69a4fe65c28df7b9cef4172ff/src/lib/strings.ts">removePrefix</a> function, from my book-compiler <code>mdsite</code>. You can probably understand what this code does, and perhaps imagine using it in your own software, without knowing anything about the program it&#8217;s from.</p><pre><code>export function removePrefix(s: string, prefix: string): string {
  if (s.startsWith(prefix)) {
    return s.slice(prefix.length);
  } else {
    return s;
  }
}</code></pre><blockquote><p>In all these cases, the positiveness of the space &#8212; what we might also call the convexity and compactness of the centers which form &#8212; is the outward manifestation of internal coherence in the physical system.</p><p>&#8212;Christopher Alexander, <em>The Phenomenon of Life</em>, p. 262</p></blockquote><p>Positive shape is related to the balanced abstraction principle, which says that each center in code should be written at a consistent level of abstraction. For example, code that reads and writes files should just know about files; it shouldn&#8217;t also know about application-specific details like what data is in those files. Conversely, code that deals with concepts in the application domain shouldn&#8217;t know about details of infrastructure like files, HTTP requests, or databases. Mixing levels of abstraction compromises positive shape, making code harder to understand and modify. You have to read more and can reuse less.</p><p>Positive shape has a pleasant symbiosis with unit testing. Because positively-shaped centers are easy to conceptualize and reason about in isolation, they are easy to test, and it is easy to see that the tests specify the right behavior. You can compose positively-shaped centers and have confidence that the whole will do what you expect, even without comprehensive integration tests.</p><p>Positively-shaped code often feels like it could be part of the language or the standard library. It &#8220;brings the language up to meet the problem,&#8221; abstracting away the nitty-gritty details and distilling the code to its essence. Positive shapes intensify precision and clarity.</p><p>Good abstractions are positive in this way. As Dijkstra put it:</p><blockquote><p>The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise.</p><p>&#8212;Edsger Dijkstra</p></blockquote><p>Katrina Owen gives a good example of what code looks like when it is <em>not</em> positively shaped, in &#8220;<a href="https://www.sitepoint.com/whats-in-a-name-anti-patterns-to-a-hard-problem/">What&#8217;s in a Name: Anti-patterns to a Hard Problem</a>.&#8221; She calls this specific antipattern an <em>idea fragment</em>.</p><pre><code># Bad code; negative shape
def prev_or_next_day(date, date_type)
  date_type == :last ? date.prev_day : date.next_day
end</code></pre><p>This Ruby method comes from a meetup-scheduling app. Dissociated from its context, it makes little sense. It&#8217;s unlikely to help you chunk the larger program into brain-sized pieces. You basically have to memorize its implementation and recall it whenever you see the name <code>prev_or_next_day</code>.</p><p>Most negatively-shaped code is like this. It seems to have tendrils of other ideas creeping into it. There&#8217;s no way to remove it from its context, either mentally or actually, because it&#8217;s too tightly bound to the idiosyncratic needs of its callers. And the code that calls negatively-shaped code is damaged as well: because the negatively-shaped dependencies aren&#8217;t coherent abstractions, you have to understand their internals before you can make sense of the calling code.</p><p>Positive space, then, is the property that appears in code when we can reason about each part in isolation.</p><h2>6. Good Shape</h2><p>Christopher Alexander&#8217;s concept of <strong>good shape</strong> is confusingly similar to <strong>positive space</strong>. Even he has trouble defining it:</p><blockquote><p>When I began looking for living structures, I was surprised to find out how often, mixed with other properties, there was an element that seemed to defy analysis: the works contained elements with the most gorgeous, beautiful, powerful shapes. Sometimes this beauty of shape seemed subtle, complex, beyond analysis. I became aware of a special quality that I began to think of as <em>good shape</em>, but could not very easily explain it, or define it.</p><p>&#8212; <em>The Phenomenon of Life</em>, p. 179</p></blockquote><p>He analyses the concept thus:</p><blockquote><p>It is easiest to understand good shape as a recursive rule. The recursive rule says that the elements of any good shape are always good shapes themselves. [...] In addition, we note that the simplest and most elementary good shapes are made from elementary figures.</p></blockquote><p>Have you ever seen code that had this feeling? Code that was simple, elegant, powerful, self-evident &#8212; and yet, on close inspection, seemed to be made out of almost nothing?</p><p>Here is an example of the kind of code that impresses me with its good shape:</p><pre><code>const actors = take(movies)
  .and(flatMap(get("castMembers")))
  .and(deduplicate)
  .and(sort(descending(by(get("name")))))
  .result</code></pre><p>This bit of JavaScript is made of eight independent functions, the most complicated of which can be written in five lines. Each function has an intense focus that gives it good shape. The whole thing has good shape because &#8212; well, just look at it. You can tell exactly what it&#8217;s doing. I don&#8217;t even need to describe it. The fact that these simple functions can be composed in such an intricate way, and that the whole thing works exactly as you would expect, is marvelous.</p><blockquote><p>You can call it beautiful code when the code makes it look like the language was made for the problem.</p><p>&#8212;Ward Cunningham</p></blockquote><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/subscribe?"><span>Subscribe now</span></a></p><p>Bonus example: watch Brian Kernighan write a spell-checker in one line of shell (demo starting ~5 minutes in):</p><div id="youtube2-tc4ROCJYbm0" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;tc4ROCJYbm0&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/tc4ROCJYbm0?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><p></p><h2>7. Local Symmetries</h2><p>Christopher Alexander&#8217;s principle of symmetry echoes the empirical principle that we should assume the world is uniform until we have evidence of nonuniformity.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2" href="#footnote-2" target="_self">2</a> Alexander sees symmetry as the application of this principle to design: symmetrical shapes are simpler than asymmetrical ones (bilateral symmetry trivially gives you 50% compressibility) so symmetry must be the default.</p><blockquote><p>Complexity (in the bad sense) consists of distinctions which unnecessarily complicate a structure. To get simplicity, on the other hand, we need a process which questions every distinction. Any distinction which is not necessary is removed. To remove a distinction we replace it by a symmetry.</p><p>[. . .] There is an intimate and fundamental connection between arbitrariness, necessity, and symmetry, which says, in a nutshell, this. <em>Everything in nature is symmetrical unless there is a reason for it not to be.</em> When this law is violated, we feel that something is unnatural, and that is the way in which symmetry plays such a fundamental role.</p><p>&#8212;<em>The Process of Creating Life, p. 469</em></p></blockquote><p>Alexander was not, however, particularly fond of the global bilateral symmetry that characterizes classical architecture. His experience was that differences in the site, or in the purpose of each wing of the building, tended to motivate asymmetry at larger scales. So instead, he emphasized <em>local</em> symmetry. Each smaller-scale center can be symmetrical, even if the whole building is not.</p><p>If there&#8217;s an equivalent of bilateral symmetry in code, it&#8217;s probably most apparent in if-else statements. Consider the following:</p><pre><code>// Example 1:
function foo() {
  if (someCondition) {
    return "a"
  }
  return "b"
}

// Example 2:
function foo() {
  if (someCondition) {
    return "a"
  } else {
    return "b"
  }
}</code></pre><p>The addition of the <code>else</code> in Example 2 doesn't impact the meaning of the program, but it does enhance its symmetry. This symmetry lets us read the code breadth-first, outside-in. If we collapse the blocks in both examples, we see:</p><pre><code>// Example 1:
function foo() {
  if (someCondition) { ... }
  return "b"
}

// Example 2:
function foo() {
  if (someCondition) { ... }
  else { ... }
}</code></pre><p>Only in the symmetrical Example 2 is it clear that the two branches are mutually exclusive.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3" href="#footnote-3" target="_self">3</a></p><p>In Go, we sometimes see the following pattern, which shuns even the asymmetry of the <code>else</code> keyword, and makes <code>false</code> as primary as <code>true</code>:</p><pre><code>switch someCondition {
  case true:  return "a"
  case false: return "b"
}</code></pre><p>&#8230;and that&#8217;s about as close as we ever get to bilateral symmetry in programming. More frequently, we see translational symmetry, where a template-like structure is repeated several times. Here is some Ruby that downloads a code repository given a URL:</p><pre><code>downloader =
  case URI(url).scheme
  when "https"
    HttpsDownloader
  when "ftp"
    FtpDownloader
  when "git"
    GitDownloader
  else
    raise ArgumentError.new("Unsupported protocol in URL: '#{url}'")
  end

downloader.download(url)
</code></pre><p>The repeating template here is:</p><pre><code>when "value"
  DownloaderClass</code></pre><p>The repeating structure makes it easy to see which class each string corresponds to. It&#8217;s also easy to imagine extending this code with a new type of downloader.</p><p>To drive the point home, here is some asymmetrical code that does the same thing:</p><pre><code># Bad code; no symmetry
if https_url?(url) || url.start_with?("ftp://")
  Downloader.get(url)
elsif git_ssh_url?(url)
  Git.clone(url)
end</code></pre><p>Here, we have a <code>Downloader</code> module that&#8217;s responsible for two different kinds of URLs, and a <code>Git</code> module that&#8217;s responsible for the other kind. Also, the way we check for an FTP URL is different from the way we check for HTTPS and git URLs. These superficial differences obscure the underlying similarities between all the types of downloads.</p><p>Asymmetry makes code harder to read. It hides regularities of behavior within irregular structures. Symmetry, on the other hand, makes similar things look similar, so the important differences stand out.</p><p>The overall principle is this: similar or analogous behaviors should be encoded as similar / analogous structures. When there is nothing motivating the structures to be different, we should let them be the same. And more than that: when faced with complexity, we should try to unearth whatever symmetries we can. Bringing symmetry to light, and polishing it until it shines, is how we make the meaning of code luminously apparent.</p><h2>8. Deep Interlock and Ambiguity</h2><p>Alexander observed that adjacent centers often &#8220;hook into&#8221; one another where they meet &#8212; forming a type of <strong>thick boundary (</strong>see the previous post<strong>)</strong>. For example, a city plaza might have arcades along its edges. These arcades form part of the public space of the plaza, but they are also a kind of outdoor room or passageway for the building to which they connect. The two centers, the building and the square, blend and interpenetrate in the boundary region formed by the arcade.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7602101-3b1c-43c2-b865-680a50052f00_1024x679.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7602101-3b1c-43c2-b865-680a50052f00_1024x679.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7602101-3b1c-43c2-b865-680a50052f00_1024x679.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7602101-3b1c-43c2-b865-680a50052f00_1024x679.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7602101-3b1c-43c2-b865-680a50052f00_1024x679.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7602101-3b1c-43c2-b865-680a50052f00_1024x679.jpeg" width="474" height="314.302734375" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f7602101-3b1c-43c2-b865-680a50052f00_1024x679.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:679,&quot;width&quot;:1024,&quot;resizeWidth&quot;:474,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Plaza Mayor de Madrid (Spain), HDR&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Plaza Mayor de Madrid (Spain), HDR" title="Plaza Mayor de Madrid (Spain), HDR" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7602101-3b1c-43c2-b865-680a50052f00_1024x679.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7602101-3b1c-43c2-b865-680a50052f00_1024x679.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7602101-3b1c-43c2-b865-680a50052f00_1024x679.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7602101-3b1c-43c2-b865-680a50052f00_1024x679.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/30982194@N05/5476777806">Plaza Mayor de Madrid (Spain), HDR</a>" by <a href="https://www.flickr.com/photos/30982194@N05">marcp_dmoz</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/2.0/?ref=openverse">CC BY-NC-SA 2.0</a>.</figcaption></figure></div><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg" width="1024" height="697" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:697,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;PLAZA MAYOR, MADRID DE LOS AUSTRIAS 8648 4-1-2019&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="PLAZA MAYOR, MADRID DE LOS AUSTRIAS 8648 4-1-2019" title="PLAZA MAYOR, MADRID DE LOS AUSTRIAS 8648 4-1-2019" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F281009b6-c672-4544-add5-bf28fac5933f_1024x697.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/30996501@N07/32820994968">PLAZA MAYOR, MADRID DE LOS AUSTRIAS 8648 4-1-2019</a>" by <a href="https://www.flickr.com/photos/30996501@N07">Jose Javier Martin Espartosa</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/2.0/?ref=openverse">CC BY-NC-SA 2.0</a>.</figcaption></figure></div><p><br>In software, deep interlock often occurs in the form of <strong>inversion of control</strong>, where a function calls back into code owned by its caller:</p><pre><code><code>const evens = [1, 2, 3].map((n) =&gt; n * 2);
// evens = [2, 4, 6]</code></code></pre><p>A related concept is ambiguity &#8212; specifically ambiguity of structural hierarchy. A simple example can be seen in the herringbone pattern below:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb54e08ea-9c61-4263-a09b-6d553aeb2e85_1024x768.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb54e08ea-9c61-4263-a09b-6d553aeb2e85_1024x768.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb54e08ea-9c61-4263-a09b-6d553aeb2e85_1024x768.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb54e08ea-9c61-4263-a09b-6d553aeb2e85_1024x768.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb54e08ea-9c61-4263-a09b-6d553aeb2e85_1024x768.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb54e08ea-9c61-4263-a09b-6d553aeb2e85_1024x768.jpeg" width="410" height="307.5" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b54e08ea-9c61-4263-a09b-6d553aeb2e85_1024x768.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:768,&quot;width&quot;:1024,&quot;resizeWidth&quot;:410,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;herringbone bricks with moss&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="herringbone bricks with moss" title="herringbone bricks with moss" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb54e08ea-9c61-4263-a09b-6d553aeb2e85_1024x768.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb54e08ea-9c61-4263-a09b-6d553aeb2e85_1024x768.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb54e08ea-9c61-4263-a09b-6d553aeb2e85_1024x768.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb54e08ea-9c61-4263-a09b-6d553aeb2e85_1024x768.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/10347634@N08/6346339424">herringbone bricks with moss</a>" by <a href="https://www.flickr.com/photos/10347634@N08">Midlife.Bloomer</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/?ref=openverse">CC BY-NC-ND 2.0</a>.</figcaption></figure></div><p><br>Each herringbone is made of two rows of bricks: one angled one way, and one angled the other way. Each of these angled rows belongs to two herringbones: one pointing left and one pointing right. Because the hierarchy is ambiguous, you can perceive the whole as a tiling of left-facing herringbones, or as a tiling of right-facing herringbones. The interlocking, overlapping centers formed by the herringbones make the whole pattern feel unified.</p><p>Ambiguity occurs whenever we have an &#8220;intermediate&#8221; center &#8212; often a datatype or interface &#8212; which is the common property of all the centers it connects. The data or interface serves the needs of both its producers and its consumers, and is associated with them both.</p><p>In people-space, hierarchical ambiguity shows up in <strong>matrix management </strong>of <strong>cross-functional teams</strong>. In matrix management, the person who decides what you work on day-to-day (e.g. the <em>product manager</em>) is generally not the person you report to. The decoupling of people management from product management enables the formation of cross-functional teams &#8212; teams that have all the expertise (design, business, engineering) needed to create a successful product.</p><p>In all cases, ambiguity creates multiple ways of looking at things: more potential groupings of centers, each of which is a candidate for being strengthened or reconfigured as the whole evolves to solve new problems.</p><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-1" href="#footnote-anchor-1" class="footnote-number" contenteditable="false" target="_self">1</a><div class="footnote-content"><p>This doesn&#8217;t mean it&#8217;s impossible to notice or appreciate good software, just that it takes a bit more effort to notice than bad software. E.g. web browsers are very good these days &#8212; so good that I bet you rarely think about how much they&#8217;re doing for you.<br><br>I also do not mean to imply that every program or app is either all-good or all-bad. Obviously some parts and features of a program can be better than others. The problem I see is that we seem just as eager to replace good features with bad ones as vice versa.</p></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-2" href="#footnote-anchor-2" class="footnote-number" contenteditable="false" target="_self">2</a><div class="footnote-content"><p>That is, we should posit hypotheses that are general, and thus predictive and falsifiable.</p></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-3" href="#footnote-anchor-3" class="footnote-number" contenteditable="false" target="_self">3</a><div class="footnote-content"><p>The readability difference between the two styles of if statement is insignificant for such a simple example, but for larger chunks of code, I find that the <code>else</code> helps clarify things.</p></div></div>]]></content:encoded></item><item><title><![CDATA[The 15 Properties in Software, Part 1]]></title><description><![CDATA[Properties 1-4]]></description><link>https://bensguide.substack.com/p/the-15-properties-in-software-part</link><guid isPermaLink="true">https://bensguide.substack.com/p/the-15-properties-in-software-part</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Tue, 30 Apr 2024 00:36:41 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>Judging by the traffic on my <a href="https://bensguide.substack.com/p/the-christopher-alexander-post">previous post</a>, it seems that many of you like Christopher Alexander. I do too! So you&#8217;re going to keep hearing about him for a few more posts.</p><p>In the previous post, I introduced Christopher Alexander&#8217;s concepts of <strong>life</strong> and <strong>centers</strong>, his <strong>15 properties</strong> of living structure, and the idea that living structure can only arise through <strong>adaptation</strong>. In these next few posts, I want to clarify exactly what it means for software to evince these 15 properties.</p><p>I&#8217;ve accompanied each property with an illustration. Sorry they&#8217;re so crude&#8212;I drew them with a mouse because that was all I had. I hope they get the point across anyway.</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a class="button primary button-wrapper" href="https://bensguide.substack.com/subscribe?"><span>Subscribe now</span></a></p><h2>1. Levels of Scale</h2><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fe11e69-65cf-4d53-8248-cd73c24c5556_300x320.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fe11e69-65cf-4d53-8248-cd73c24c5556_300x320.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fe11e69-65cf-4d53-8248-cd73c24c5556_300x320.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fe11e69-65cf-4d53-8248-cd73c24c5556_300x320.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fe11e69-65cf-4d53-8248-cd73c24c5556_300x320.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fe11e69-65cf-4d53-8248-cd73c24c5556_300x320.png" width="190" height="202.66666666666666" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6fe11e69-65cf-4d53-8248-cd73c24c5556_300x320.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:320,&quot;width&quot;:300,&quot;resizeWidth&quot;:190,&quot;bytes&quot;:20384,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fe11e69-65cf-4d53-8248-cd73c24c5556_300x320.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fe11e69-65cf-4d53-8248-cd73c24c5556_300x320.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fe11e69-65cf-4d53-8248-cd73c24c5556_300x320.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fe11e69-65cf-4d53-8248-cd73c24c5556_300x320.png 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a></figure></div><p></p><p>In every modern high-level programming language, source code is organized into centers that span a vast range of scales. Ordered roughly from smallest to largest:</p><ul><li><p>characters</p></li><li><p>tokens (variable names, operators, etc.)</p></li><li><p>expressions</p></li><li><p>lines</p></li><li><p>statements</p></li><li><p>paragraphs (chunks of code separated by blank lines)</p></li><li><p>routines (functions, methods, procedures)</p></li><li><p>classes and types</p></li><li><p>modules</p></li><li><p>architectural layers (UI, controllers, service objects, data access)</p></li><li><p>programs</p></li><li><p>services</p></li><li><p>applications</p></li><li><p>application suites (e.g. Microsoft Office)</p></li></ul><p>Christopher Alexander stressed that the mere presence of centers of different sizes was not sufficient to constitute <strong>Levels of Scale</strong>. In order for the whole to feel human-scaled and not alienating, the arrangement of centers must meet a few criteria:</p><ul><li><p>The jumps in size between adjacent levels of scale must not be too large. Ratios between 2:1 and 5:1 work well. When the jumps are larger than that, it becomes difficult to perceive a relationship between centers at adjacent scales. Instead of a cohesive whole, we see a jumble of unrelated pieces.</p></li><li><p>Small-scale centers must be present. That is, the levels of scale property must be applied recursively, all the way down to the smallest scale we can perceive or manipulate.</p></li><li><p>The frequency distribution of centers must roughly follow a power law, where there are more smaller centers than larger ones.</p></li></ul><p>These criteria echo the received wisdom that &#8220;a function should have 5 lines or fewer.&#8221; Obviously, this is not viable as a hard-and-fast rule, but it makes sense as a general guideline, and Levels of Scale tells us why. Each center should be simple enough to &#8220;fit in your head.&#8221; You should be able to see how each center relates to, and is made from, the centers one level smaller. Thus, a line should have only a handful of tokens, a method a handful of lines, and an object a handful of methods.</p><p>What would code look like <em>without</em> levels of scale? Well, imagine an assembly-language program where instead of procedures and calls, you just have jumps (i.e. GOTOs) within an undifferentiated mass of instructions.</p><p>A program written in this extreme style might have only two levels of scale &#8212; instruction and program. The instruction:program ratio might be several thousand to one. Even if you&#8217;ve never written or tried to read a program in this style, you can probably imagine the difficulty it would cause!</p><p>Levels of scale also exist in people-space. From smallest to largest:</p><ul><li><p>Individuals</p></li><li><p>Pairs (if you do pair programming)</p></li><li><p>Teams</p></li><li><p>Departments</p></li><li><p>Offices</p></li><li><p>Geographic regions</p></li><li><p>Companies</p><p></p></li></ul><p>Note that the centers on this list don&#8217;t form a strict hierarchy, but a <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">DAG</a>: e.g. the people on a cross-functional team come from different departments. In today&#8217;s distributed world, a team probably spans offices, too.</p><h2>2. Strong Centers</h2><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png" width="238" height="226.94535519125682" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:349,&quot;width&quot;:366,&quot;resizeWidth&quot;:238,&quot;bytes&quot;:27322,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f09d55e-ff68-4e4a-8d5e-24bc7f1d894d_366x349.png 1456w" sizes="100vw" loading="lazy"></picture><div></div></div></a></figure></div><blockquote><p>One subtle but powerful way to promote compactness in a design is to organize it around a strong core algorithm addressing a clear formal definition of the problem, avoiding heuristics and fudging.</p><p>&#8212;<a href="http://catb.org/esr/writings/taoup/html/ch04s02.html#id2895445">Eric S. Raymond, </a><em><a href="http://catb.org/esr/writings/taoup/html/ch04s02.html#id2895445">The Art of Unix Programming</a></em><a href="http://catb.org/esr/writings/taoup/html/ch04s02.html#id2895445">, "Compactness and the Strong Single Center"</a></p></blockquote><p>In Alexander&#8217;s terms, a <strong>Strong Center</strong> is one that plays a &#8220;primary&#8221; role in a design. It is the core, the heart, the kernel of the thing: its reason for being. A Strong Center tends to have support from many other centers, which are subordinate to it and less central. This &#8220;support&#8221; can come in the form of another of the 15 properties, but it can also simply be a &#8220;pointing&#8221; relationship, where the subordinate center gets its purpose from the strong center. The key point is that the subordinate centers are organized around the central strong center. They come into being, and are shaped the way they are, <em>because</em> of the strong center.</p><p>Examples of strong centers in architecture include:</p><ul><li><p>The stage of a theater</p></li><li><p>The altar of a church</p></li><li><p>A town square or main street</p></li><li><p>A university quadrangle</p></li><li><p>The main room of a house (in my house it&#8217;s the kitchen)</p></li></ul><p>But what does a strong center look like in a computer program?</p><p>Imagine it&#8217;s your first day on a new team. The tech lead sits you down in front of a whiteboard and says &#8220;okay, the first thing you need to know about this system is X.&#8221; X is likely to be the strongest center in the system.</p><p>Examples:</p><ul><li><p>&#8220;We use <strong><a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type">CRDT</a>s</strong> to sync data between peers&#8221;</p></li><li><p>&#8220;There&#8217;s a <strong>rules engine</strong> that runs all the business logic&#8221;</p></li><li><p>&#8220;This program is structured as a <strong>pipeline</strong> that processes data via a sequence of transformations&#8221;</p></li><li><p>&#8220;Our <strong>domain model</strong> is written in a functional style, with algebraic types&#8221;</p></li><li><p>&#8220;It&#8217;s a CRUD app on top of a <strong>Postgres database</strong>&#8221;</p></li><li><p>&#8220;It&#8217;s a <strong>Minecraft</strong> mod&#8221;</p></li><li><p>&#8220;We use <strong>Redux</strong> for all our clientside state&#8221;</p></li></ul><p>Having a strong center, a &#8220;first thing to know,&#8221; on a project is wonderfully reassuring. When you get lost, you can orient yourself relative to the strong center. As long as you can relate the bit of code you&#8217;re looking at to that center, you know at least one important thing about it. You can see how it fits into the big picture.</p><p>As Eric Raymond points out in the quote above, strong centers should be precision-engineered and rock solid. A bit of <strong>roughness</strong> outside the strong center is fine, if it helps accommodate supporting centers to the strong center. But the strong center itself must be exact: it&#8217;s the foundation for the rest of the system, so it pays to get it right.</p><p>A strong center need not be a formal algorithm or model, though&#8212;it can simply be the &#8220;central&#8221; part of a design, the part toward which the other parts &#8220;point.&#8221; Whenever you hear software engineers talking about the &#8220;edge&#8221; of a system, you know that there is a strong center somewhere nearby. Without a center, there could not be an edge!</p><p>For example, in a typical Ruby on Rails app, the center is the database. We have the sense that web requests come in at the &#8220;edge&#8221; of the system, and travel inward through &#8220;layers&#8221;&#8212;controller, services, and model&#8212;finally arriving at the central database. Then the response data goes back out, passes through the outermost &#8220;view&#8221; layer, and finally is returned to the client.</p><p>By contrast, in applications that use functional domain-driven design, the domain model is the strongest center. Database interactions happen near the edge of the system, and it is the in-memory domain model that forms the kernel, the solid core of the program.</p><p>Extending the idea of strong centers into people-space, we get the concept of a <strong>team lead</strong> &#8212; the role that, at Pivotal Labs, we called &#8220;anchor.&#8221; The history of the anchor role is instructive. Early on in the history of Labs (which was a software consulting company) engineering teams had a completely flat structure and fluid membership. Labs engineers might rotate between client projects on a weekly basis. Because engineers were pair-programming full time, this worked on a technical level&#8212;knowledge-sharing happened fast enough that someone <em>could</em> contribute meaningfully to a project in a one-week rotation. But clients weren&#8217;t totally happy with it. They wanted the stability of having <em>one person</em> they could talk to about the technical aspects of the project. Thus, the anchor role was born. An anchor was simply an engineer who would be assigned to the project for its entire duration, and serve as the primary point of contact with the client.</p><p>It&#8217;s worth considering this history from the perspective of the 15 properties. In essence, Pivotal Labs</p><ul><li><p>started out without strong centers on its engineering teams</p></li><li><p>identified that this structure was mismatched with their clients&#8217; needs</p></li><li><p>fixed the problem by strengthening a center.</p></li></ul><p>This is how adaptation works. It&#8217;s a great example of how, in a complex system, small changes can have a big impact.</p><h2>3. Thick Boundaries</h2><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd9186e72-dffc-4b4a-96b5-a3d9da2010c7_304x392.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd9186e72-dffc-4b4a-96b5-a3d9da2010c7_304x392.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd9186e72-dffc-4b4a-96b5-a3d9da2010c7_304x392.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd9186e72-dffc-4b4a-96b5-a3d9da2010c7_304x392.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd9186e72-dffc-4b4a-96b5-a3d9da2010c7_304x392.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd9186e72-dffc-4b4a-96b5-a3d9da2010c7_304x392.png" width="198" height="255.31578947368422" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d9186e72-dffc-4b4a-96b5-a3d9da2010c7_304x392.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:392,&quot;width&quot;:304,&quot;resizeWidth&quot;:198,&quot;bytes&quot;:17844,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd9186e72-dffc-4b4a-96b5-a3d9da2010c7_304x392.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd9186e72-dffc-4b4a-96b5-a3d9da2010c7_304x392.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd9186e72-dffc-4b4a-96b5-a3d9da2010c7_304x392.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd9186e72-dffc-4b4a-96b5-a3d9da2010c7_304x392.png 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>How do we connect the <strong>strong centers</strong> of our programs to the messy outside world? We need some code that serves as the intermediary, the <strong>boundary</strong>, between the two. Boundary code does all the unglamorous yet essential work that&#8217;s needed to keep the strong center pristine. Boundaries can parse inputs, serialize outputs, perform effects, and handle errors.</p><p>Boundaries don&#8217;t have to be associated with strong centers, though. Any time you draw a line between two pieces of code and say &#8220;this part is responsible for <em>this</em>, and that part is responsible for <em>that</em>,&#8221; you&#8217;ve created a boundary. APIs and function signatures are boundaries. Anything with an inside and an outside has a boundary.</p><p>Alexander noted that boundaries in living buildings tend to be <strong>thick</strong>&#8212;often far thicker than you might at first think to make them. Thick walls, deep porches, expansive gardens&#8212;these are all important boundaries that deserve space.</p><p>In many programs that I&#8217;ve seen, the boundaries are not given sufficient space or attention. Programmers often balk at creating comprehensive parsers and serializers for their input and output data because &#8220;all that code&#8221; takes up more space than they think ought to be allotted to the problem. The issues that arise from this are manifold. One issue is that parsing and error handling get smeared throughout the program and often end up contaminating the strong centers. Alexis King has pointed out the problems with this:</p><blockquote><p>[A] program that does not parse all of its input up front runs the risk of acting upon a valid portion of the input, discovering a different portion is invalid, and suddenly needing to roll back whatever modifications it already executed in order to maintain consistency. [. . .] The entire program must assume that raising an exception anywhere is not only possible, it&#8217;s regularly necessary.</p><p>Parsing avoids this problem by stratifying the program into two phases&#8212;parsing and execution&#8212;where failure due to invalid input can only happen in the first phase. The set of remaining failure modes during execution is minimal by comparison, and they can be handled with the tender care they require.</p><p>&#8212;<a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/">Alexis King, &#8220;Parse, don&#8217;t Validate&#8221;</a></p></blockquote><p>Another, related problem stemming from insufficient parsing is that invalid or undesirable states, which ideally should not be representable in the core domain model, end up being representable. Code that works with the domain model then has to handle these bad states. It&#8217;s much tidier to reject the bad states upfront, in a parsing layer.</p><p>Alan Kay once likened OOP objects to biological cells &#8212; noting that cells spend an enormous amount of energy just <em>maintaining their boundaries</em>, keeping the bad stuff out and the good stuff in. Objects in programs are similar: they can and must reject bad input at their boundary, so it doesn&#8217;t propagate further into the program.</p><p>Thick boundaries also have their place in team organization. At Pivotal Labs, we did something that Todd Sedano calls <a href="https://www.researchgate.net/publication/343280168_Dual-Track_Development">dual-track software development</a>. Product managers and designers worked in one &#8220;thread,&#8221; defining how the product should look and work from the user&#8217;s perspective. Engineers worked in a parallel thread, writing the code to make the PM&#8217;s dreams come true. The boundary between the two threads was a priority queue, the <em>backlog</em>. The PM would insert work items into this queue &#8212;&nbsp;choosing their position according to priority &#8212;&nbsp;and engineers would pop the top item off the queue whenever they needed a new thing to do.</p><p>This boundary &#8212; the explicit structure of it, with exactly one &#8220;highest priority&#8221; work item at any one time, and the explicit rules about how it was to be used &#8212; made communication about the project much smoother. It left less room for anxiety and clashing egos. But it also made room for joy: the satisfaction of getting things done, knowing that they were important to someone.</p><h2>4. Alternating Repetition</h2><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fed04de43-dd74-46e2-b341-a13b2b238eb6_566x158.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fed04de43-dd74-46e2-b341-a13b2b238eb6_566x158.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fed04de43-dd74-46e2-b341-a13b2b238eb6_566x158.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fed04de43-dd74-46e2-b341-a13b2b238eb6_566x158.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fed04de43-dd74-46e2-b341-a13b2b238eb6_566x158.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fed04de43-dd74-46e2-b341-a13b2b238eb6_566x158.png" width="566" height="158" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ed04de43-dd74-46e2-b341-a13b2b238eb6_566x158.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:158,&quot;width&quot;:566,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:19139,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fed04de43-dd74-46e2-b341-a13b2b238eb6_566x158.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fed04de43-dd74-46e2-b341-a13b2b238eb6_566x158.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fed04de43-dd74-46e2-b341-a13b2b238eb6_566x158.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fed04de43-dd74-46e2-b341-a13b2b238eb6_566x158.png 1456w" sizes="100vw" loading="lazy"></picture><div></div></div></a></figure></div><p>Often in software development, we find that two kinds of centers repeat throughout a structure and are dual to each other. <strong> Alternating repetition</strong> is about noticing these dualities and taking equal care with both halves, so that both are made coherent.</p><p>For example, in Unix pipelines, the filter programs repeat, and so do the streams of data between them. Both form <strong>positive space (</strong>see below<strong>)</strong>. One way of seeing the pipeline is to see the filters as primary. Another is to see the streams of data as primary.</p><p>More generally, routines and data alternate throughout the structure of a program. Data types form the space "between" routines, since data are passed from routine to routine. I've seen too many programs where programmers only thought about the routines, and the data was neglected. In a well-designed program, the data is as coherent as the code that processes it. This isn&#8217;t a zero-sum tradeoff. Coherence of data enables the code to be <em>more</em> coherent.</p><p>Other dualities include:</p><ul><li><p>Test code and production code</p></li><li><p>Structure and behavior</p></li><li><p>Refactoring and features</p></li></ul><p>In test-driven development, the rhythm of writing a test and then writing the code to make it pass repeats and alternates. Either the tests or the code can be viewed as primary. Both are coherent, intelligible entities in their own right.</p><p>Applying <strong>alternating repetition</strong> to people-space, we get <strong>work-life balance</strong>. One of the things I really appreciated about working at Pivotal Labs was that the workday <em>ended</em>, unambiguously, at 6 pm sharp, every day. Engineers didn&#8217;t have personal laptops (client confidentiality prevented us from taking code offsite) so it was physically impossible to take work home. The flip side of this was that for the 8 hours we were at work, we were <em>on</em>. Pairing 40 hours a week <a href="https://www.simplermachines.com/the-mortifying-ordeal-of-pairing-all-day/">is no joke</a>. The schedule demanded a lot of us &#8212; sometimes too much.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1" href="#footnote-1" target="_self">1</a> But it also, undeniably, brought out our <em>life</em>.</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a class="button primary button-wrapper" href="https://bensguide.substack.com/subscribe?"><span>Subscribe now</span></a></p><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-1" href="#footnote-anchor-1" class="footnote-number" contenteditable="false" target="_self">1</a><div class="footnote-content"><p>I sometimes wonder what Labs would have been like if we&#8217;d been able to sustain ourselves on 30- or 35-hour workweeks. I&#8217;m not sure I&#8217;d be able to convince myself to go back to pairing 9-to-6. But 9-to-4? Heck yeah!</p></div></div>]]></content:encoded></item><item><title><![CDATA[The Christopher Alexander Post]]></title><description><![CDATA[life, centers, properties, and adaptation]]></description><link>https://bensguide.substack.com/p/the-christopher-alexander-post</link><guid isPermaLink="true">https://bensguide.substack.com/p/the-christopher-alexander-post</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Thu, 25 Apr 2024 00:25:40 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>Hello! You&#8217;re reading Ben&#8217;s Guide to Software Development, the weekly bulletin where I post stuff about my upcoming book, <em>Process to Processes</em>, and occasionally become publicly <a href="https://bensguide.substack.com/p/i-am-confused">confused</a>.</p><p>You can read the current draft of <em>Process to Processes</em> by clicking this button:</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://benchristel.github.io/process-to-processes/&quot;,&quot;text&quot;:&quot;Read \&quot;Process to Processes\&quot; Online&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a class="button primary button-wrapper" href="https://benchristel.github.io/process-to-processes/"><span>Read "Process to Processes" Online</span></a></p><p>&#8230;and if you&#8217;d like to get notified of updates to to the book, you can sign up with your email below:</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/subscribe?"><span>Subscribe now</span></a></p><div><hr></div><p><a href="https://bensguide.substack.com/p/i-am-confused">My previous post</a> was a semi-structured set of notes to myself that I decided to publish because I thought some of you might find it interesting. At the time, I was pondering some of Christopher Alexander&#8217;s ideas and had more questions than answers. Now that I&#8217;ve thought about the questions a bit more, and have at least some initial guesses at answers, I hope to attempt a slightly more polished presentation. But that will have to wait for the next post. First, I think I owe you an explanation of what exactly I am talking about when I use terms like &#8220;centers,&#8221; &#8220;life,&#8221; and &#8220;living structure&#8221; in relation to software.</p><h2>An Extremely Cursory Summary of Alexandrian Thought</h2><p>Christopher Alexander (1936&#8211;2022) was an architect-builder: he designed buildings and oversaw their construction. Most architects in the U.S. don&#8217;t work the way he did. They don&#8217;t get deeply involved in construction; they just draw up the plans and toss them over the fence to be built by someone else. Alexander, by contrast, concerned himself with every detail, down to tilework and trim. He hand-painted ornaments on some of his buildings himself.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff88c69cb-9934-472d-8352-4a728cf0ec88_341x500.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff88c69cb-9934-472d-8352-4a728cf0ec88_341x500.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff88c69cb-9934-472d-8352-4a728cf0ec88_341x500.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff88c69cb-9934-472d-8352-4a728cf0ec88_341x500.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff88c69cb-9934-472d-8352-4a728cf0ec88_341x500.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff88c69cb-9934-472d-8352-4a728cf0ec88_341x500.png" width="341" height="500" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f88c69cb-9934-472d-8352-4a728cf0ec88_341x500.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:500,&quot;width&quot;:341,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;image&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="image" title="image" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff88c69cb-9934-472d-8352-4a728cf0ec88_341x500.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff88c69cb-9934-472d-8352-4a728cf0ec88_341x500.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff88c69cb-9934-472d-8352-4a728cf0ec88_341x500.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff88c69cb-9934-472d-8352-4a728cf0ec88_341x500.png 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Flower motif painted by Christopher Alexander on the wall of the Linz Caf&#233;, in Linz, Austria</figcaption></figure></div><p>The status quo of how buildings are constructed in the U.S. (and increasingly, all over the world) was deeply troubling to Alexander. He could see that the design-up-front, build-on-spec, tear-it-down-in-50-years approach created buildings that couldn&#8217;t adapt to the needs of their inhabitants, and often overran their budgets to boot. But more poignantly, he could see that these buildings were almost always ugly, devoid of feeling, and designed without deep care for the people who would live and work there.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8540903d-a1f0-4917-bd1c-6af9d54eeded_2000x1499.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8540903d-a1f0-4917-bd1c-6af9d54eeded_2000x1499.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8540903d-a1f0-4917-bd1c-6af9d54eeded_2000x1499.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8540903d-a1f0-4917-bd1c-6af9d54eeded_2000x1499.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8540903d-a1f0-4917-bd1c-6af9d54eeded_2000x1499.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8540903d-a1f0-4917-bd1c-6af9d54eeded_2000x1499.jpeg" width="510" height="382.14972527472526" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8540903d-a1f0-4917-bd1c-6af9d54eeded_2000x1499.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1091,&quot;width&quot;:1456,&quot;resizeWidth&quot;:510,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Homekey Mountain View | Mountain View&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Homekey Mountain View | Mountain View" title="Homekey Mountain View | Mountain View" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8540903d-a1f0-4917-bd1c-6af9d54eeded_2000x1499.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8540903d-a1f0-4917-bd1c-6af9d54eeded_2000x1499.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8540903d-a1f0-4917-bd1c-6af9d54eeded_2000x1499.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8540903d-a1f0-4917-bd1c-6af9d54eeded_2000x1499.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Homekey Mountain View, a Bay Area homeless shelter. Not by Christopher Alexander.</figcaption></figure></div><p>Alexander spent his entire career in an unwavering quest for a solution to this problem, which culminated in the publication, in four volumes, of a 2,000 page essay that he called <em>The Nature of Order</em>. In this monumental work, he reimagines architecture from the ground up.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg" width="1024" height="687" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:687,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Julian Street Inn | San Jose&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Julian Street Inn | San Jose" title="Julian Street Inn | San Jose" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2087b5eb-02d2-485d-a56a-d7a3c81fc062_1024x687.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">The Julian Street Inn, an 85-bed homeless shelter in San Jose, designed and built by Christopher Alexander</figcaption></figure></div><h3>Life</h3><p>He starts with a simple observation about the built environment: <strong>some places make us feel more comfortable, more whole, and more &#8220;alive&#8221; than others.</strong> Not only that, but the things that make us feel alive seem almost to have a kind of life themselves. They are vibrant. They are personal. They seem, somehow, to have &#8220;the character of nature,&#8221;<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1" href="#footnote-1" target="_self">1</a> even when they are made by people.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae51f43-d505-40bb-bf67-eb7dacad76e0_887x1200.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae51f43-d505-40bb-bf67-eb7dacad76e0_887x1200.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae51f43-d505-40bb-bf67-eb7dacad76e0_887x1200.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae51f43-d505-40bb-bf67-eb7dacad76e0_887x1200.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae51f43-d505-40bb-bf67-eb7dacad76e0_887x1200.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae51f43-d505-40bb-bf67-eb7dacad76e0_887x1200.jpeg" width="422" height="570.913190529876" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/4ae51f43-d505-40bb-bf67-eb7dacad76e0_887x1200.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1200,&quot;width&quot;:887,&quot;resizeWidth&quot;:422,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;a carpet with a vibrant, warm-colored field at its center, surrounded by a colder, contrasting border. Motifs like trees or rows of spears add texture around the warm field. In the center there are two floral designs that look like glowing eyes.&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="a carpet with a vibrant, warm-colored field at its center, surrounded by a colder, contrasting border. Motifs like trees or rows of spears add texture around the warm field. In the center there are two floral designs that look like glowing eyes." title="a carpet with a vibrant, warm-colored field at its center, surrounded by a colder, contrasting border. Motifs like trees or rows of spears add texture around the warm field. In the center there are two floral designs that look like glowing eyes." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae51f43-d505-40bb-bf67-eb7dacad76e0_887x1200.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae51f43-d505-40bb-bf67-eb7dacad76e0_887x1200.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae51f43-d505-40bb-bf67-eb7dacad76e0_887x1200.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae51f43-d505-40bb-bf67-eb7dacad76e0_887x1200.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">A fragmentary Turkish carpet from Christopher Alexander&#8217;s collection. Though the design is abstract, it feels almost like a living being in its power and majesty.</figcaption></figure></div><p>To get a sense for what Alexander means when he talks about the life of a place or a thing, it is easiest to start with some examples.</p><p>The life that exists in the built environment is perhaps most acutely recognizable by its absence. Here is a place, typical of North America, that has very little life: a commercial parking lot.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fffbb0621-ede6-48d6-a43c-cea9a6e038e1_1024x768.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fffbb0621-ede6-48d6-a43c-cea9a6e038e1_1024x768.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fffbb0621-ede6-48d6-a43c-cea9a6e038e1_1024x768.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fffbb0621-ede6-48d6-a43c-cea9a6e038e1_1024x768.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fffbb0621-ede6-48d6-a43c-cea9a6e038e1_1024x768.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fffbb0621-ede6-48d6-a43c-cea9a6e038e1_1024x768.jpeg" width="1024" height="768" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ffbb0621-ede6-48d6-a43c-cea9a6e038e1_1024x768.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:768,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Costco Parking Lot&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Costco Parking Lot" title="Costco Parking Lot" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fffbb0621-ede6-48d6-a43c-cea9a6e038e1_1024x768.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fffbb0621-ede6-48d6-a43c-cea9a6e038e1_1024x768.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fffbb0621-ede6-48d6-a43c-cea9a6e038e1_1024x768.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fffbb0621-ede6-48d6-a43c-cea9a6e038e1_1024x768.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/14913305@N00/39197810260">Costco Parking Lot</a>" by <a href="https://www.flickr.com/photos/14913305@N00">Chris Hunkeler</a> is licensed under <a href="https://creativecommons.org/licenses/by-sa/2.0/?ref=openverse">CC BY-SA 2.0</a>.</figcaption></figure></div><p>Imagine stepping out of your car into this space. The hot sun glints off the rows of metal roofs, shimmering in the waves of rising air. Your muscles tense, and your face hardens ever so slightly toward an expression of grim resolve as you hustle over the pavement to wherever it is you&#8217;re going. Because you&#8217;re certainly not going <em>here</em>. This is a liminal space, a nowhere-place, a leftover, a necessary evil, an externality. It is alien to you, and you are alien to it. You are just passing through, and it instructs you, quietly but firmly, to move along.</p><p>Now let&#8217;s look at a place that has much more life: a courtyard filled with with trees, trellises, and caf&#233; tables, tucked between lovable four-story buildings.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1ab81c4-c2ba-4988-ac0b-6f48741a8901_768x1024.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1ab81c4-c2ba-4988-ac0b-6f48741a8901_768x1024.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1ab81c4-c2ba-4988-ac0b-6f48741a8901_768x1024.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1ab81c4-c2ba-4988-ac0b-6f48741a8901_768x1024.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1ab81c4-c2ba-4988-ac0b-6f48741a8901_768x1024.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1ab81c4-c2ba-4988-ac0b-6f48741a8901_768x1024.jpeg" width="768" height="1024" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c1ab81c4-c2ba-4988-ac0b-6f48741a8901_768x1024.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1024,&quot;width&quot;:768,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;photo of a courtyard cafe shaded by trellised vines and a palm tree. People are sitting around small colorful tables eating and drinking. The buildings around the courtyard have friendly-looking windows and balconies.&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="photo of a courtyard cafe shaded by trellised vines and a palm tree. People are sitting around small colorful tables eating and drinking. The buildings around the courtyard have friendly-looking windows and balconies." title="photo of a courtyard cafe shaded by trellised vines and a palm tree. People are sitting around small colorful tables eating and drinking. The buildings around the courtyard have friendly-looking windows and balconies." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1ab81c4-c2ba-4988-ac0b-6f48741a8901_768x1024.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1ab81c4-c2ba-4988-ac0b-6f48741a8901_768x1024.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1ab81c4-c2ba-4988-ac0b-6f48741a8901_768x1024.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1ab81c4-c2ba-4988-ac0b-6f48741a8901_768x1024.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/49539505@N04/6042858166">View, cafe &amp; courtyard</a>" by <a href="https://www.flickr.com/photos/49539505@N04">La Citta Vita</a> is licensed under <a href="https://creativecommons.org/licenses/by-sa/2.0/?ref=openverse">CC BY-SA 2.0</a>.</figcaption></figure></div><p>It&#8217;s a place where you might happily sit, in dappled shade, for hours, perhaps chatting with a friend, sipping a hot or cold beverage of your choice. Just sitting, people-watching, with your phone slumbering half-forgotten in your pocket.</p><p>Okay, you might say. One of these places is obviously designed to be nice; it has had a lot of money put into it. It looks like a hangout for rich people. The other is bare-bones, middle-class, utilitarian in the meanest sense. Might Alexander&#8217;s concept of &#8220;life&#8221; just be a proxy for &#8220;wealth?&#8221;</p><p>Alexander invites us to look deeper. </p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9b13b7a6-50ad-48a2-8ca3-b531e9ca8faf_575x1023.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9b13b7a6-50ad-48a2-8ca3-b531e9ca8faf_575x1023.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9b13b7a6-50ad-48a2-8ca3-b531e9ca8faf_575x1023.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9b13b7a6-50ad-48a2-8ca3-b531e9ca8faf_575x1023.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9b13b7a6-50ad-48a2-8ca3-b531e9ca8faf_575x1023.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9b13b7a6-50ad-48a2-8ca3-b531e9ca8faf_575x1023.jpeg" width="575" height="1023" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9b13b7a6-50ad-48a2-8ca3-b531e9ca8faf_575x1023.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1023,&quot;width&quot;:575,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;10-story modern apartments: angular buildings with slick glass windows. no human life is visible.&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="10-story modern apartments: angular buildings with slick glass windows. no human life is visible." title="10-story modern apartments: angular buildings with slick glass windows. no human life is visible." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9b13b7a6-50ad-48a2-8ca3-b531e9ca8faf_575x1023.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9b13b7a6-50ad-48a2-8ca3-b531e9ca8faf_575x1023.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9b13b7a6-50ad-48a2-8ca3-b531e9ca8faf_575x1023.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9b13b7a6-50ad-48a2-8ca3-b531e9ca8faf_575x1023.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Lifeless buildings for the wealthy. "<a href="https://www.flickr.com/photos/89461633@N00/5605540135">Modern Apartments</a>" by <a href="https://www.flickr.com/photos/89461633@N00">Mdrewe</a> is licensed under <a href="https://creativecommons.org/licenses/by-nd/2.0/?ref=openverse">CC BY-ND 2.0</a>.</figcaption></figure></div><p>He shows many examples of places, like the apartments above, that represent huge investments of wealth, but have very little life. He also shows examples of the intense life that people can create even without a lot of money.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd79fba00-ccb8-4e51-9b44-50a58fc44eaf_1024x374.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd79fba00-ccb8-4e51-9b44-50a58fc44eaf_1024x374.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd79fba00-ccb8-4e51-9b44-50a58fc44eaf_1024x374.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd79fba00-ccb8-4e51-9b44-50a58fc44eaf_1024x374.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd79fba00-ccb8-4e51-9b44-50a58fc44eaf_1024x374.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd79fba00-ccb8-4e51-9b44-50a58fc44eaf_1024x374.jpeg" width="1200" height="438.28125" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d79fba00-ccb8-4e51-9b44-50a58fc44eaf_1024x374.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:374,&quot;width&quot;:1024,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Kensington Market. a street with market stands, people walking around, some sitting outside a cafe. the buildings are small and funky and there is graffiti on the roofs.&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="Kensington Market. a street with market stands, people walking around, some sitting outside a cafe. the buildings are small and funky and there is graffiti on the roofs." title="Kensington Market. a street with market stands, people walking around, some sitting outside a cafe. the buildings are small and funky and there is graffiti on the roofs." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd79fba00-ccb8-4e51-9b44-50a58fc44eaf_1024x374.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd79fba00-ccb8-4e51-9b44-50a58fc44eaf_1024x374.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd79fba00-ccb8-4e51-9b44-50a58fc44eaf_1024x374.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd79fba00-ccb8-4e51-9b44-50a58fc44eaf_1024x374.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Kensington Market, a historic multicultural neighborhood of Toronto. Photo by <a href="https://www.flickr.com/photos/35807342@N00">Travis Estell</a>, licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/2.0/?ref=openverse">CC BY-NC-SA 2.0</a>.</figcaption></figure></div><p>He invites us to ask: what is the nature of the &#8220;life&#8221; we feel, or don&#8217;t feel, in each of these examples? What is its origin? It is possible to create it intentionally?</p><p>Alexander takes 2,000 pages to fully answer this question. But very briefly, his conclusions are:</p><ul><li><p>that the origin of life in places is <em>structural</em>. There is something about the geometric arrangement of matter and space in these different places that makes us feel different degrees of life there. In addition, living structure is recursive: a place has life when it is made of smaller pieces and places that themselves have the geometry of life, and that work harmoniously together.</p></li><li><p>that living places <em>can only</em> be created when planning and construction happen together. To create life, the plan must be able to adapt to the real facts on the ground &#8212; the real forces that shape people&#8217;s activities. Those forces can only be discovered when you are on the site, collaborating with the people who will be the building&#8217;s primary inhabitants.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2" href="#footnote-2" target="_self">2</a></p></li><li><p>that life, contrary to what you might expect, does not have to cost a lot of money. Alexander did all kinds of projects, and was always extremely scrupulous about staying within his client&#8217;s budget. He firmly believed that the budget must be held sacred, and the scope and priorities of the project adjusted to make the best possible use of the available funds.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3" href="#footnote-3" target="_self">3</a></p></li></ul><h3>Centers</h3><p>Alexander held a master&#8217;s degree in mathematics, and like any mathematician he sought crisp definitions. He wasn&#8217;t satisfied with a vague characterization of &#8220;life&#8221; as some quasi-mystical property of certain places.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-4" href="#footnote-4" target="_self">4</a> He wanted something concrete, something computable.</p><p>So he investigated the nature of the substructures that make up living places, and finally came to call those substructures <strong>centers</strong>.</p><p>I found Alexander&#8217;s concept of centers somewhat difficult to grasp when I first encountered it. However, now that I <em>do</em> understand what centers are, I find them to be one of the most obvious and natural ideas there is. The only difficulty lies in the abstractness of the concept, because the word <em>center</em> covers a huge variety of everyday structures and objects that we normally refer to with more specific words.</p><p>To see that you already understand what a center is, imagine a whirlpool in a stream.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2513cb91-f212-40e6-ae50-dd5055e7aa60_640x427.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2513cb91-f212-40e6-ae50-dd5055e7aa60_640x427.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2513cb91-f212-40e6-ae50-dd5055e7aa60_640x427.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2513cb91-f212-40e6-ae50-dd5055e7aa60_640x427.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2513cb91-f212-40e6-ae50-dd5055e7aa60_640x427.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2513cb91-f212-40e6-ae50-dd5055e7aa60_640x427.png" width="640" height="427" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2513cb91-f212-40e6-ae50-dd5055e7aa60_640x427.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:427,&quot;width&quot;:640,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;whirlpool&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="whirlpool" title="whirlpool" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2513cb91-f212-40e6-ae50-dd5055e7aa60_640x427.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2513cb91-f212-40e6-ae50-dd5055e7aa60_640x427.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2513cb91-f212-40e6-ae50-dd5055e7aa60_640x427.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2513cb91-f212-40e6-ae50-dd5055e7aa60_640x427.png 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>What is a whirlpool? It's not a set of water molecules. The physical material that makes up the whirlpool is rapidly and constantly changing. It's also not an exact shape; the particular ripples in the water are constantly changing. You can&#8217;t draw an exact boundary around it, and it's not separable from the stream itself; you can't lift it out of the water and take it home with you.</p><p>Yet you can point to it. You can name it. If you come back the next day and the whirlpool is still there, you can say &#8220;it's the same one I saw yesterday.&#8221; If you know you can do all those things, then you know what a center is. A whirlpool is a center.</p><p>A center has an identity; we can point to it and say &#8220;that one,&#8221; and we can count how many there are. But a center is not always an isolated <em>object</em>. We can count the waves in a pond, the growth rings in a log, or the stitches in a knitted scarf, but while those structures are centers, they are not objects.</p><p>A center&#8217;s boundary is often fuzzy; we often cannot draw a hard line around a center and say &#8220;these points belong to the center, and those points don&#8217;t.&#8221; But we <em>can</em> talk about the <em>degree</em> to which any given point in space is associated with a center. And every center really does have a <em>center</em> &#8212; the region where its presence is most intense, and least ambiguous.</p><p>(Some centers, especially artificial ones, are more object-like than the examples I&#8217;ve given so far. Pick any object you see around you; it&#8217;s a center too.)</p><p>Alexander defines centers recursively: because a center is a structure, not necessarily an object, it can only be made, in general, of other structures&#8212;other centers.</p><p>The way that centers come together to form larger centers is not arbitrary. In order for the whole to have life, the centers in it must be <em>organized</em>. They can&#8217;t clash or work at cross purposes&#8212;they have to intensify each other, to harmonize, to build up to something. Accordingly, there are only a few ways that centers can be composed in a living structure. Christopher Alexander identified approximately<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-5" href="#footnote-5" target="_self">5</a> 15 of these ways.</p><h3>Fifteen Fundamental Properties of Living Structure</h3><p>Very briefly, here are the 15 ways that Alexander saw centers working together in living structures. For more detail, along with examples, see the pair of articles by Dave Hora linked below:</p><ul><li><p><a href="https://patterns.architexturez.net/doc/az-cf-218794">https://patterns.architexturez.net/doc/az-cf-218794</a></p></li><li><p><a href="https://patterns.architexturez.net/doc/az-cf-218795">https://patterns.architexturez.net/doc/az-cf-218795</a></p></li></ul><p></p><ol><li><p><strong>Levels of Scale.</strong> A larger center can be supported by or made up of smaller ones&#8212;usually about 1/4 to 1/2 its size. When this happens recursively, the centers in the whole structure form a hierarchy of scales.</p></li><li><p><strong>Strong Centers.</strong> One center can strengthen another by &#8220;pointing&#8221; toward it. Often one particularly strong center stands out as being <em>the</em> center of the whole configuration.</p></li><li><p><strong>Boundaries.</strong> One center can intensify another by forming a boundary around it, making it more distinct from its environment while also connecting it to its environment.</p></li><li><p><strong>Alternating Repetition.</strong> A row of similar centers becomes more alive when the space between the centers is not merely leftover, but is a coherent shape in its own right. The effect is that one perceives two different kinds of center that take turns with each other. Alternating repetition is really (IMO) a special case of positive space, below.</p></li><li><p><strong>Positive Space.</strong> Neighboring centers become more alive when each has a coherent, positive shape that we can perceive as an entity. (This is basically what&#8217;s happening in that optical illusion that&#8217;s either two faces or a vase &#8212; the two interpretations feel equally likely because the centers are equally positive. Both are plausible foreground figures; neither is merely background.)</p></li><li><p><strong>Good Shape.</strong> A center can have a beauty all its own, which comes from simplicity, grace, and good proportions. This is the hardest property to define.</p></li><li><p><strong>Local Symmetries.</strong> A center gains life according to the number of locally symmetrical elements it contains. This is perhaps the easiest property to define mathematically, and Alexander did a series of experiments that demonstrated its contribution to people&#8217;s perception of life in centers.</p></li><li><p><strong>Deep Interlock and Ambiguity.</strong> A boundary between centers (see above) may be formed by the two centers &#8220;hooking into&#8221; one another like interlaced fingers. There may also be ambiguity about which center the boundary belongs to. The whole configuration feels most alive when centers don&#8217;t form a strict, unambiguous hierarchy, but rather a <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">directed acyclic graph</a>, with many different overlapping patterns and groupings.</p></li><li><p><strong>Contrast.</strong> The whole configuration feels more lively when there is harmonious contrast (e.g. of color or texture) between neighboring centers.</p></li><li><p><strong>Gradients.</strong> When a certain property (sunlight, temperature, distance to downtown) varies continuously throughout space, the centers in that space will form some kind of <em>gradient</em> (e.g. of varying window sizes or building types) if they are correctly adapted to their context. This property isn&#8217;t really about centers working together; it&#8217;s more about the adaptation of each individual center to its particular location.</p></li><li><p><strong>Roughness.</strong> Another property that&#8217;s about adaptation. When centers are really well adapted, geometric perfection (perfect grids, perfect rows) takes a back seat. Rigid global order feels sterile and dead because it prevents local adaptation.</p></li><li><p><strong>Echoes.</strong> Centers intensify each others&#8217; life when they share family resemblances, when they seem to &#8220;go together.&#8221;</p></li><li><p><strong>The Void.</strong> Centers gain a more profound life in the midst of quiet, empty space&#8212;especially if the space is, itself, a coherent, bounded center.</p></li><li><p><strong>Simplicity and inner calm.</strong> Most of the other properties on this list seem to be telling us to fill structures with lots and lots of detailed little centers. This one says there&#8217;s a limit. Too much detail is just noise. We should only add detail that makes a net positive contribution to the life of the whole.</p></li><li><p><strong>Not-separateness.</strong> This is another property that&#8217;s really about adaptation. It says that a center can only really come to life by honestly responding to its actual context. It can&#8217;t be contrived or phony. It can&#8217;t be so &#8220;out there&#8221; that no one can make sense of it. It can&#8217;t be corny or cutesy. It shouldn&#8217;t feel awkward or out of place.</p></li></ol><h3>Adaptation</h3><p>Alexander derived his 15 properties by looking at a huge variety of structures and systems, both natural and human-made, that had the feeling he called &#8220;life.&#8221; These properties seemed <em>necessary</em> for life, in the sense that things that lacked the properties always felt dead and sterile. But Alexander knew better than to claim that the properties were <em>sufficient</em> for life &#8212; &#8220;just follow these 15 rules to design nice places.&#8221; It&#8217;s obviously not that simple.</p><p>So how do you actually do it? How do you design a building, or a neighborhood, that feels alive?</p><p>Alexander&#8217;s answer is that you don&#8217;t.</p><p>Life cannot be designed at the drafting table. It can <em>only</em> come into being through a process analogous to the growth or evolution of biological living systems, in which each part gradually adapts to its context. It is this deep <em>adaptation</em>, more than any of the fifteen properties, that creates the feeling of life. The fifteen properties are the visible result of the adaptation process, but the result itself cannot be planned.</p><p>The reason it can&#8217;t be planned is that the &#8220;context&#8221; to which each evolving part is adapting is really all the <em>other</em> parts of the emerging system, which are themselves adapting to everything else as the process unfolds. So we have a kind of infinitely-recursive, <a href="https://en.wikipedia.org/wiki/Indra%27s_net">Indra&#8217;s-net</a> type situation where everything depends on everything else. This implies that a living whole cannot be constructed from pre-made parts, since there is no way for pre-made parts to adapt to each other. To have life, the system has to hoist itself into being by its own bootstraps.</p><p>If this sounds a bit like agile software development&#8212;well, there&#8217;s a reason for that. The two movements, Alexandrian architecture and software agility, are intertwined, with a history that goes back decades. I can&#8217;t do justice to that history in this post, so I&#8217;m just telling you: it&#8217;s there if you care to research it. Links are in the footnote.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-6" href="#footnote-6" target="_self">6</a></p><h2>What I was confused about last week</h2><p>Part of Alexander&#8217;s thesis is that buildings with the 15 properties don&#8217;t just look pretty, they actually <em>work better</em>, on a practical, mechanical, and sociological level. I find this extremely surprising, as he did and as I expect you do. The warm fuzzies we get from the <em>appearance</em> of biological life can perhaps be attributed to our evolutionary heritage&#8212;our ancestors survived by seeking out places where plants and animals thrive, so we&#8217;ve inherited their affinity for the &#8220;character of nature.&#8221; It&#8217;s far less obvious why the same fifteen properties that characterize healthy biological life could predict the healthy functioning of a building &#8212;&nbsp;but it seems that they can.</p><p>Even more surprising is that the fifteen properties would appear in <em>healthy computer programs</em>, or in <em>healthy</em> <em>software companies</em>. These systems seem completely divorced from biological life, and indeed from physical reality. They seem to be about as far from nature as you can get.</p><p>And yet, I have found that the fifteen properties <em>do</em> appear in programs and software companies, and that when they appear it is a sign that the system is working well. When you grow software via an incremental, adaptive process, you get the fifteen properties, you get software that works better (for its users and developers), and you get the feeling of life. It happens consistently. Over and over, the fifteen properties show up in software systems that work well, and not in those that don&#8217;t work well. It seems, therefore, that there must be some common thread that links software systems, biological systems, and the built environment. But it is far from clear what that could be.</p><p>As I wrote in the previous post, something <em>really</em> strange is going on here.</p><p>&#8230;and by that, I of course mean that something completely natural, ordinary, and self-consistent is going on, but we don&#8217;t yet have the tools or the language to properly conceptualize it or work with it.</p><p>In the next post, I&#8217;ll publish my initial guesses as to a hypothesis that could go some way to explaining all of this. Stay tuned.</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/subscribe?"><span>Subscribe now</span></a></p><p>As always, I&#8217;d love to hear your questions and feedback, either as email replies or in the comments section on Substack.</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/p/the-christopher-alexander-post?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Share this post with your fellow humans.</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/p/the-christopher-alexander-post?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/p/the-christopher-alexander-post?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-1" href="#footnote-anchor-1" class="footnote-number" contenteditable="false" target="_self">1</a><div class="footnote-content"><p>As Alexander put it in one of his earlier works, <em>The Timeless Way of Building</em>.</p></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-2" href="#footnote-anchor-2" class="footnote-number" contenteditable="false" target="_self">2</a><div class="footnote-content"><p>One way to get life, even with upfront planning, is to remodel the building after you&#8217;ve lived in it for a while. This is the approach that Stewart Brand focuses on in &#8220;<a href="https://www.youtube.com/playlist?list=PLrg__Ji1S58TnecKCIFNskj-Q3P2NV0pw">How Buildings Learn</a>.&#8221;</p></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-3" href="#footnote-anchor-3" class="footnote-number" contenteditable="false" target="_self">3</a><div class="footnote-content"><p>Occasionally, this got him into trouble. In <em>The Nature of Order</em> he relates the story of a client who wanted a <a href="https://en.wikipedia.org/wiki/Terrazzo">terrazzo</a> floor in part of a house they were remodeling. In order to make the floor perfect, Alexander would have had to demolish the existing concrete slab and pour a new one. The client couldn&#8217;t afford it. So Alexander offered to install the terrazzo over the existing slab, warning the client that the terrazzo might sustain some cosmetic cracking as a result. The client agreed to this, and the project was completed within the budget. The terrazzo later cracked, as Alexander had predicted, and the client sued him over it. The judge ruled in the client&#8217;s favor, saying that Alexander should have refused to install the terrazzo if he couldn&#8217;t &#8220;do it right.&#8221; This is just one example of how Alexander&#8217;s agile philosophy clashed with prevailing assumptions about how architecture and construction should work.</p></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-4" href="#footnote-anchor-4" class="footnote-number" contenteditable="false" target="_self">4</a><div class="footnote-content"><p>In an earlier work, <em>The Timeless Way of Building</em>, he introduced the concept of life as &#8220;The Quality Without a Name,&#8221; explicitly refusing to define it exactly.</p></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-5" href="#footnote-anchor-5" class="footnote-number" contenteditable="false" target="_self">5</a><div class="footnote-content"><p>He emphasized that there was nothing special about the number 15, and that there were other ways of analyzing living structures that resulted in a different number, or a different categorization. But he was pretty sure that there were more than 2 or 3 ways for centers to create living structure, and nowhere near 100.</p></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-6" href="#footnote-anchor-6" class="footnote-number" contenteditable="false" target="_self">6</a><div class="footnote-content"><p>Starting points include <a href="https://www.patternlanguage.com/archive/ieee.html">Alexander&#8217;s keynote talk at OOPSLA &#8216;96</a>, Kent Beck&#8217;s <em><a href="https://www.oreilly.com/library/view/extreme-programming-explained/0321278658/">Extreme Programming Explained</a></em>, Richard Gabriel&#8217;s <em><a href="https://www.dreamsongs.com/Files/PatternsOfSoftware.pdf">Patterns of Software</a></em>, and the <a href="https://www.oreilly.com/library/view/design-patterns-elements/0201633612/">Gang of Four </a><em><a href="https://www.oreilly.com/library/view/design-patterns-elements/0201633612/">Design Patterns</a></em><a href="https://www.oreilly.com/library/view/design-patterns-elements/0201633612/"> book</a>.</p></div></div>]]></content:encoded></item><item><title><![CDATA[I am confused]]></title><description><![CDATA[A ramble]]></description><link>https://bensguide.substack.com/p/i-am-confused</link><guid isPermaLink="true">https://bensguide.substack.com/p/i-am-confused</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Fri, 19 Apr 2024 00:44:32 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>I am trying to figure out how <a href="https://benchristel.github.io/process-to-processes/Fundamentals/SoftwareSystems.html">my view of human/software systems as information flows among centers</a> can be reconciled with Christopher Alexander&#8217;s view of the built environment as a living whole made of smaller living wholes (centers). This is a crucial question that I&#8217;m hoping to address in the upcoming chapters of <em><a href="https://benchristel.github.io/process-to-processes/">Process to Processes</a></em>.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1" href="#footnote-1" target="_self">1</a></p><p>In my view, a &#8220;center&#8221; is like a little machine that transmits information. Every part of a human/software system, from entire departments of a software company, to teams, to people, to apps, to pixels on a screen and neurons in your brain, is a center. Every center is built from other centers, recursively, all the way down to the level of atoms (in physical systems) or bits (in software). The purpose of every center in the system is to communicate information: to get information to where it&#8217;s needed, when it&#8217;s needed, and thus create the value that sustains the center&#8217;s existence. The purpose of software development is to arrange and shape centers to make them, and the whole system, better at information transfer.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg" width="288" height="384" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1024,&quot;width&quot;:768,&quot;resizeWidth&quot;:288,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Steam Locomotive, St Jacobs, Ontario&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Steam Locomotive, St Jacobs, Ontario" title="Steam Locomotive, St Jacobs, Ontario" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F259ee485-ce0d-4fa8-b887-fdfbee938a6d_768x1024.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Practical living structure: centers working together in a steam locomotive. "<a href="https://www.flickr.com/photos/77483134@N00/1573131569">Steam Locomotive, St Jacobs, Ontario</a>" by <a href="https://www.flickr.com/photos/77483134@N00">Bobcatnorth</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/2.0/?ref=openverse">CC BY-NC-SA 2.0</a>.</figcaption></figure></div><p>In Alexander&#8217;s view, a center is not a machine. It does not exist for the purpose of information transfer or any other extrinsic purpose. He defines a center as any cohesive, identifiable structure in matter-imbued space. Each center is made of other centers (again recursively, down to the atomic scale) and defined by the geometric relationships among its sub-centers. Inherent in the structure of every center is a degree of what Alexander calls <em>life</em>. The relationships between centers can be &#8220;helping&#8221; or &#8220;harming;&#8221; centers gain more intense life when they are helped by other centers. A structure is thus living to the extent that it is made of living centers, and the centers are helping each other. People, like any other centers, become more &#8220;alive&#8221; when they are involved in a living structure, and we can feel this life within ourselves. The life that we feel in the presence of living structure is the reason we seek and create living structure.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg" width="1024" height="741" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:741,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;One of my favourite photo's of the holiday. There is so much going on in this little cafe scene with lots of different local characters.&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="One of my favourite photo's of the holiday. There is so much going on in this little cafe scene with lots of different local characters." title="One of my favourite photo's of the holiday. There is so much going on in this little cafe scene with lots of different local characters." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0fd7afa7-18c4-4058-a69a-027e36d825e6_1024x741.jpeg 1456w" sizes="100vw"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Life in a small caf&#233; in Vietnam. By <a href="https://www.flickr.com/photos/69706441@N03">PiktourUK</a>, licensed under <a href="https://creativecommons.org/licenses/by/2.0/?ref=openverse">CC BY 2.0</a>.</figcaption></figure></div><p>So: two worldviews, using the same terms, but utterly different. One cold, one warm.</p><p>You might say &#8220;so what? Ben&#8217;s just using the word &#8216;center&#8217; to mean something different from what C.A. meant, and that&#8217;s the end of it. There&#8217;s no relationship, necessarily, between the two ideas.&#8221;</p><p>The reason I&#8217;m not quite satisfied with that, nor ready to abandon the language of centers to talk about software design, is that human-software systems also have degrees of life, which can be felt by the people in the system. This degree of life happens to correlate &#8212; quite well, in my experience &#8212; with the efficiency of information transfer in the local system.</p><p>Christopher Alexander described fifteen geometric properties of living centers &#8212; properties that occur over and over again in systems where we feel life. He described how those properties could be generated by an iterative process in which centers &#8220;unfold&#8221; from undifferentiated space. I&#8217;ve applied those same methods to computer systems, <a href="https://github.com/benchristel/benchristel.github.io/wiki/FifteenPropertiesInSoftware">generating the same properties</a>, and discovered that <em>not only does the feeling of life in those systems become more profound, in exactly the way Alexander predicted, but that the systems work better, mechanically, as a result of my changes. They are better at information transfer.</em></p><p>So something <em>really</em> weird is going on.</p><p>I can think of three possibilities:</p><ol><li><p>My &#8220;centers&#8221; and Alexander&#8217;s centers are really two different concepts, and it&#8217;s just chance (or perhaps my wishful thinking) that causes the apparent consilience between them.</p></li><li><p>My &#8220;centers&#8221; are the same as Alexander&#8217;s centers, and Alexander&#8217;s centers really can, somehow, be thought of as machines that transmit information. The life we feel in a joyous town square or a beautiful building is really, somehow, related to the efficiency of the information transfer that happens there.</p></li><li><p>My &#8220;centers&#8221; are the same as Alexander&#8217;s centers, but my description of software centers as machines for information transfer is misguided. Instead, it&#8217;s more productive and humane to think of human/software systems as living wholes, in the same way that a building or a town is a living whole, and to say that a software system&#8217;s intrinsic purpose is to attain profound life.</p></li></ol><p>I am not ready to admit (1) (and it&#8217;s not just me &#8212; software people have been finding value in C.A.&#8217;s work <a href="https://www.patternlanguage.com/archive/ieee.html">for a long time</a>) but (2) and (3) just don&#8217;t seem to work. I do not understand how a building could reasonably be conceptualized as a machine for transmitting information &#8212; that&#8217;s not what a building <em>does,</em> dammit &#8212; and I also don&#8217;t see how it&#8217;s possible to create valuable software while focusing on life at the expense of information transfer. A software system is neither shelter nor a work of art.</p><p>Is there a (4)? An idea occurs to me as I write this. Something always bothered me about the fourth book of C.A.&#8217;s opus <em>The Nature of Order, </em>titled <em>The Luminous Ground</em>. It tries to explain what our experience of life in a system has to do with the geometry of that system, but IMO it fails to do so in terms that I can grapple with as a scientifically-minded person. Brutally summarized: C.A. says that a) people are centers b) centers create life in each other c) therefore geometric centers in a building create life in people. However, his explanation does not satisfy me. I have the feeling that it is punning, playing tricks with semantics, playing on our desire to make it make sense. But information transfer might go some way to explaining it. Isn&#8217;t the feeling that we get from a great work of art the result of (visual) information being transmitted?</p><p>But no. It doesn&#8217;t work for computers. A work of art is not a user interface. A user interface is not a work of art. And the centers in art and architecture don&#8217;t transmit information to <em>each other</em>, the way the centers in a software system do.</p><p>I remain confused.</p><p>Perhaps you can help me get un-confused? I would love to hear your thoughts, either by email (if you&#8217;re a subscriber you can just hit reply) or in the comments section on Substack. And if you know someone who knows something about Christopher Alexander, maybe forward this on to them?</p><p>I hope you&#8217;re doing well.</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/p/i-am-confused?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/p/i-am-confused?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p><p></p><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-1" href="#footnote-anchor-1" class="footnote-number" contenteditable="false" target="_self">1</a><div class="footnote-content"><p>Don&#8217;t worry, if I have to skip it, I&#8217;ll skip it, and get on with the rest of the book.</p><p></p></div></div>]]></content:encoded></item><item><title><![CDATA[Techniques, Principles, and Views]]></title><description><![CDATA[Hello!]]></description><link>https://bensguide.substack.com/p/techniques-principles-and-views</link><guid isPermaLink="true">https://bensguide.substack.com/p/techniques-principles-and-views</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Sun, 14 Apr 2024 22:56:19 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F795f2059-5c73-4321-81ac-889d933f6262_677x665.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>Hello! You&#8217;re reading Ben&#8217;s Guide to Software Development, the weekly bulletin where I post draft chapters of my upcoming book, <em>Process to Processes</em>. You can read the whole draft (at least, what I&#8217;ve written so far) by clicking this button:</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://benchristel.github.io/process-to-processes/&quot;,&quot;text&quot;:&quot;Read \&quot;Process to Processes\&quot; Online&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a class="button primary button-wrapper" href="https://benchristel.github.io/process-to-processes/"><span>Read "Process to Processes" Online</span></a></p><p>&#8230;and if you&#8217;d like to get notified of updates to to the book, you can sign up with your email below:</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/subscribe?"><span>Subscribe now</span></a></p><h2>What I Learned This Week: Example Blocks</h2><p>A certain dilemma has been bothering me recently. I want to include a lot of examples in the book, because there&#8217;s evidence that people learn best from seeing lots of high-quality examples.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1" href="#footnote-1" target="_self">1</a> But examples take up space, and break up the flow of the text. Readers who are already familiar with a topic might prefer to skip the examples, but the nature of examples is to sprawl, and that makes them difficult to skip.</p><p>This week, I came up with a solution to the dilemma. It&#8217;s nothing revolutionary, but I suppose that&#8217;s the best kind of revolutionary.</p><p>The solution is to put examples in a collapsible <code>&lt;details&gt;</code> element. This nifty bit of HTML looks like this:</p><pre><code>&lt;details&gt;
  &lt;summary&gt;Examples&lt;/summary&gt;

  &lt;p&gt;Our first example is...&lt;/p&gt;

&lt;/details&gt;</code></pre><p>When the page loads, only the <code>summary</code> is shown. You can click on it to expand or collapse the whole <code>details</code> block.</p><p>This approach isn&#8217;t directly portable to dead trees, of course, but since I&#8217;m already embedding videos in the book&#8230; &#8220;returning were as tedious as go o&#8217;er.&#8221;</p><p>You can see an example of examples in the chapter on <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Principles.html">Principles</a>.</p><h2>Techniques, Principles, and Views</h2><p>Today&#8217;s post includes three short chapters from <em>Process to Processes</em>, introducing the concepts of <em>techniques, principles, and views</em>. Here are the chapters:</p><div><hr></div><h1>Techniques</h1><p>This book consists mainly of <strong>techniques</strong> for software development. A technique is:</p><ul><li><p>something you do</p></li><li><p>...to solve a problem or pursue an opportunity</p></li><li><p>...in a particular context.</p></li></ul><p>Examples of techniques in this book</p><ul><li><p><a href="https://benchristel.github.io/process-to-processes/Fundamentals/SayWhy.html">Say Why</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/Fundamentals/Trust.html">Build Trust</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/PersonalProjects.html">Play with Personal Projects</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/StartingAProject/WalkingSkeleton.html">Start with a Walking Skeleton</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/ChangingOneFunction/PairDelimiters.html">Pair Delimiters</a></p></li></ul><h2>Tools, Not Rules</h2><p>A common mistake is to confuse techniques with &#8220;best practices&#8221; &#8212; things you should always (or almost always) be doing. This isn&#8217;t how I think of the techniques in this book. Techniques are tools, not rules. Each technique helps to resolve some of the <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Forces.html">Forces</a> that often arise in software systems, but every system is different. I see some of the techniques as reasonable defaults &#8212; approaches to try first if you don&#8217;t know what else to do &#8212; but all of them are context-dependent and none are required.</p><p>If you treat techniques as &#8220;best practices,&#8221; you&#8217;re likely to fall into the same trap that I have seen too many teams get caught in &#8212; you will end up creating solutions that are far more complex than required, and even you will find them <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Feeling.html">Alienating</a> and hard to use.</p><h2>Choosing Techniques</h2><p>Which technique should you apply at any given moment? As I will explain in the chapter on <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Judgment.html">Judgment</a>, answering this question is the essence of a software developer&#8217;s job, and there&#8217;s only so much guidance I can give you. Still, this book can help in a few ways.</p><p>First, I have marked the chapter headings of &#8220;default&#8221; techniques with a star (&#10021;). I recommend trying these techniques out, and discarding them only when you have demonstrated that they don&#8217;t apply to your situation.</p><p>Second, the principles and views in this book can help you evaluate each technique in your context to figure out if it applies. This approach becomes intellectually tractable once you have a diverse array of techniques committed to memory. Once you&#8217;ve practiced the techniques in this book, relevant techniques will pop effortlessly into your mind whenever you see a problem or an opportunity. Your job then becomes to apply the technique (or in some cases, just to imagine applying it) and to <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Judgment.html">Judge</a> the costs and benefits. If the benefits outweigh the costs, use the technique; if not, don&#8217;t.</p><h1>Principles</h1><p><strong>Principles</strong> are idea-generators for coming up with new <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Techniques.html">Techniques</a>. If we&#8217;re in a situation where our known techniques don&#8217;t apply, we can use principles to invent new techniques that are suited to that context.</p><p>Examples of principles in this book</p><ul><li><p><a href="https://benchristel.github.io/process-to-processes/Fundamentals/Empiricism.html">Empiricism</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/Fundamentals/Judgment.html">Judgment</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/Fundamentals/FastFeedback.html">FastFeedback</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/Fundamentals/SmallSteps.html">SmallSteps</a></p></li></ul><p>Each principle prompts you to ask a different &#8220;how might we&#8221; question. &#8220;How might we <em>take smaller steps?</em>&#8221; &#8220;How might we <em>get feedback faster?</em>&#8221; &#8220;How might we <em>avoid breaking changes?</em>&#8221; &#8220;How might we <em>move authority to information?</em>&#8221; &#8220;How might we <em>reduce inventory?</em>&#8221; By brainstorming answers to these questions, you can discover new techniques. You can also assess existing techniques to see if they might be the answer to the question.</p><h2>Where Principles Come From</h2><p>Principles are derived inductively from clusters of related techniques. The process goes like this:</p><ul><li><p>Look for similarities between techniques</p></li><li><p>Infer a principle that explains the similarities</p></li><li><p>Test the principle by using it to generate new techniques. A principle is useful to the degree that it helps you discover useful techniques.</p></li></ul><p>This process echoes the scientific method, which we&#8217;ll see shortly in the chapter on <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Empiricism.html">Empiricism</a>.</p><p><em>Wait a minute</em>, you&#8217;re probably saying. <em>Do techniques generate principles, or do principles generate techniques</em>? I can only answer &#8220;yes.&#8221; Principles and techniques work together. Like so many other symbiotic partners in the world of software, they bootstrap each other into existence.</p><h1>Views</h1><blockquote><p>Point of view is worth 80 IQ points.</p><p>&#8212;<a href="https://quoteinvestigator.com/2018/05/29/pov/">Alan Kay</a></p></blockquote><p>Supporting the <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Techniques.html">Techniques</a> in this book are a number of <strong>views</strong>. A view is a way of looking at things. To put it another way, a view is what you see when you look at some part of the world from a particular metaphorical angle.</p><p>Views matter because they give us an effective way of seeing. Like an architect&#8217;s plan, a view describes the world in terms that clarify how we might act on it via techniques.</p><p>However, just as the plan of a building doesn&#8217;t tell us what it will look like from the front, a view isn&#8217;t the whole picture. In order to build mental models that capture all the facets of reality, we need to combine multiple views.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F795f2059-5c73-4321-81ac-889d933f6262_677x665.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F795f2059-5c73-4321-81ac-889d933f6262_677x665.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F795f2059-5c73-4321-81ac-889d933f6262_677x665.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F795f2059-5c73-4321-81ac-889d933f6262_677x665.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F795f2059-5c73-4321-81ac-889d933f6262_677x665.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F795f2059-5c73-4321-81ac-889d933f6262_677x665.png" width="405" height="397.821270310192" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/795f2059-5c73-4321-81ac-889d933f6262_677x665.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:665,&quot;width&quot;:677,&quot;resizeWidth&quot;:405,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F795f2059-5c73-4321-81ac-889d933f6262_677x665.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F795f2059-5c73-4321-81ac-889d933f6262_677x665.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F795f2059-5c73-4321-81ac-889d933f6262_677x665.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F795f2059-5c73-4321-81ac-889d933f6262_677x665.png 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Orthographic multiview projection of a simple house, showing the plan and two elevations. From <em>Radford&#8217;s Mechanical Drawing</em> (1912).</figcaption></figure></div><p>Accordingly, I often use collections of multiple views in this book when investigating complex topics. For instance, the next section (<a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/index.html">SoftwareDevelopment</a>) opens with a collection of views of programming. Sometimes I present only one view of a topic, e.g. <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Centers.html">Centers</a>. This is generally not because that view is the only useful one, but because the other views are common knowledge and I don&#8217;t think there&#8217;s a need to reiterate them.</p><p>In any case, it&#8217;s important to remember that views are not <em>true</em>. They are, necessarily, simplified descriptions of reality, that can&#8217;t account for every complication. The question you should ask of a view is not &#8220;is it true&#8221; but &#8220;when is it useful?&#8221;</p><p>For example, I might show you a program and say &#8220;this program has no <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Views.html#">State</a>.&#8221; You might protest &#8220;but it caches the result of some calculations, and those caches have state.&#8221; &#8220;Well, if we just want to describe the program&#8217;s <a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/StructureAndBehavior.html">Behavior</a>, we can pretend it has no state.&#8221; &#8220;But the caches affect performance.&#8221; &#8220;Well, for now we can pretend computers are infinitely fast.&#8221; Views are all about simplifying things in this way &#8212; removing detail until we are left with only what is essential to serve our current purpose.</p><h2>Views Versus Models</h2><p>A <em>mental model</em> is a holistic understanding of a system. Mental models are what allow us to make predictions about the future. They let us simulate the system in our heads, and imagine what it will do in response to some outside stimulus or change.</p><p>A weakness of mental models is that they can never be fully explicated or communicated from person to person&#8212;a point that Peter Naur makes well in his essay <a href="https://gwern.net/doc/cs/algorithm/1985-naur.pdf">&#8220;Programming as Theory Building.&#8221;</a> He uses the word <strong>theory</strong> where I use &#8220;mental model&#8221;, but it&#8217;s the same idea.</p><p>Indeed, I would go so far as to say that a mental model is not <em>built</em>, but <em>grown</em>. It is rooted in a particular mind, developed through the interaction of that mind with the world, and can never be moved.</p><p>Because we can&#8217;t directly communicate our mental models to each other, we need views. Views are more teachable than mental models&#8212;we can explain how to obtain them, draw pictures representing them, and so forth. The downside of views is that, in general, no single view presents a comprehensive picture of the system it describes. But by combining many complementary views together, we can form working mental models much more easily.</p><h2>Views and Techniques</h2><p>Views and techniques go together. A common saying, often attributed to Abraham Maslow (though he never said it in so many words) is &#8220;if all you have is a hammer, all you will see are nails.&#8221; But the converse is also true: if you see the world in terms of nails, the only tool you will be able to imagine is a hammer. The diversity of views presented in this book is necessary to support the many different techniques we will cover.</p><p>Here&#8217;s an example of views, techniques, and principles all working together. Say you&#8217;re working on some code that&#8217;s difficult to understand: you have to jump around between many different files and functions to figure out what it&#8217;s doing. The view DependencyGraph gives you a way to make sense of the code in spite of its complexity. The principle ShallowHierarchies builds on this view, identifying a specific property that makes the code frustrating to work with &#8212; the dependency graph is too deep. Techniques like InlineFunction and InvertControl apply the principle, giving you concrete ways to fix the problematic code.</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/p/techniques-principles-and-views?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Do you know someone who would like this?</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/p/techniques-principles-and-views?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/p/techniques-principles-and-views?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><p></p><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-1" href="#footnote-anchor-1" class="footnote-number" contenteditable="false" target="_self">1</a><div class="footnote-content"><p><a href="https://youtu.be/FKTxC9pl-WM">Kathy Sierra, &#8220;Making Badass Developers</a>&#8221;</p></div></div>]]></content:encoded></item><item><title><![CDATA[Part I: Fundamentals]]></title><description><![CDATA[Hello!]]></description><link>https://bensguide.substack.com/p/part-i-fundamentals</link><guid isPermaLink="true">https://bensguide.substack.com/p/part-i-fundamentals</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Sat, 06 Apr 2024 22:40:40 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>Hello! You&#8217;re reading Ben&#8217;s Guide to Software Development, the weekly bulletin where I post draft chapters of my upcoming book, <em>Process to Processes</em>. You can read everything I&#8217;ve written so far by clicking this button:</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://benchristel.github.io/process-to-processes/&quot;,&quot;text&quot;:&quot;Read \&quot;Process to Processes\&quot; Online&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://benchristel.github.io/process-to-processes/"><span>Read "Process to Processes" Online</span></a></p><p>Now that I have a pretty solid draft of <a href="https://bensguide.substack.com/p/process-to-processes-the-preface">the Preface</a>, I&#8217;ve started fleshing out the first section of the book proper. I&#8217;m calling it &#8220;Fundamentals&#8221; instead of &#8220;Introduction&#8221; because I suspect no one reads introductions, and this initial section might be the most important one in the book &#8212; in the sense that you can derive everything else from it, with a little effort (okay, a lot of effort).</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg" width="600" height="315" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:315,&quot;width&quot;:600,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;CDN media&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="CDN media" title="CDN media" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5f211f4e-66ce-41cd-b1d7-8e877b1c5a3b_600x315.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">Interior of the great hall of the Eishin high school campus, by Christopher Alexander</figcaption></figure></div><p>Today&#8217;s missive is the two-page summary that begins the &#8220;Fundamentals&#8221; section. Fans of the architect Christopher Alexander will no doubt recognize his influence here. The idea of Forces is straight out of <em>Notes on the Synthesis of Form</em>; Centers and Feeling are from <em>The Nature of Order</em>. The principles of Small Steps, Fast Feedback, Adaptation, and Autonomy pervade his work. If you&#8217;ve read Alexander, maybe you can let me know how well I&#8217;m presenting his ideas? And if you&#8217;ve never heard of him, I&#8217;d love to get your perspective on whether my hasty summary of 4,000 pages of his writing makes any sense. Let me know in the comments on Substack, or in reply to this email.</p><p>One of my goals for this section is to broker peace (or at least a truce) between software developers and management. I truly believe that human-centered ways of making software are in everyone&#8217;s best interests<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1" href="#footnote-1" target="_self">1</a> and the sooner we all agree on that the better off we&#8217;ll be. So if you&#8217;re a manager: do I at least hint at a compelling business case for this? Is there anything you find alarming? I hope you&#8217;ll let me know.</p><div><hr></div><h1>Fundamentals</h1><p>The subsequent sections of this book will interest different audiences. Programmers may want to start with <a href="https://benchristel.github.io/process-to-processes/ChangingOneFunction/index.html">Changing Code Within One Function</a>; managers with <a href="https://benchristel.github.io/process-to-processes/WorkingOnATeam/index.html">Working on a Team</a>; UX designers with <a href="https://benchristel.github.io/process-to-processes/Fundamentals/index.html#">UserInterfaces</a>. However, everyone should first read this section, <strong>Fundamentals</strong>. Otherwise, the rest of the book will probably be inscrutable.</p><p>We&#8217;ll start with an overview of the types of information you&#8217;ll find in this book &#8212; <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Techniques.html">Techniques</a>, <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Principles.html">Principles</a>, and <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Views.html">Views</a>.</p><p>Then we&#8217;ll dig into the foundations of empirical software development: <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Empiricism.html">Empiricism</a> informed by <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Judgment.html">Judgment</a>, an ability to <a href="https://benchristel.github.io/process-to-processes/Fundamentals/ExplainWhy.html">ExplainWhy</a> we do things, and a healthy irreverence toward tools, techniques, and methods &#8212; <a href="https://benchristel.github.io/process-to-processes/Fundamentals/ToolsNotRules.html">ToolsNotRules</a>.</p><p>Next, we will look at the constraints that shape every software project, starting with our own inherent limitations and abilities (<a href="https://benchristel.github.io/process-to-processes/Fundamentals/Humans.html">Humans, Not Humanoids</a>). We&#8217;ll learn to see our human-computer <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Systems.html">Systems</a> as <a href="https://benchristel.github.io/process-to-processes/Fundamentals/InformationFlows.html">InformationFlows</a> among <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Centers.html">Centers</a>, and we&#8217;ll see how friction in those information flows reveals <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Conflict.html">Conflict</a> between the <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Forces.html">Forces</a> that shape the system.</p><p>We&#8217;ll then turn our attention to the process of improving the system. A healthy system runs smoothly and efficiently; healing the system means removing resistance from <a href="https://benchristel.github.io/process-to-processes/Fundamentals/InformationFlows.html">InformationFlows</a>. To do this, we must find ways to resolve the <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Conflict.html">Conflicts</a> between <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Forces.html">Forces</a>. But this requires very fine <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Adaptation.html">Adaptation</a> of every part of the system to its context, and that is difficult to achieve. The forces involved are usually so numerous and interrelated that analytical approaches to balancing them are prohibitively expensive.</p><p>The solution is to leverage one of our <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Humans.html">Human</a> strengths: the massively parallel data-processing ability we call <a href="https://benchristel.github.io/process-to-processes/Fundamentals/index.html#">Feeling</a>. By <em>taking part</em> in the system &#8212; by actually being <em>in</em> an information flow, or else working very closely with the people who <em>are</em> in it &#8212; we can immediately sense the pain points. If we can then prototype changes to the system and experience the results more or less immediately &#8212; <a href="https://benchristel.github.io/process-to-processes/Fundamentals/index.html#">SmallSteps</a>, <a href="https://benchristel.github.io/process-to-processes/Fundamentals/index.html#">FastFeedback</a> &#8212; we can start to improve things very quickly.</p><p>To be able to do this &#8212; and to do it over and over, rapidly enough to keep up with the system as it evolves &#8212; the people who are actually <em>in</em> an information flow must be empowered to improve it. In other words, we need <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Autonomy.html">Autonomy</a>, the freedom to &#8220;think globally and act locally.&#8221;</p><p>But of course autonomy isn&#8217;t enough. We also need the skills and wisdom to act effectively, and avoid damaging the system. Otherwise, autonomy will only sow chaos. Autonomy does not mean &#8220;move fast and break things,&#8221; as Mark Zuckerberg memorably put it. Rather, we want to move gracefully and mend things.</p><div class="pullquote"><p>Move gracefully and mend things.</p></div><p>How can we gain the skills we need to do this? We can&#8217;t take years off to study. We have to learn on the job. But we also can&#8217;t transform our workplaces from zero to &#8220;full autonomy&#8221; overnight. If, by some miracle, we manage to convince our employers to let us do so, we&#8217;ll almost certainly make a mess, and they won&#8217;t give us a second chance.</p><p>The Gordian knot may seem firmly tied, but there is a loose end we can pull at. The reality is that we already have a certain amount of autonomy &#8212; in the act of typing code, if nothing else. We can use that to bootstrap the system to higher levels of autonomy, by improving what we can and reliably delivering results. Success earns <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Trust.html">Trust</a>; we can turn increased trust into increased autonomy. As we grow in our abilities, untangling larger and larger loops of the system, our transformations will extend to architecture, team structure, project management, user interface design &#8212; and perhaps beyond.</p><div class="subscription-widget-wrap-editor" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Subscribe to Ben&#8217;s Guide to get notified when I post new chapters:</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><h2>Table of Contents</h2><ul><li><p>Techniques</p></li><li><p>Principles</p></li><li><p>Views</p></li><li><p>Principle: Empiricism</p></li><li><p>Principle: Judgment</p></li><li><p>Technique: Say Why</p></li><li><p>View: Tools, Not Rules</p></li><li><p>View: Humans, Not Humanoids</p></li><li><p>View: Systems</p></li><li><p>View: Information Flows</p></li><li><p>View: Centers</p></li><li><p>View: Forces, Not Requirements</p></li><li><p>View: Conflict</p></li><li><p>Principle: Adaptation</p></li><li><p>Principle: Fast Feedback</p></li><li><p>Principle: Small Steps</p></li><li><p>Principle: Feeling</p></li><li><p>Principle: Autonomy</p></li><li><p>Technique: Build Trust</p></li></ul><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/p/part-i-fundamentals?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Do you know someone who would like this?</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/p/part-i-fundamentals?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/p/part-i-fundamentals?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><p></p><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-1" href="#footnote-anchor-1" class="footnote-number" contenteditable="false" target="_self">1</a><div class="footnote-content"><p> &#8230;subject to some caveats which I might discuss in a future post. Basically, a lot of software gets funded in exploitative, dare I say scammy ways. (Often it&#8217;s investors who are getting scammed.) Better engineering isn&#8217;t going to fix that; indeed, I think it&#8217;s probably incompatible with it. Scams rely on information asymmetry; improving information flows runs directly counter to that.</p><p></p></div></div>]]></content:encoded></item><item><title><![CDATA[Process to Processes: The Preface]]></title><description><![CDATA[What? Who? How?]]></description><link>https://bensguide.substack.com/p/process-to-processes-the-preface</link><guid isPermaLink="true">https://bensguide.substack.com/p/process-to-processes-the-preface</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Tue, 02 Apr 2024 01:41:19 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/w_256,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8967e7bd-33f4-4513-a9ac-79b9eba3b0f1_144x144.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>Hello! You&#8217;re reading Ben&#8217;s Guide to Software Development, the weekly bulletin where I post excerpts from drafts of my upcoming book, <em>Process to Processes</em>.<br><br>The initial chapters of the book are coming together, after a couple weeks of fiddling. Below is my current draft of the preface. As always, I welcome your feedback, which you can send in reply to this email or in the comments section on substack.com.</p><p>My goal for the preface is to get readers excited about the book, to acknowledge what they bring to the table, and to set reasonable expectations. If I&#8217;m not doing those things, I hope you&#8217;ll let me know.</p><div><hr></div><h1>What This Book Is About</h1><p>This book is for software developers who want to make better things in better ways.</p><p>It covers all aspects of software development, from tiny details of code all the way up to team structure, project management, and user experience design.</p><p>If you are interested in making software that is kinder, sturdier, more deeply felt, and better fit to your hand, eye, and mind, this book is for you.</p><p>If you just want to feel less stressed at work, I think you&#8217;ll also find something of value here.</p><p>This book will give you:</p><ul><li><p>Better <strong>views</strong>: more realistic, useful, and humane ways of seeing the systems we inhabit.</p></li><li><p>Better <strong>techniques</strong>: ways of working that provide ease, efficiency, and control.</p></li><li><p>Generative <strong>principles</strong> that help you invent new techniques to fit your situation.</p></li></ul><p>...all in service of providing <strong>mutually beneficial goods</strong> to you, your clients, your teammates, and the users of your software:</p><ul><li><p>Software that does what you meant it to do,</p></li><li><p>that is satisfying to work on</p></li><li><p>and can be improved at a steady, predictable pace,</p></li><li><p>profitably,</p></li><li><p>forever.</p></li></ul><h2>Why &#8220;Process to Processes?&#8221;</h2><p>The title of this book refers to the two kinds of process that bookend software development. On one end, we have the <em>development process</em> that people go through as they learn about the system, make changes, and observe the results. On the other end, we have the <em>computational processes</em> that run on computers&#8212;the things that are listed by the <code>ps</code> command on Unix systems.</p><p>This book will give you a complete picture of what happens during software development. It maps paths that lead all the way from one &#8220;process&#8221; to the other&#8212;and back again.</p><h1>What This Book Is Not</h1><p>Receiving advice &#8212; especially advice about how to do our jobs, i.e. the work that sustains our existence &#8212; can feel like a threat. I know it does to me. Whenever I encounter a new expert opinion on software development, the hairs on my neck bristle as I brace myself to read it. <em>Are they going to say I&#8217;m doing it wrong?</em></p><p>Therefore, I want to start by saying:</p><p>If you are shipping working code, you are not doing it wrong.</p><ul><li><p><em>Something</em> you&#8217;re doing is working.</p></li><li><p>Your feelings about your work are valid.</p></li><li><p>The things you&#8217;d like to improve about your work are worth improving, and maybe this book can help you with that.</p></li><li><p>What I really want is for you to feel confident and satisfied writing great software. If something in this book doesn&#8217;t help you do that, don&#8217;t do it.</p></li></ul><p>This book presents many ideas that are somewhat hyped-up and controversial: <a href="https://benchristel.github.io/process-to-processes/Preface/WhatNot.html#">FunctionalProgramming</a>, <a href="https://benchristel.github.io/process-to-processes/Preface/WhatNot.html#">ObjectOrientedProgramming</a>, <a href="https://benchristel.github.io/process-to-processes/Preface/WhatNot.html#">TestDrivenDevelopment</a>, and <a href="https://benchristel.github.io/process-to-processes/Preface/WhatNot.html#">AlgebraicTypes</a>, to name a few. However, I am not going to argue strenuously for any particular practice. Instead, I hope to show you how all these seemingly disparate pieces fit together into a kaleidoscopic yet coherent whole.</p><p>This unification seems to me to be long overdue. The more I read and listen to software development experts of the last 60-ish years, the more I am impressed by the deep similarities between their superficially different approaches. My goal with this book is not to present yet another theory of software development, but to show you how the good ideas already out there might, ultimately, just be different facets of what we knew all along.</p><h1>Who Should Read This Book</h1><p><em>Process to Processes</em> is addressed to professional software developers with at least a year or two of experience in application development. Managers and UX designers might find parts of it interesting as well.</p><p>The code examples are mostly in JavaScript and TypeScript. However, the programming ideas in the book apply across languages. Specifically, they apply to the extent that your language supports:</p><ul><li><p>An interpreter or fast, incremental compiler</p></li><li><p>Higher-order first-class functions</p></li><li><p>Mutability &#8212; e.g. variables that can be reassigned</p></li><li><p>A convenient, performant implementation of immutable data structures</p></li><li><p>Algebraic types</p></li><li><p>A sane package manager for installing dependencies</p></li><li><p>Coroutines or generator functions</p></li><li><p>Exceptions</p></li></ul><p>Your language doesn&#8217;t need to have all of these features, but they all help. I have successfully applied the techniques in this book in Ruby, Java, JavaScript, TypeScript, Go, Scala, and C++. My friends tell me that Swift, Rust, Kotlin, and Elixir also work.</p><p>If you work in a language very different from any of these, proceed with caution.</p><h1>How to Use This Book</h1><p>Real talk: there&#8217;s only so much you can learn by reading a book.</p><p>Much of what I know of <strong>technique</strong> is muscle memory&#8212;habit built through repetition. It takes time and practice to learn that, and reading a book is not going to make it happen.</p><p>Likewise, the mental models of software I&#8217;ve built from various <strong>views</strong> are unserializable, untransmittable. I can&#8217;t dump them out of my brain and load them into yours.</p><p>What I <em>can</em> do is offer you a navigational toolkit: a map and a compass to help you find your way. I can give you the basic instructions for techniques. I can tell you where to stand to see a particular view of your system.</p><p>But <em>you</em> have to do the work of learning. You have to practice. You have to write code (lots of it). You have to reflect on what you write. You have to seek feedback from other people. And you have to read other people&#8217;s code, make sense of it, and evaluate what&#8217;s good and bad about it.</p><p>Ultimately, you have to assess whether the views and techniques in this book are applicable to you and your situation or not.</p><p>Refer to this book as you would to a map. A map can&#8217;t tell you everything about the terrain you&#8217;re going to travel through, nor can it prepare you for everything you might encounter on the journey. But it can help you orient yourself&#8212;that is, figure out where you are and where you might go next.</p><p>As you travel through the landscape of software development, I hope this book inspires &#8220;aha!&#8221; moments of sudden recognition. <em>So</em> that&#8217;s <em>what Ben was talking about</em>. When you have a moment like that, you&#8217;ll know you really <em>get</em> it. You&#8217;ve <em>grokked</em> it.</p><p>The insights behind these &#8220;aha&#8221; moments are something you&#8217;ll gain throughout your career whether or not you read this book. But the book will help you recognize them for what they are and make the most of them.</p>]]></content:encoded></item><item><title><![CDATA[Handel, and Out of the Software Crisis]]></title><description><![CDATA[I wrote very little this week, but if you&#8217;re looking for something to read, Baldur Bjarnason&#8217;s book, Out of the Software Crisis, is on sale this weekend. It covers many of the same topics I&#8217;m planning to cover in Process to Processes (though from a slightly different angle), and it moves at a good clip.]]></description><link>https://bensguide.substack.com/p/handel-and-out-of-the-software-crisis</link><guid isPermaLink="true">https://bensguide.substack.com/p/handel-and-out-of-the-software-crisis</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Sat, 30 Mar 2024 22:01:04 GMT</pubDate><enclosure url="https://substackcdn.com/image/youtube/w_728,c_limit/IF62rRaQmsM" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>I wrote very little this week, but if you&#8217;re looking for something to read, Baldur Bjarnason&#8217;s book, <em><a href="https://www.baldurbjarnason.com/2024/the-software-crisis-easter-sale/">Out of the Software Crisis</a></em><a href="https://www.baldurbjarnason.com/2024/the-software-crisis-easter-sale/">, is on sale this weekend</a>. It covers many of the same topics I&#8217;m planning to cover in <em><a href="https://benchristel.github.io/process-to-processes/">Process to Processes</a></em> (though from a slightly different angle), and it moves at a good clip.</p><p>In unrelated news, I stumbled across a performance of Handel&#8217;s <em>Alexander&#8217;s Feast</em> that blew me away. I love that the internet makes experiences like this possible. And I love that even amid all the dreck that YouTube&#8217;s algorithms want to feed you, gems like this still exist.</p><div id="youtube2-IF62rRaQmsM" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;IF62rRaQmsM&quot;,&quot;startTime&quot;:&quot;10m41s&quot;,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/IF62rRaQmsM?start=10m41s&amp;rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><p></p>]]></content:encoded></item><item><title><![CDATA[Empiricism]]></title><description><![CDATA[You&#8217;re reading Ben&#8217;s Guide to Software Development.]]></description><link>https://bensguide.substack.com/p/empiricism</link><guid isPermaLink="true">https://bensguide.substack.com/p/empiricism</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Tue, 26 Mar 2024 00:49:54 GMT</pubDate><enclosure url="https://substackcdn.com/image/youtube/w_728,c_limit/EYPapE-3FRw" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>You&#8217;re reading Ben&#8217;s Guide to Software Development. This post is a draft chapter from my upcoming book, <em>Process to Processes.</em></p><p>You can click the button below to read a draft of the whole book (well, at least the parts I&#8217;ve written), in all its horrific messy glory:</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://benchristel.github.io/process-to-processes/&quot;,&quot;text&quot;:&quot;Read \&quot;Process to Processes\&quot; online&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://benchristel.github.io/process-to-processes/"><span>Read "Process to Processes" online</span></a></p><div><hr></div><h1>Empiricism</h1><p>This book describes an empirical approach to software &#8212; that is, one based on observation and experience, rather than made-up images of how things should be. The empirical thread runs throughout the book, showing up explicitly in techniques like <a href="https://benchristel.github.io/process-to-processes/Fundamentals/ExplainWhy.html">ExplainWhy</a>, <a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/FundamentalProcess.html">FundamentalProcess</a>, <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Empiricism.html#">TestDrivenDevelopment</a>, <a href="https://benchristel.github.io/process-to-processes/StartingAProject/WalkingSkeleton.html">WalkingSkeleton</a>, and <a href="https://benchristel.github.io/process-to-processes/WorkingOnATeam/ExploratoryTesting.html">ExploratoryTesting</a>, and in views like <a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/Programming/FiguringThingsOut.html">FiguringThingsOut</a> and <a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/Controllability.html">Controllability</a>.</p><h2>Empirical &#8800; Quantified</h2><p>Often, people assume that empirical methods only apply to what can be quantified, and that anything unquantifiable cannot be measured or improved. I hope to show in this book that this is far from true. We can apply empirical thinking to unquantifiable matters quite easily, using <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Empiricism.html#">RelativeAssessment</a> of changes made by <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Empiricism.html#">SmallSteps</a>.</p><h2>The Scientific Method</h2><p>It&#8217;s a sad commentary on the state of the U.S. education system that I feel the need to explain the scientific method in a book for technology professionals. Yet, given that I myself had to learn it from <a href="https://hpmor.com/">a Harry Potter fanfic</a>, it is probably worth spending some words on.</p><p>The purpose of science is to develop <strong>theories</strong> (or <em>models</em>) of how things work. The purpose of a theory is to make predictions. A good theory is one that lets us predict the results of our actions. Having good, predictive theories about a system is essential if you want to <em>use</em> that system for something. Without a theory of the system, you have no basis for planning your actions within it, because you have no way of predicting what the results of those actions might be.</p><p>The formal scientific method is not the only way of getting theories. Theories that are good enough to be practical can be developed without it. However, the formal method increases the precision of the theories we can create.</p><p>Simplified to its bare essentials, the scientific method works like this:</p><ol><li><p>Observe the system of interest. (Don&#8217;t put too much effort into this, though, or step 2 will be harder.)</p></li><li><p>Come up with a set of general rules that accounts for your observations. Keep it simple. Make sweeping generalizations; admit no special cases. This provisional explanation is a <em>hypothesis</em>.</p></li><li><p>Imagine some of the ways in which your hypothesis might be wrong&#8212;i.e. might make inaccurate predictions.</p></li><li><p>Do experiments to try to prove that your hypothesis is, in fact, wrong. To do an experiment, first use the hypothesis to predict the result of some action. Then do the action and see if the result matches the prediction. If it doesn&#8217;t, the hypothesis is wrong (assuming you really performed the action you thought you did).</p></li><li><p>Once you&#8217;ve disproved the hypothesis, go back to step 2 with your new observations in hand, and repeat.</p></li></ol><p>What scientists actually do is quite a bit more complicated than this, of course, but this simplified view will work for now. In particular, note that I am glossing over the use of statistical methods in science &#8212; I assume that each experiment can definitively reject a hypothesis. That simplification works for our context. In this book, our experiments will be definitive.</p><p>A few points about this process warrant further comment:</p><p>First, note that in step 2, we want to create the <em>simplest</em> hypothesis that fits the facts. We do this for a couple reasons:</p><ul><li><p>Simple hypotheses are easier to understand than complex ones.</p></li><li><p>Simple hypotheses are easier to disprove than complex ones. The whole process can go faster when we make simple hypotheses.</p></li></ul><p>It&#8217;s always possible to complicate a hypothesis, e.g. by tacking on extra ideas that don&#8217;t affect the result. <a href="https://en.wikipedia.org/wiki/Russell's_teapot">Russell&#8217;s teapot</a> is a humorous example. There is thus no limit to how complex we can make a hypothesis, but there is a limit to how simple we can make it if it is to account for all the observed facts. In science, as in computing, we always look for ways to simplify things &#8212; though we must also be on the lookout for reasons to complicate them.</p><div class="pullquote"><p>We always look for ways to simplify things &#8212; though we must also be on the lookout for reasons to complicate them.</p></div><p>Second, note that at no point in the scientific process do we ever prove that a hypothesis is <em>true</em>. Experiments can never prove a hypothesis right&#8212;they can only prove it wrong. A theory is simply a hypothesis that has withstood so many diverse experiments that we feel confident relying on it for consequential matters. Thus, the answers we get from the scientific method are never quite final&#8212;but they are very useful.</p><h2>The Map is Not The Territory</h2><p>When I was three or four years old, I had a placemat with a map of the U.S. states on it. I remember distinctly the moment when my mom pointed out the San Francisco Bay to me and said &#8220;this is where we are.&#8221; I shook my head. &#8220;I don&#8217;t think so.&#8221; I pointed to the color of California on the map and then pointed outside. &#8220;It isn&#8217;t red enough out there.&#8221;</p><p>The map is not the territory. A scientific theory gives us a map of some aspect of the world, a way of describing it &#8212; but it isn&#8217;t how the thing actually <em>works</em>.</p><p>A theory simply helps us make predictions. Theories do not describe how things &#8220;really are,&#8221; out there in the world beyond our direct perception. If you believe that they do, you will be very confused by theories like the wave-particle duality of light. The truth is not that light is somehow both a wave and a particle, but that waves and particles are <em>models</em> that relate the behavior of light to that of ocean waves and billiard balls. Each of these models is effective in different circumstances. But neither model, nor even a combination of the two, should be mistaken for the real thing.</p><blockquote><p>At first, light was seen to behave very much like a rain of particles. Then with further research it was clear that this was not right but that light actually behaved like waves. And then, in the 20th century, on further research it appeared that light actually behaved, in many ways again, like particles. This growing confusion was resolved in 1925 or &#8217;26, with the advent of the correct equations for quantum mechanics. Now we know how electrons and light behave &#8212; but what can I call it? I can&#8217;t say &#8220;they behave like a particle-wave&#8221; or &#8220;they behave in typical quantum-mechanical manner.&#8221; There isn&#8217;t any word for it. If I say they behave like particles, I give the wrong impression &#8212; or if I say they behave like waves. They behave in their own inimitable way. They behave in a way that is like nothing you have ever seen before.</p><p>&#8212;Richard Feynman, <a href="https://archive.org/details/probabilityanduncertaintythequantummechanicalviewofnature/probabilityanduncertaintythequantummechanicalviewofnaturereel1.mov">&#8220;Probability and Uncertainty: The Quantum Mechanical View of Nature&#8221;</a></p></blockquote><p>Christopher Alexander put it this way:</p><blockquote><p>The mechanistic idea of order can be traced to Descartes, around 1640. His idea was: if you want to know how something works, you can find out by pretending that it is a machine. You completely isolate the thing you are interested in &#8212; the rolling of a ball, the falling of an apple, the flowing of the blood in the human body &#8212; from everything else, and you invent a mechanical model, a mental toy, which obeys certain rules, and which will then replicate the behavior of the thing. It was because of this kind of Cartesian thought that one was able to find out how things work in the modern sense.</p><p>However, the crucial thing which Descartes understood very well, but which we most often forget, is that this process is only a <em>method</em>. This business of isolating things, breaking them into fragments, and of making machinelike pictures (or models) of how things work, is not how reality actually <em>is</em>. It is a convenient mental exercise, something we do to reality, in order to understand it.</p><p>&#8212;Christopher Alexander, <em>The Phenomenon of Life</em>, p. 16</p></blockquote><p>When you were a child, did you ever try to smell a photograph of a flower? There is a difference between a thing and a picture of the thing, which can never be eliminated. If it were eliminated, the picture would cease to be a picture, and would become a duplicate. In software, duplicating things is easy&#8212;it&#8217;s understanding them that&#8217;s hard. Therefore, our pictures must always remain pictures: flawed, simplified, but useful.</p><p>So, all useful models and pictures of the world have limits. Part of using them well is understanding those limits. Echos of this idea will show up in later chapters, e.g. <a href="https://benchristel.github.io/process-to-processes/Fundamentals/Empiricism.html#">GoodhartsLaw</a>.</p><h2>Further Resources</h2><ul><li><p><a href="https://hpmor.com/">Eliezer Yudkowsky, </a><em><a href="https://hpmor.com/">Harry Potter and the Methods of Rationality</a></em></p></li></ul><p>Richard Feynman&#8217;s entertaining description of the scientific method is well worth the 10 minutes it will take to hear:</p><div id="youtube2-EYPapE-3FRw" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;EYPapE-3FRw&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/EYPapE-3FRw?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div>]]></content:encoded></item><item><title><![CDATA[Can books be written? Can they be read?]]></title><description><![CDATA[You&#8217;re reading Ben&#8217;s Guide to Software Development&#8212;the weekly bulletin about my upcoming book, Process to Processes.]]></description><link>https://bensguide.substack.com/p/can-books-be-written-can-they-be</link><guid isPermaLink="true">https://bensguide.substack.com/p/can-books-be-written-can-they-be</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Sun, 17 Mar 2024 20:34:28 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>You&#8217;re reading Ben&#8217;s Guide to Software Development&#8212;the weekly bulletin about my upcoming book, <em>Process to Processes. </em>It&#8217;s far from finished, but you can read early drafts of the first few chapters by clicking this button:</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://benchristel.github.io/process-to-processes/index.html&quot;,&quot;text&quot;:&quot;Read \&quot;Process to Processes\&quot; Online&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://benchristel.github.io/process-to-processes/index.html"><span>Read "Process to Processes" Online</span></a></p><p>This week, I have been pondering why anyone would want to read a book on software development. One thing is fairly clear to me: it&#8217;s a rare person who reads a book to have their views changed. Most people would rather have their views confirmed. This creates a quandary for me as a writer: <a href="https://benchristel.github.io/process-to-processes/Preface.html">at least half my stated goal is to change people&#8217;s views</a>.</p><p>Where&#8217;s the overlap between my goals and my readers&#8217; goals? I think it comes down to this:</p><ul><li><p>Some readers haven&#8217;t formed their opinions yet. Maybe they&#8217;re new to the industry. Maybe they&#8217;re disillusioned with the status quo and are looking for a new worldview. For whatever reason, they want someone to help them sort through the mountains of opinion and fluff out there and develop an effective mental model of software development.</p></li><li><p>Some readers already agree with me&#8212;they&#8217;ve had the same insights, and come to similar conclusions. But there are details they haven&#8217;t filled in yet, and they&#8217;re unsure how to express what they know to others. These readers want community, rhetoric, and a confidence boost. They want to build on what they already know. They want pithy arguments they can deliver to their bosses and teammates.</p></li></ul><p>I can help the first type of reader by adhering to a few principles:</p><ul><li><p>First, I can be judicious about what goes in the book and what stays out. By writing a book at all, I&#8217;m declaring that there is a finite chunk of material, fitting between two covers, which, if mastered, will prove valuable to the reader. This is, in fact, the main advantage to framing my work as a &#8220;book&#8221; instead of a &#8220;blog&#8221; or &#8220;website&#8221; or whatever. A book is an artifact: finite, bounded, and permanent. It has a beginning, an end, and an order. You can mark your place in it, and know how far you&#8217;ve come and how far you have to go.</p></li><li><p>Second, I can eschew jargon and technical arcana. By focusing on the concrete, simple, local, and immediately practical, I can provide value to more people.</p></li></ul><p>I can help the second type of reader by writing what I&#8217;ve been calling &#8220;nuggets&#8221; or &#8220;arrows&#8221; (depending on my favored metaphor of the day). These are one-liners that succinctly communicate a powerful insight. <a href="https://tidyfirst.substack.com/p/earning-to-write-not-writing-to-earn">Kent Beck has referred</a> to the moment of discovering one of these as a &#8220;boom&#8221; moment.</p><blockquote><p>As I was writing <em><a href="http://tidyfirst.substack.com/">Tidy First?</a></em> I was trying to explain why people can relax about design changes. *Boom* because design changes are reversible, while behavior changes often aren&#8217;t.</p><p>I want as many of those moments in my life as possible. I find them deeply satisfying &amp; other folks report them as valuable too.</p></blockquote><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg" width="1024" height="802" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:802,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Bucket full of arrows&quot;,&quot;title&quot;:&quot;Bucket full of arrows&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Bucket full of arrows" title="Bucket full of arrows" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff795a1f-ce57-4e37-a7fa-8e0110a68028_1024x802.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/98786299@N00/9711609993">Bucket full of arrows</a>" by <a href="https://www.flickr.com/photos/98786299@N00">PeterThoeny</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/2.0/?ref=openverse">CC BY-NC-SA 2.0</a>.</figcaption></figure></div><p>The more arrows we have in our quiver, the better equipped we are to pierce the fog of conflicting opinions and strike to the core of the reality in front of us.</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/subscribe?"><span>Subscribe now</span></a></p><h2>What I Did This Week</h2><p>Net writing: not much. Just about a thousand new words. The main value-adding thing I did was to refactor the early chapters. The book now opens with <a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/Programming/index.html">a collection of views on programming</a>, which serve both to illustrate the concept of views, and to dispel some common myths. I&#8217;m not totally convinced this is an improvement&#8212;my main worry is that these &#8220;programming&#8221; views are too basic and will bore my readers. Let me know what you think in the comments.</p><p></p>]]></content:encoded></item><item><title><![CDATA[Book Update: March 10th, 2024]]></title><description><![CDATA[13347 words - but who's counting?]]></description><link>https://bensguide.substack.com/p/book-update-march-10th-2024</link><guid isPermaLink="true">https://bensguide.substack.com/p/book-update-march-10th-2024</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Sun, 10 Mar 2024 22:58:51 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>Hello! You&#8217;re reading Ben&#8217;s Guide to Software Development, the weekly bulletin where, at least for the time being, I&#8217;m posting updates on my book-in-progress, <em><a href="https://benchristel.github.io/process-to-processes/">Process to Processes</a></em>.</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/subscribe?"><span>Subscribe now</span></a></p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg" width="1023" height="718" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:718,&quot;width&quot;:1023,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Remington Typewriter Composite&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Remington Typewriter Composite" title="Remington Typewriter Composite" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d14d0c1-98f9-4cd5-9d30-f7284f13f6cf_1023x718.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/22017189@N00/7008333501">Remington Typewriter Composite</a>" by <a href="https://www.flickr.com/photos/22017189@N00">Creativity+ Timothy K Hamilton</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/?ref=openverse">CC BY-NC-ND 2.0</a>.</figcaption></figure></div><p>Here&#8217;s what I did this week:</p><ul><li><p>Cleaned up the landing page, moving everything but the table of contents to its own page.</p></li><li><p>Drafted a bunch of chapters for the first part of the book&#8212;an overview of software and software development.</p></li><li><p>Drafted <a href="https://benchristel.github.io/process-to-processes/ChangingOneFunction/Paragraphs.html">&#8220;Paragraphs,&#8221;</a> the first chapter on code organization. I chose the topic because it was the tiniest bite-sized thing I could find to write about, and it motivates the concept of <a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/Centers.html">centers</a> which I introduce earlier in the book. Plus, a great code example happened to come along just when I needed it&#8212;more about that below.</p></li><li><p>I added analytics, powered by <a href="https://www.goatcounter.com/">GoatCounter</a>. I have mixed feelings about all forms of analytics, so I am approaching this with tongs and hazmat suit&#8212;but GoatCounter is a little indie project and its whole deal is being more privacy-respecting than Google or Cloudflare, so hopefully that gives you warm fuzzies. More details below about how I am going to use the data I collect.</p></li><li><p>I made a bunch of little stylistic tweaks (hopefully you see them as improvements) to the website.</p><ul><li><p>I am now using <a href="https://www.npmjs.com/package/smartquotes">smartquotes</a> to convert straight quotes and apostrophes to curly quotes. The conversion happens in the browser, so if you really prefer straight quotes, you can get them back by disabling JavaScript.</p></li><li><p>I made a favicon with a little mascot for the site: a <a href="https://en.wikipedia.org/wiki/Glider_(Conway%27s_Game_of_Life)">glider</a> from Conway&#8217;s Game of Life.</p></li></ul></li></ul><h2>Word Count</h2><p>As a way to quantify my progress, I started running <code>find src -name '*.md' | xargs wc -w</code> to count the words in my manuscript. I&#8217;m up to 13347 words.</p><p>I don&#8217;t think weighing prose is likely to work any better than counting lines of code as a metric of true progress, but I think it is a <em>good enough measure for this project, at this stage</em>. As I noted in an earlier post, I have about 600 pages of rough draft material lying around. Producing words is not my bottleneck; getting them coherent and organized is. So step 1 is simply to find the best parts of my drafts and get them on the site in some kind of order. The satisfaction of seeing the word count go up is a small incentive to harvest existing draft material instead of writing afresh.</p><h2>Analytics</h2><p>As I mentioned earlier, I am now collecting analytics data on all process-to-processes pages. What this means is that I can see how many people visited each page and when they visited. I can also see information like your geographic region (country or US state), your browser make and version, and your approximate screen dimensions, but no personally identifying information.</p><p>If you want to opt out of sending this data, you can install the <a href="https://ublockorigin.com/">uBlock Origin</a> browser extension (my preferred ad- and tracker-blocker). Or maybe a better way of putting it is, if you want to opt <em>in</em>, you can disable your ad blocker on benchristel.github.io. There are no ads, I promise :).</p><p>Why did I decide to install an analytics tracker, when I myself block trackers by default? Basically, I&#8217;d like to know which chapter titles people find most interesting, how many pages people tend to read in a sitting, and where they stop reading (i.e. lose interest). I&#8217;m hoping this information will prove useful, rather than distracting, as I strategize about what topics to focus on and how to sequence them. A known risk is that I will almost certainly have neither the data volume nor the statistics knowledge to draw statistically significant conclusions from what I observe.</p><p>&#8230;Maybe that means it&#8217;s a bad idea. If it turns out to be, I can always turn the data collection off.</p><h2>The Joys of Open Source</h2><p>One of the highlights of last week was <a href="https://github.com/stevenpetryk/mafs/pull/144">getting to contribute</a> to the open-source graphing library <a href="https://mafs.dev/">Mafs</a> as part of my day job. The Mafs codebase is the kind of code I want to write and write about&#8212;comfortably maintainable, tidy and well-appointed, but without the brittleness that invariably comes from over-hardening. I took an example from the Mafs codebase for the chapter on <a href="https://benchristel.github.io/process-to-processes/ChangingOneFunction/Paragraphs.html">Paragraphs</a>.</p><p>(Why don&#8217;t more books on software draw from open source? Are there licensing considerations I don&#8217;t know about? Seems like this would be a good way around the common &#8220;yeah but your advice only works for toy problems&#8221; criticisms.)</p><p>(Actually, now that I&#8217;m thinking about it, <em><a href="http://www.catb.org/esr/writings/taoup/html/">The Art of Unix Programming</a></em> is almost exclusively open source examples. So there is a precedent for this.)</p>]]></content:encoded></item><item><title><![CDATA[Mdsite and Code For Humans]]></title><description><![CDATA[A week ago I announced that I was writing a book. How&#8217;s that going?]]></description><link>https://bensguide.substack.com/p/mdsite-and-code-for-humans</link><guid isPermaLink="true">https://bensguide.substack.com/p/mdsite-and-code-for-humans</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Sat, 02 Mar 2024 22:48:33 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/w_256,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8967e7bd-33f4-4513-a9ac-79b9eba3b0f1_144x144.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>A week ago I announced that I was writing <a href="https://benchristel.github.io/process-to-processes/index.html">a book</a>. How&#8217;s that going?</p><p>(My current intention is to post a status update here once a week, whether I&#8217;ve done any work on the book or not. While I don&#8217;t feel I can commit to working on the book at a totally steady pace. I <em>can</em> commit to weekly status reports. If I sometimes have to say &#8220;I didn&#8217;t do anything this week&#8221;&#8212;well, maybe that will motivate me to do more the following week.)</p><p>Not much writing happened during the week. Instead, I mostly worked on <strong><a href="https://github.com/benchristel/mdsite">mdsite</a></strong>, the program I wrote to turn my Markdown manuscript into HTML. I made it easier to:</p><ul><li><p>create links between pages that won&#8217;t break if I move files around</p></li><li><p>generate the table of contents from an outline</p></li><li><p>keep track of &#8220;loose ends&#8221; in the project&#8212;TODOs and missing/unfinished pages.</p></li></ul><p>Today, I drafted a couple brief chapters. Here&#8217;s one: <a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html">Code Is For Humans</a>, in which I make a pretty silly <em>reductio ad absurdum</em> argument for why software design matters.</p><div><hr></div><h1>View: Code is for Humans</h1><ul><li><p>Why do programmers spend so much time talking about software design&#8212;<a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html#">Structure</a>&#8212;when what they're paid for is <a href="https://benchristel.github.io/process-to-processes/reference/Behavior.html">Behavior</a>?</p></li></ul><p>At first glance, the task of programming appears to consist of writing code to make a computer do something useful for us.</p><p>That's certainly part of it, but it's not the whole story.</p><p>If it were, our code would look like this:</p><pre><code><code>var z=1,D=3,F={},X=[],W="http://www.w3.org/2000/svg",I=
function(r){this.events[r.type](r)},L=r=&gt;r==null?r:r.key,Q=(r,
t,f,u,c)=&gt;{t==="key"||(t[0]==="o"&amp;&amp;t[1]==="n"?((r.events||(r.
events={}))[t=t.slice(2)]=u)?f||r.addEventListener(t,I):r.
removeEventListener(t,I):!c&amp;&amp;t!=="list"&amp;&amp;t!=="form"&amp;&amp;t in r?r[
t]=u??"":u==null||u===!1?r.removeAttribute(t):r.setAttribute(t
,u))},j=(r,t)=&gt;{var f=r.props,u=r.type===D?document.
createTextNode(r.tag):(t=t||r.tag==="svg")?document.
createElementNS(W,r.tag,{is:f.is}):document.createElement(r.
tag,{is:f.is});for(var c in f)Q(u,c,null,f[c],t);for(var b=0;b
&lt;r.children.length;b++)u.appendChild(j(r.children[b]=R(r.
children[b]),t));return r.node=u},O=(r,t,f,u,c)=&gt;{if(f!==u)if(
f!=null&amp;&amp;f.type===D&amp;&amp;u.type===D)f.tag!==u.tag&amp;&amp;(t.nodeValue=u.
tag);else if(f==null||f.tag!==u.tag)t=r.insertBefore(j(u=R(u),
c),t),f!=null&amp;&amp;r.removeChild(f.node);else{var b,C,A,m,G=f.
props,J=u.props,x=f.children,g=u.children,v=0,p=0,_=x.length-1
,B=g.length-1;c=c||u.tag==="svg";for(var E in{...G,...J})(E===
"value"||E==="selected"||E==="checked"?t[E]:G[E])!==J[E]&amp;&amp;Q(t,
E,G[E],J[E],c);for(;p&lt;=B&amp;&amp;v&lt;=_&amp;&amp;!((A=L(x[v]))==null||A!==L(g[p
]));)O(t,x[v].node,x[v++],g[p]=R(g[p++]),c);for(;p&lt;=B&amp;&amp;v&lt;=_&amp;&amp;!
((A=L(x[_]))==null||A!==L(g[B]));)O(t,x[_].node,x[_--],g[B]=R(
g[B--]),c);if(v&gt;_)for(;p&lt;=B;)t.insertBefore(j(g[p]=R(g[p++]),c
),(C=x[v])&amp;&amp;C.node);else if(p&gt;B)for(;v&lt;=_;)t.removeChild(x[v++
].node);else{for(var M={},Y={},E=v;E&lt;=_;E++)(A=x[E].key)!=null
&amp;&amp;(M[A]=x[E]);for(;p&lt;=B;){if(A=L(C=x[v]),m=L(g[p]=R(g[p])),Y[A
]||m!=null&amp;&amp;m===L(x[v+1])){A==null&amp;&amp;t.removeChild(C.node),v++;
continue}m==null||f.type===z?(A==null&amp;&amp;(O(t,C&amp;&amp;C.node,C,g[p],c
),p++),v++):(A===m?(O(t,C.node,C,g[p],c),Y[m]=!0,v++):(b=M[m])
!=null?(O(t,t.insertBefore(b.node,C&amp;&amp;C.node),b,g[p],c),Y[m]=!0
):O(t,C&amp;&amp;C.node,null,g[p],c),p++)}for(;v&lt;=_;)L(C=x[v++])==null
&amp;&amp;t.removeChild(C.node);for(var E in M)Y[E]==null&amp;&amp;t.
removeChild(M[E].node)}}return u.node=t},R=r=&gt;r!==!0&amp;&amp;r!==!1&amp;&amp;
r?r:text(""),U=r=&gt;r.nodeType===D?text(r.nodeValue,r):q(r.
nodeName.toLowerCase(),F,X.map.call(r.childNodes,U),z,r),q=(r,
t,f,u,c)=&gt;({tag:r,props:t,key:t.key,children:f,type:u,node:c})
;export var text=(r,t)=&gt;q(r,F,X,D,t),h=(r,t,f=X)=&gt;q(r,t,Array.
isArray(f)?f:[f]),patch=(r,t)=&gt;((r=O(r.parentNode,r,r.vdom||U
(r),t)).vdom=t,r);</code></code></pre><p>Source: <a href="https://github.com/jorgebucaran/superfine">Superfine, by Jorge Bucaran</a>. Minified by <a href="https://esbuild.github.io/">esbuild</a>.</p><p>Why waste time typing multiple-character variable names (to say nothing of whitespace) when code like the above works just fine?</p><p>The answer, which I'm sure is obvious to every programmer reading this, is that humans find it impossible to read or modify such code. The miniscule amount of time we would save by forgoing whitespace and long variable names would be dwarfed, by several orders of magnitude, by the extreme difficulty of understanding the most basic facts about what the code is doing and how its parts relate to each other.</p><p>When we read a program, we don't parse it characater-by-character like a machine does. Instead, we look for recognizable, coherent structures&#8212;<a href="https://benchristel.github.io/process-to-processes/reference/Center.html">centers</a>&#8212;that guide our eye and mirror our understanding of the problem being solved.</p><p>Broadly speaking, there are two ways we can approach an understanding of an unfamiliar program: we can go whole-to-parts or parts-to-whole. For us to be able to make the journey in either direction, the <a href="https://benchristel.github.io/process-to-processes/reference/Center.html">centers</a> in the program need to form a hierarchy of scales&#8212;<a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html#">LevelsOfScale</a>&#8212;which allows us to view each part as an assembly of smaller, simpler parts.</p><p>The code example above has no <a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html#">LevelsOfScale</a>, and indeed hardly any identifiable <a href="https://benchristel.github.io/process-to-processes/reference/Center.html">centers</a> at all, which is why it is impossible to comprehend. Of course, most real, human-written code is nowhere near this bad, but it's a matter of degree, and even the most basic attributes of readable code shouldn't be taken for granted. Even indentation was once, I'm told, seen as an affectation by the old guard of programmers, who had cut their teeth on punchcards and couldn't abide the thought of all those wasted characters.</p><p>The point is that, by this <em>reductio ad absurdum</em>, we have proven that code must serve the needs of a human audience. It remains to discuss exactly what those needs are and how much time we ought to spend addressing them, but the basic point should be obvious.</p><p>In subsequent chapters, I will explore specific qualities of comprehensible code in detail. Those qualities include:</p><ul><li><p><a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html#">LevelsOfScale</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/reference/ShallowHierarchy.html">ShallowHierarchy</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html#">Cohesion</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html#">InwardLookingNames</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html#">StrongCenter</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html#">Boundaries</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/reference/Symmetry.html">Symmetry</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html#">LongBranchRight</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html#">Contrast</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/CodeIsForHumans.html#">Simplicity</a></p></li></ul>]]></content:encoded></item><item><title><![CDATA[Process to Processes: A Table of Contents]]></title><description><![CDATA[...and the future of this newsletter]]></description><link>https://bensguide.substack.com/p/process-to-processes-a-table-of-contents</link><guid isPermaLink="true">https://bensguide.substack.com/p/process-to-processes-a-table-of-contents</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Sun, 25 Feb 2024 23:26:03 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>(tl;dr: I&#8217;m writing <a href="https://benchristel.github.io/process-to-processes/">a book</a>)</p><p>Hey, all. It&#8217;s been a while. In case you&#8217;ve forgotten, you&#8217;re subscribed to Ben&#8217;s Guide to Software Development, the apparently aperiodic newsletter where I write about <strong>views</strong> for making sense of software and <strong>techniques</strong> for changing it.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg" width="1024" height="688" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:688,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;undefined&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="undefined" title="undefined" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a775f50-010c-49f4-96c4-0f07ad6ab52f_1024x688.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption"><em><a href="https://en.wikipedia.org/wiki/The_Great_Wave_off_Kanagawa">The Great Wave off Kanagawa</a></em>. Hokusai. Public domain.</figcaption></figure></div><p>I started this newsletter with the long-term goal of writing a book. The idea was that by publishing little pieces more frequently, and getting more people to read my writing and offer feedback, I&#8217;d go from not having written a book to having written one more quickly. I&#8217;d also have a way to measure progress.</p><p>This sort of almost worked, but a few things have been bugging me:</p><ul><li><p>Newsletter posts have ended up feeling like a hollow measure of progress. Back when I was posting regularly, I could see that my &#8220;velocity&#8221; was about 1500 words per week, but I still had no idea when the book would be finished. To predict a release date, I would have needed an outline of the remaining work (i.e. a list of topics I wanted to cover) and I didn&#8217;t have that.</p></li><li><p>Writing&#8212;raw output&#8212;isn&#8217;t actually my bottleneck. Organization is. I have 600 pages of rough draft already, scattered throughout various repos, docs, and wikis. What I really need is a better system for getting value out of what I&#8217;ve already written.</p></li><li><p>I ended up not liking a bunch of things about Substack&#8217;s UI/UX.</p><ul><li><p>There&#8217;s no syntax highlighting for code snippets.</p></li><li><p>There&#8217;s no way to see posts in chronological order.</p></li><li><p>Navigating from the editor to your own recent posts takes a weirdly large number of clicks, which makes it annoying to add links between posts.</p></li><li><p>Substack&#8217;s constant upselling makes for an icky reading/subscribing experience. A year ago, I swore I&#8217;d never put my writing behind a modal form that shakes you down for your email address. I broke that promise, and now I have regrets. I&#8217;m sorry. (No judgment if you run a newsletter on Substack. We all do what we gotta do. I just don&#8217;t feel great doing this particular thing.)</p></li></ul></li></ul><p>However, I have good news! I hope to get back to posting regularly soon. I am now writing the book in the format I always wanted to write it in&#8212;markdown/HTML, a la <em><a href="http://www.catb.org/esr/writings/taoup/html/">Art of Unix Programming</a></em>. This will enable it to have bookish things like page-by-page navigation and tables of contents, and also webbish things like hypertext, embedded videos, and maybe even interactive code examples.</p><p><strong>The book&#8217;s working title is </strong><em><strong>Process to Processes</strong></em><strong>, and it&#8217;s hosted on my website at <a href="https://benchristel.github.io/process-to-processes/">benchristel.github.io/process-to-processes</a></strong>. I&#8217;ll be cross-posting significant updates here, so you get them in your email. If you haven&#8217;t subscribed yet, now might be a good time to do it. Sorry about the upsells lurking behind that button.</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://bensguide.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://bensguide.substack.com/subscribe?"><span>Subscribe now</span></a></p><h2>I&#8217;ve Learned Not to Write Introductions</h2><p>One big reason I don&#8217;t have a book yet is that I&#8217;ve been going through the following loop over and over again:</p><ol><li><p>Asking myself &#8220;what value proposition am I offering readers?&#8221;</p></li><li><p>Writing an introduction for the book, longhand, to clarify that value prop to myself.</p></li><li><p>Disliking something about the intro (sequence, style, emphasis&#8230; you name it) and scrapping the whole thing.</p></li><li><p>GOTO 1.</p></li></ol><p>I recently realized how backwards this is. Not just because I&#8217;m stuck in a loop not making any progress, but because <strong>the introduction is a terrible place to lay out your book&#8217;s value proposition</strong>. Because you know what? People don&#8217;t read introductions unless they&#8217;re already committed to reading the book. If I&#8217;m considering buying a book and I want to know if it&#8217;s worth my time, <strong>I read</strong> <strong>the table of contents</strong>. If the TOC piques my interest, then, and only then, do I start reading full sentences.</p><p>So this weekend, I trawled through all my drafts and assembled a table of contents.</p><p>I figured posting it here would be a good way to inaugurate this new newsletter format. So here you go:</p><h2>Table of Contents</h2><ul><li><p><strong>Part I: <a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment">Software Development</a></strong></p><ul><li><p><a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/36Views.html">Technique: 36 Views</a></p></li><li><p><a href="https://benchristel.github.io/process-to-processes/SoftwareDevelopment/Humans.html">View: Humans, Not Humanoids</a></p></li><li><p>View: Exploration, Not Production</p></li><li><p>View: Code Is an Asset; Dependencies Are Liabilities</p></li><li><p>View: Forces, Not Requirements</p></li><li><p>View: Controllability, Not Correctness</p></li><li><p>View: Differentiation, Not Accretion</p></li><li><p>View: A Process, Not a Project</p></li><li><p>View: A Semilattice, Not a Tree</p></li><li><p>View: A Living System, Not an Artifact</p></li><li><p>View: The Life and Death of Systems</p></li><li><p>View: Information Flow</p></li><li><p>View: Techniques</p></li><li><p>Principle: Constant Improvement</p></li><li><p>View: Improvement is change</p></li><li><p>Principle: Small Steps</p></li><li><p>Technique: Start with the easy change</p></li><li><p>Technique: Change something!</p></li><li><p>Technique: Make changes reversible</p></li><li><p>Technique: Make changes safe</p></li><li><p>View: Positive Feedback Loops Work Both Ways</p><ul><li><p>With incremental changes, a catch-22 can become a virtuous cycle</p></li></ul></li><li><p>Good: Trust</p></li><li><p>View: tools, not rules</p></li><li><p>View: two kinds of work</p><ul><li><p>creative exploration</p></li><li><p>slog</p></li></ul></li><li><p>Technique: balanced work</p><ul><li><p>the purpose of much of software engineering is to make the work straightforward and unexciting - i.e. to turn creative exploration into slog</p></li><li><p>over-automation can make working on a codebase boring, which leads to alienation, inattentiveness, and mistakes. It's not actually sustainable!</p></li><li><p>maintain a healthy balance between exploration and slog.</p></li><li><p>some programmers prefer one type of work or the other... rotate programmers at different phases of the product lifecycle?</p></li></ul></li><li><p>View: Mutual Benefit</p></li><li><p>View: Bugs vs. Features</p></li><li><p>Technique: Sleep is the best debugger</p></li><li><p>Principle: "to the extent that..."</p><ul><li><p>I've found that these are magic words for making fuzzy-seeming ideas pop into focus.</p></li><li><p>Replace "A is true if B" with "A is true to the extent that B".</p></li></ul></li></ul></li><li><p><strong>Part II: Starting a Project</strong></p><ul><li><p>Technique: Project Template</p></li><li><p>Technique: Walking Skeleton</p></li><li><p>Technique: Constant Tooling</p><ul><li><p>O(1) tooling - you don't need to change build/test scripts to add a file to the project</p></li></ul></li><li><p>Technique: Version Control</p></li><li><p>View: The Doherty Threshold</p></li><li><p>Technique: Automatic Dev Setup</p></li><li><p>Technique: Reproducible Build</p></li><li><p>Technique: Dev Environment</p></li><li><p>Technique: 400ms feedback</p></li><li><p>Technique: passive feedback</p><ul><li><p>watch mode for types and tests</p></li><li><p>live-updating dev environment</p></li><li><p>Counterpoint: call your shot</p></li></ul></li><li><p>Technique: Readme-driven design</p></li><li><p>Technique: Prototype</p></li><li><p>Technique: Spike</p></li><li><p>Technique: separate fast and slow tests</p></li><li><p>Technique: system test</p></li><li><p>Technique: smoke test</p></li><li><p>Technique: Continuous Integration</p></li><li><p>Technique: Semi-automated release</p><ul><li><p>Principle: Human in the loop</p></li></ul></li><li><p>View: "Making code" vs. "Shipping code"</p></li></ul></li><li><p><strong>Part III: Changing Code Within One Function</strong></p><ul><li><p>View: Behavior</p></li><li><p>View: Structure</p></li><li><p>Technique: Separate behavior and structure changes</p></li><li><p>Technique: Refactoring</p></li><li><p>View: Test coverage</p></li><li><p>Technique: Mutation Testing</p></li><li><p>Technique: Characterization Test</p></li><li><p>Technique: Empirically Motivated Change</p><ul><li><p>Want something changed? find the bugs!</p></li><li><p>There are bound to be bugs in messy code.</p></li></ul></li><li><p>View: Centers</p></li><li><p>View: Latent Centers</p></li><li><p>View: Weak and Strong Centers</p></li><li><p>Technique: Strengthen Latent Centers</p></li><li><p>View: Wholeness</p></li><li><p>Technique: The Mirror of the Self Test</p><ul><li><p>Principle: Relative Assessment</p></li><li><p>Good: Living Structure</p></li></ul></li><li><p>View: Chunking and Levels of Scale</p></li><li><p>Technique: Organize Code For Chunking</p></li><li><p>Technique: One thing at a time</p></li><li><p>View: Duplicated Code</p></li><li><p>View: Symmetry</p></li><li><p>View: Dead Code</p></li><li><p>View: Testing</p><ul><li><p>types of tests</p></li></ul></li><li><p>View: Simplicity and Occam's Razor</p><ul><li><p>Good: Simplicity</p></li></ul></li><li><p>Technique: reproduce bugs</p></li><li><p>Technique: automated tests</p><ul><li><p>Notice: some functions are harder to test than others. Why do you think that is? Do you notice any patterns?</p></li></ul></li></ul></li><li><p><strong>Part IV: Changing Code Across Functions</strong></p><ul><li><p>Technique: Change together, live together</p></li><li><p>View: Call Graph</p></li><li><p>View: Processes</p></li><li><p>View: System Calls</p></li><li><p>View: Effects</p></li><li><p>View: Dependency</p></li><li><p>View: Dependency Graph</p></li><li><p>View: Coupling and Cohesion</p></li><li><p>View: State</p></li><li><p>View: Objects</p></li><li><p>Technique: Objects for Caching</p></li><li><p>Technique: Objects for Laziness</p></li><li><p>Technique: Objects as State Machines</p></li><li><p>View: Types as Sets</p></li><li><p>View: Design is always incomplete</p><ul><li><p>Technique: TODO comment</p></li></ul></li><li><p>Technique: Tesseract Organization</p></li><li><p>View: Immutable Data</p></li><li><p>Technique: Updating Immutable Data</p></li><li><p>Technique: Tests Next to Production Code</p></li><li><p>Good: Shallow Hierarchy</p></li><li><p>View: Concerns</p></li><li><p>Technique: Separation of Concerns</p></li><li><p>View: Brittle Tests</p></li></ul></li><li><p><strong>Part V: Adding New Code</strong></p><ul><li><p>Technique: Test-Driven Development</p></li><li><p>View: TDD Is Science</p><ul><li><p>View: A Program is a Theory</p></li></ul></li><li><p>Technique: Reactive Programming</p><ul><li><p>Principle: Feedback Up, Intent Down</p></li></ul></li><li><p>Technique: Adapters</p></li><li><p>Technique: Parse, Don't Validate</p></li><li><p>Technique: Treat All Exceptions as Fatal (at some level of abstraction)</p></li><li><p>Technique: No Checked Exceptions</p></li><li><p>Technique: Start TDDing from the strongest center (middle-out TDD)</p></li></ul></li><li><p><strong>Part VI: Working on a Team</strong></p><ul><li><p>View: a team is a group of people with a common goal</p></li><li><p>View: Velocity</p></li><li><p>View: Metrics and Goodhart's Law</p></li><li><p>Technique: assign work to teams, not individuals</p></li><li><p>Technique: full-time allocation</p></li><li><p>Technique: ordered backlog</p></li><li><p>Technique: user story</p></li><li><p>Technique: easy task creation</p></li><li><p>Technique: definition of done</p></li><li><p>Technique: Preconditions, action, expectations</p><ul><li><p>Gherkin, GIVEN, WHEN, THEN</p></li></ul></li><li><p>Technique: no personal tasks</p></li><li><p>Technique: three amigos</p></li><li><p>Technique: group estimates</p></li><li><p>Technique: relative estimates</p></li><li><p>Technique: planning meeting</p></li><li><p>Technique: Lean Coffee retrospective</p></li><li><p>Technique: Team Space</p></li><li><p>Technique: Information Radiator</p></li><li><p>Technique: Pair Programming</p></li><li><p>Technique: Pairing station</p></li><li><p>Technique: Peer evaluation and feedback</p><ul><li><p>Principle: Relative Assessment</p></li></ul></li><li><p>Technique: Workstation Setup</p></li><li><p>Technique: Daily Pair Rotation</p></li><li><p>Technique: Staging Environment</p></li><li><p>Technique: Acceptance</p></li></ul></li><li><p><strong>Part VII: User Interface Design</strong></p><ul><li><p>Good: Customizable UI</p></li><li><p>View: Fitts's Law</p></li><li><p>Principle: Recognition over Recall</p></li><li><p>View: Doherty Threshold (again)</p></li><li><p>Principle: Feedback</p></li><li><p>Principle: Least Surprise</p></li><li><p>Principle: Reversibility</p></li><li><p>Principle: Boundary</p></li><li><p>Principle: Attachment</p></li><li><p>Principle: Least Marking</p></li><li><p>Principle: Trust</p></li></ul></li></ul><h2>I&#8217;d love to hear your thoughts</h2><p>Your first reaction to that table of contents is probably &#8220;holy moly, that&#8217;s too much for one book.&#8221; And I agree. Probably around 4&#8211;7 normal-sized books, if I had to guess. But you know, what counts as a &#8220;book&#8221; has historically been based on how many pages can physically be bound and held in your hand (e.g. J.R.R. Tolkien envisioned <em>The Lord of the Rings</em> as one book, but his publisher made him break it into three). If I&#8217;m publishing on the web, I don&#8217;t have those constraints.</p><p>So my main question for you is: does this TOC make you want to read further? If so, what interests you about it? Let me know in the comments. If you&#8217;re reading this post in your email, you can also just hit reply and shoot me a note.</p>]]></content:encoded></item><item><title><![CDATA[Testing Randomness with Loose Assertions]]></title><description><![CDATA[Testing around effects, Part 5]]></description><link>https://bensguide.substack.com/p/testing-randomness-with-loose-assertions</link><guid isPermaLink="true">https://bensguide.substack.com/p/testing-randomness-with-loose-assertions</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Thu, 25 Jan 2024 02:00:33 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>You&#8217;re trying to test a <code>shuffle(array)</code> function. How do you do it?</p><p>This won&#8217;t work:</p><pre><code>test("shuffle", {
  "puts the elements in a random order"() {
    expect(shuffle([1, 2, 3]), equals, [3, 1, 2]);
  },
});</code></pre><p>because, uh, the whole point is that the shuffled result isn&#8217;t the same every time.</p><p>One thing we could try is <a href="https://bensguide.substack.com/p/backdoor-stubbing">backdoor stubbing</a> the random number generator. To see how that might work, let&#8217;s first look at a possible implementation of <code>shuffle</code>. Here&#8217;s a version using the <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle">Fisher-Yates algorithm</a>:</p><pre><code>function shuffle(array) {
  for (let i = 0; i &lt; array.length - 1; i++) {
    const k = randomIntInRange(i, array.length - 1);
    [array[k], array[i]] = [array[i], array[k]];
  }
  return array;
}

// Returns a random integer between low and high, inclusive
function randomIntInRange(low, high) {
  const rangeSize = high - low + 1;
  return low + Math.floor(Math.random() * rangeSize);
}</code></pre><p><code>shuffle</code> makes repeated calls to <code>Math.random()</code> via <code>randomIntInRange</code>. All we&#8217;d have to do to get a reproducible test is stub <code>Math.random()</code> to return a hardcoded value (using <a href="https://bensguide.substack.com/i/139156516/cleaning-up">the test double library we wrote in an earlier post</a>):</p><pre><code>test("shuffle", {
  "puts the elements in a random order"() {
    Doubles.replace(Math, "random", () =&gt; 0.5);
    expect(shuffle([1, 2, 3, 4]), equals, [3, 1, 4, 2]);
  },
})</code></pre><p>Unfortunately, this test is <strong>brittle</strong>. If we change our shuffling algorithm, the test will most likely fail, even if the new algorithm is correct. The assertion in this test is too <strong>tight</strong>: it is overspecifying the behavior we want.</p><h2>A better way</h2><p>So here&#8217;s how I actually test code that involves randomness: <strong>I loosen the assertion</strong>. Instead of specifying an exact answer, I phrase my tests to describe desirable properties of the answer.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg" width="572" height="446.19354838709677" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:798,&quot;width&quot;:1023,&quot;resizeWidth&quot;:572,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Loose bolts&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Loose bolts" title="Loose bolts" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F67583fd9-e3b8-437d-bea9-acd3aeafad92_1023x798.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/41484395@N06/3938291371">Loose bolts</a>" by <a href="https://www.flickr.com/photos/41484395@N06">Emil Nord&#233;n</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/2.0/?ref=openverse">CC BY-NC-SA 2.0</a>.</figcaption></figure></div><p>For example, a function that shuffles should always return an array of the same length as the one given to it:</p><pre><code>const array = [1, 2, 3, 4, 5];
expect(shuffle(array).length, is, 5);</code></pre><p>It shouldn&#8217;t complain if given an empty array:</p><pre><code>expect(shuffle([]), equals, []);</code></pre><p>It should preserve the set of elements present&#8212;i.e. it shouldn&#8217;t remove or duplicate elements.</p><pre><code>const shuffled = shuffle([1, 2, 3, 4, 5]);
expect(new Set(shuffled), equals, new Set([1, 2, 3, 4, 5]);</code></pre><p>Two invocations should return different results (with high probability):</p><pre><code>expect(
  shuffle([1, 2, 3, 4, 5, 6, 7]),
  not(equals),
  shuffle([1, 2, 3, 4, 5, 6, 7]),
);</code></pre><p>The element that ends up at any position <code>i</code> should not always be the same:</p><pre><code>const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    
for (let i = 0; i &lt; 10; i++) {
  const observedAtIndexI = new Set();  
    
  for (let trial = 0; trial &lt; 10; trial++) {
    const shuffled = shuffle(copy(array));
    observedAtIndexI.add(shuffled[i]);
  }

  expect(observedAtIndexI.size, isGreaterThan, 1);
}

function copy(array) {
  return [...array];
}</code></pre><p>If you find that tests like this fail intermittently, just play with the size of the inputs and the number of loop iterations until the failures go away.</p><p>You can get pretty fancy with this. You could even try to test that your shuffling algorithm is truly random, by e.g. doing a ton of shuffles and seeing how often the first element ends up at the nth position. I won&#8217;t show examples of that, both because I&#8217;m not good enough at statistics to pull off a rigorous version of it, and because I think it&#8217;s unnecessary. Don&#8217;t try to prove correctness with tests. Instead, get your shuffling algorithm from a textbook (or formally prove it correct yourself) and use tests only to catch your programming mistakes.</p><p>That said, maybe you can come up with a test suite that reveals the deficiencies in this sorting algorithm?</p><pre><code>// THIS ONE IS BAD! DON'T USE IT!
function shuffle(array) {
  return array.sort(() =&gt; Math.random() - 0.5);
}</code></pre><p>Let me know in the comments if you do.</p>]]></content:encoded></item><item><title><![CDATA[Depending on Abstractions]]></title><description><![CDATA[Dependency inversion and Jakob's Law]]></description><link>https://bensguide.substack.com/p/depending-on-abstractions</link><guid isPermaLink="true">https://bensguide.substack.com/p/depending-on-abstractions</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Tue, 23 Jan 2024 01:30:06 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>&#8220;So, what do you do?&#8221; &#8220;I play the piano.&#8221; &#8220;Oh, really? Which one?&#8221; (cue laugh track)</p><p>Maybe this joke isn&#8217;t funny, but at least it&#8217;s recognizably a joke, so bear with me. I want to use it as a starting point to answer a question I got from a reader: <strong>&#8220;what&#8217;s an abstraction?&#8221;</strong></p><p>The joke is a joke because a pianist should be able to play any piano, not just one specific piano. The concept of a piano is an <strong>abstraction</strong>. The pianos themselves are <strong>concretions</strong>.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg" width="1024" height="709" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:709,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;piano&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="piano" title="piano" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0878ddc-bb75-4de9-a6ec-6b070859904d_1024x709.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption">"<a href="https://www.flickr.com/photos/10175246@N08/6164375651">piano</a>" by <a href="https://www.flickr.com/photos/10175246@N08">psyberartist</a> is licensed under <a href="https://creativecommons.org/licenses/by/2.0/?ref=openverse">CC BY 2.0</a>.</figcaption></figure></div><p>In the previous post, I wrote about how the dependency inversion principle says we should depend on abstractions, not concrete implementations. To recap, here&#8217;s how Bob Martin phrased it:</p><ul><li><p>High-level modules should not import anything from [i.e. <a href="https://bensguide.substack.com/p/static-and-dynamic-calls">statically call</a>] low-level modules. Both should depend on&nbsp;abstractions&nbsp;(e.g., interfaces).</p></li><li><p>Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.</p></li></ul><p>What does it mean for high-level code to depend on an abstraction? Well, if we&#8217;ve written code to play a piano, depending on an abstraction means that we communicate, in the structure of that code, that it can play <em>any</em> piano, not just the specific piano that happens to be in front of it today.</p><p>More than that: if our code can play any <em>keyboard instrument</em>, we ought to let it. We shouldn&#8217;t artificially restrict it to playing pianos.<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1" href="#footnote-1" target="_self">1</a> The concept of a keyboard instrument is even more abstract than the concept of a piano, because there isn&#8217;t a real thing called a &#8220;keyboard instrument,&#8221; just like there isn&#8217;t a species of animal called &#8220;mammal.&#8221;<a class="footnote-anchor" data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2" href="#footnote-2" target="_self">2</a> Every keyboard instrument that exists is some specific <em>type</em> of instrument: a harpsichord, a melodica, a pipe organ, an electric keyboard&#8230;</p><p>If our code can find middle C and wiggle its fingers, it can pick out a melody on any of these instruments. So we should let it, perhaps using some combination of dependency inversion and (in a statically-typed language) interface types. Even though there&#8217;s no such thing as a &#8220;keyboard instrument&#8221; in reality, our code can still refer to the Platonic ideal of such an instrument by defining an interface to represent it. In doing so, it makes itself compatible with all of the various instantiations of that interface. That&#8217;s the essence of the first half of the dependency inversion principle.</p><p>The second half of the dependency inversion principle says that <strong>low-level code should also depend on abstractions</strong>. This is the part that took me years to grok. But all it means is that, if we&#8217;re designing a new keyboard instrument, we ought to design it <em>for keyboard players</em>. E.g. we should use standard-size keys. We should follow the pattern of black and white keys that&#8217;s been used on keyboards for centuries. If it&#8217;s piano-like, the rightmost pedal should be the sustain pedal. And so on. Moreover, if we&#8217;re designing a new musical instrument <em>of any kind</em>, we ought to consider whether a keyboard would be a suitable user interface for it.</p><p>This is just commonsense UX design&#8212;in UX it&#8217;s called <a href="https://www.nngroup.com/videos/jakobs-law-internet-ux/">Jakob&#8217;s Law</a>. When we design a new tool, or redesign an existing one, we shouldn&#8217;t demand that the users of that tool learn a whole new way of doing things. Instead, we should adapt our designs to their existing knowledge and habits. In other words, we should refer to&#8212;we should <em>depend on</em>&#8212;the abstraction in our users&#8217; heads when we&#8217;re designing something new for them.</p><p><strong>Whenever possible, we fit implementations to our users&#8217; preferred abstraction.</strong> We don&#8217;t dream up a new abstraction to fit our implementation, because that forces our users to change. And forcing our users to change is just rude.</p><p>The abstractions in humans&#8217; heads are a bit squishy. People can adapt to things that are a little bit new as long as they can connect them back to something they already know. Computers are not squishy. At the level of code, fitting implementations to an abstraction requires that the abstraction be defined in more or less formal terms: e.g. as an interface type, a test suite, and/or a <a href="https://bensguide.substack.com/p/behavior">behavior</a> specification. But it&#8217;s essentially the same idea that we find in UX design.</p><p>I hope that clarifies things.</p><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-1" href="#footnote-anchor-1" class="footnote-number" contenteditable="false" target="_self">1</a><div class="footnote-content"><p>This point starts to get at another principle of OO design, the Interface Segregation principle. But IMO, all of the SOLID principles are just different views of one underlying truth, so I have no problem blurring the boundaries between them.</p></div></div><div class="footnote" data-component-name="FootnoteToDOM"><a id="footnote-2" href="#footnote-anchor-2" class="footnote-number" contenteditable="false" target="_self">2</a><div class="footnote-content"><p>&#8220;Piano&#8221; and &#8220;keyboard instrument&#8221; are both abstract&#8212;the difference is one of degree rather than kind. Every piano is also a specific <em>type</em> of piano (grand, upright, Steinway, etc.) However, the way human language is structured makes the term &#8220;keyboard instrument&#8221; more obviously abstract (The word &#8220;piano&#8221; <a href="https://books.google.com/ngrams/graph?content=piano%2Ckeyboard%2Ckeyboard+instrument&amp;year_start=1800&amp;year_end=2019&amp;corpus=en-2019&amp;smoothing=3">is more common</a> than &#8220;keyboard instrument,&#8221; and commonly used words tend to be concrete).</p><p></p></div></div>]]></content:encoded></item><item><title><![CDATA[Where to Learn JavaScript]]></title><description><![CDATA[I&#8217;ve gotten feedback that JavaScript syntax differs enough from the syntax of other programming languages to need explanation.]]></description><link>https://bensguide.substack.com/p/where-to-learn-javascript</link><guid isPermaLink="true">https://bensguide.substack.com/p/where-to-learn-javascript</guid><dc:creator><![CDATA[Ben Christel]]></dc:creator><pubDate>Sat, 20 Jan 2024 16:36:18 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/w_256,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8967e7bd-33f4-4513-a9ac-79b9eba3b0f1_144x144.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>I&#8217;ve gotten feedback that JavaScript syntax differs enough from the syntax of other programming languages to need explanation. I should have already known this, but it&#8217;s one of those facts that&#8217;s conveniently easy to ignore if you have the advantage of already knowing JavaScript. My bad.</p><p>I&#8217;m not going to write a JavaScript tutorial, though, because there are already many good resources out there, and there&#8217;s not much I could add to them. Here&#8217;s a short list of my favorites:</p><ul><li><p><a href="https://eloquentjavascript.net/">Eloquent Javascript</a>, by Marijn Haverbeke. This online book introduces programming concepts as well as JavaScript syntax, and it contains many interactive examples. Best of all, it&#8217;s free!</p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web">Mozilla Developer Network</a> (MDN) is the best source of reference documentation for JavaScript and web programming more generally.</p></li><li><p>MDN has a page describing <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators">JavaScript&#8217;s operators and expression syntax</a>.</p></li></ul><p>I&#8217;m not so sure about where to learn TypeScript, but what I&#8217;ve read of Microsoft&#8217;s own <a href="https://www.typescriptlang.org/docs/handbook/intro.html">TypeScript Handbook</a> is pretty good.</p>]]></content:encoded></item></channel></rss>